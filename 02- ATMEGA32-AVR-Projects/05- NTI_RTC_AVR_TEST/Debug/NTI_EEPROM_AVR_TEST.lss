
NTI_EEPROM_AVR_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000317e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  0000317e  00003212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080019c  0080019c  0000334e  2**0
                  ALLOC
  3 .stab         00002a30  00000000  00000000  00003350  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018ef  00000000  00000000  00005d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000766f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  000077ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000079c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  000099d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000ab41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000bb44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000bce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000bfa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 18 18 	call	0x3030	; 0x3030 <main>
      8a:	0c 94 bd 18 	jmp	0x317a	; 0x317a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 18 	jmp	0x310c	; 0x310c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 18 	jmp	0x310c	; 0x310c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 96 18 	jmp	0x312c	; 0x312c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 8e 18 	jmp	0x311c	; 0x311c <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 aa 18 	jmp	0x3154	; 0x3154 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ea 57       	subi	r30, 0x7A	; 122
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <DIO_voidSetPinDirection>:
#include "../inc/DIO_config.h"
#include "../inc/DIO_interface.h"
#include "../inc/DIO_private.h"

void DIO_voidSetPinDirection(PORT_t Copy_PortId,PIN_t Copy_PinId,DIRECTION_t Copy_Direction)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2d 97       	sbiw	r28, 0x0d	; 13
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	6a 83       	std	Y+2, r22	; 0x02
     cee:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_PortId)
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	3d 87       	std	Y+13, r19	; 0x0d
     cf8:	2c 87       	std	Y+12, r18	; 0x0c
     cfa:	8c 85       	ldd	r24, Y+12	; 0x0c
     cfc:	9d 85       	ldd	r25, Y+13	; 0x0d
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	91 05       	cpc	r25, r1
     d02:	09 f4       	brne	.+2      	; 0xd06 <DIO_voidSetPinDirection+0x30>
     d04:	b8 c0       	rjmp	.+368    	; 0xe76 <DIO_voidSetPinDirection+0x1a0>
     d06:	2c 85       	ldd	r18, Y+12	; 0x0c
     d08:	3d 85       	ldd	r19, Y+13	; 0x0d
     d0a:	22 30       	cpi	r18, 0x02	; 2
     d0c:	31 05       	cpc	r19, r1
     d0e:	2c f4       	brge	.+10     	; 0xd1a <DIO_voidSetPinDirection+0x44>
     d10:	8c 85       	ldd	r24, Y+12	; 0x0c
     d12:	9d 85       	ldd	r25, Y+13	; 0x0d
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	71 f0       	breq	.+28     	; 0xd34 <DIO_voidSetPinDirection+0x5e>
     d18:	90 c2       	rjmp	.+1312   	; 0x123a <DIO_voidSetPinDirection+0x564>
     d1a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d1c:	3d 85       	ldd	r19, Y+13	; 0x0d
     d1e:	22 30       	cpi	r18, 0x02	; 2
     d20:	31 05       	cpc	r19, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <DIO_voidSetPinDirection+0x50>
     d24:	49 c1       	rjmp	.+658    	; 0xfb8 <DIO_voidSetPinDirection+0x2e2>
     d26:	8c 85       	ldd	r24, Y+12	; 0x0c
     d28:	9d 85       	ldd	r25, Y+13	; 0x0d
     d2a:	83 30       	cpi	r24, 0x03	; 3
     d2c:	91 05       	cpc	r25, r1
     d2e:	09 f4       	brne	.+2      	; 0xd32 <DIO_voidSetPinDirection+0x5c>
     d30:	e4 c1       	rjmp	.+968    	; 0x10fa <DIO_voidSetPinDirection+0x424>
     d32:	83 c2       	rjmp	.+1286   	; 0x123a <DIO_voidSetPinDirection+0x564>
	{
		case PORT_A:
			switch(Copy_PinId)
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	3b 87       	std	Y+11, r19	; 0x0b
     d3c:	2a 87       	std	Y+10, r18	; 0x0a
     d3e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d40:	9b 85       	ldd	r25, Y+11	; 0x0b
     d42:	83 30       	cpi	r24, 0x03	; 3
     d44:	91 05       	cpc	r25, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <DIO_voidSetPinDirection+0x74>
     d48:	51 c0       	rjmp	.+162    	; 0xdec <DIO_voidSetPinDirection+0x116>
     d4a:	2a 85       	ldd	r18, Y+10	; 0x0a
     d4c:	3b 85       	ldd	r19, Y+11	; 0x0b
     d4e:	24 30       	cpi	r18, 0x04	; 4
     d50:	31 05       	cpc	r19, r1
     d52:	7c f4       	brge	.+30     	; 0xd72 <DIO_voidSetPinDirection+0x9c>
     d54:	8a 85       	ldd	r24, Y+10	; 0x0a
     d56:	9b 85       	ldd	r25, Y+11	; 0x0b
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	91 05       	cpc	r25, r1
     d5c:	71 f1       	breq	.+92     	; 0xdba <DIO_voidSetPinDirection+0xe4>
     d5e:	2a 85       	ldd	r18, Y+10	; 0x0a
     d60:	3b 85       	ldd	r19, Y+11	; 0x0b
     d62:	22 30       	cpi	r18, 0x02	; 2
     d64:	31 05       	cpc	r19, r1
     d66:	ac f5       	brge	.+106    	; 0xdd2 <DIO_voidSetPinDirection+0xfc>
     d68:	8a 85       	ldd	r24, Y+10	; 0x0a
     d6a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	d1 f0       	breq	.+52     	; 0xda4 <DIO_voidSetPinDirection+0xce>
     d70:	64 c2       	rjmp	.+1224   	; 0x123a <DIO_voidSetPinDirection+0x564>
     d72:	2a 85       	ldd	r18, Y+10	; 0x0a
     d74:	3b 85       	ldd	r19, Y+11	; 0x0b
     d76:	25 30       	cpi	r18, 0x05	; 5
     d78:	31 05       	cpc	r19, r1
     d7a:	09 f4       	brne	.+2      	; 0xd7e <DIO_voidSetPinDirection+0xa8>
     d7c:	52 c0       	rjmp	.+164    	; 0xe22 <DIO_voidSetPinDirection+0x14c>
     d7e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d80:	9b 85       	ldd	r25, Y+11	; 0x0b
     d82:	85 30       	cpi	r24, 0x05	; 5
     d84:	91 05       	cpc	r25, r1
     d86:	0c f4       	brge	.+2      	; 0xd8a <DIO_voidSetPinDirection+0xb4>
     d88:	3f c0       	rjmp	.+126    	; 0xe08 <DIO_voidSetPinDirection+0x132>
     d8a:	2a 85       	ldd	r18, Y+10	; 0x0a
     d8c:	3b 85       	ldd	r19, Y+11	; 0x0b
     d8e:	26 30       	cpi	r18, 0x06	; 6
     d90:	31 05       	cpc	r19, r1
     d92:	09 f4       	brne	.+2      	; 0xd96 <DIO_voidSetPinDirection+0xc0>
     d94:	54 c0       	rjmp	.+168    	; 0xe3e <DIO_voidSetPinDirection+0x168>
     d96:	8a 85       	ldd	r24, Y+10	; 0x0a
     d98:	9b 85       	ldd	r25, Y+11	; 0x0b
     d9a:	87 30       	cpi	r24, 0x07	; 7
     d9c:	91 05       	cpc	r25, r1
     d9e:	09 f4       	brne	.+2      	; 0xda2 <DIO_voidSetPinDirection+0xcc>
     da0:	5d c0       	rjmp	.+186    	; 0xe5c <DIO_voidSetPinDirection+0x186>
     da2:	4b c2       	rjmp	.+1174   	; 0x123a <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRA.Bit.B0 = Copy_Direction;
     da4:	e0 e3       	ldi	r30, 0x30	; 48
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	81 70       	andi	r24, 0x01	; 1
     dac:	98 2f       	mov	r25, r24
     dae:	91 70       	andi	r25, 0x01	; 1
     db0:	82 85       	ldd	r24, Z+10	; 0x0a
     db2:	8e 7f       	andi	r24, 0xFE	; 254
     db4:	89 2b       	or	r24, r25
     db6:	82 87       	std	Z+10, r24	; 0x0a
     db8:	40 c2       	rjmp	.+1152   	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRA.Bit.B1 = Copy_Direction;
     dba:	e0 e3       	ldi	r30, 0x30	; 48
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	81 70       	andi	r24, 0x01	; 1
     dc2:	81 70       	andi	r24, 0x01	; 1
     dc4:	98 2f       	mov	r25, r24
     dc6:	99 0f       	add	r25, r25
     dc8:	82 85       	ldd	r24, Z+10	; 0x0a
     dca:	8d 7f       	andi	r24, 0xFD	; 253
     dcc:	89 2b       	or	r24, r25
     dce:	82 87       	std	Z+10, r24	; 0x0a
     dd0:	34 c2       	rjmp	.+1128   	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRA.Bit.B2 = Copy_Direction;
     dd2:	e0 e3       	ldi	r30, 0x30	; 48
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	81 70       	andi	r24, 0x01	; 1
     dda:	81 70       	andi	r24, 0x01	; 1
     ddc:	98 2f       	mov	r25, r24
     dde:	99 0f       	add	r25, r25
     de0:	99 0f       	add	r25, r25
     de2:	82 85       	ldd	r24, Z+10	; 0x0a
     de4:	8b 7f       	andi	r24, 0xFB	; 251
     de6:	89 2b       	or	r24, r25
     de8:	82 87       	std	Z+10, r24	; 0x0a
     dea:	27 c2       	rjmp	.+1102   	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRA.Bit.B3 = Copy_Direction;
     dec:	e0 e3       	ldi	r30, 0x30	; 48
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	81 70       	andi	r24, 0x01	; 1
     df4:	81 70       	andi	r24, 0x01	; 1
     df6:	98 2f       	mov	r25, r24
     df8:	99 0f       	add	r25, r25
     dfa:	99 0f       	add	r25, r25
     dfc:	99 0f       	add	r25, r25
     dfe:	82 85       	ldd	r24, Z+10	; 0x0a
     e00:	87 7f       	andi	r24, 0xF7	; 247
     e02:	89 2b       	or	r24, r25
     e04:	82 87       	std	Z+10, r24	; 0x0a
     e06:	19 c2       	rjmp	.+1074   	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRA.Bit.B4 = Copy_Direction;
     e08:	e0 e3       	ldi	r30, 0x30	; 48
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	81 70       	andi	r24, 0x01	; 1
     e10:	81 70       	andi	r24, 0x01	; 1
     e12:	98 2f       	mov	r25, r24
     e14:	92 95       	swap	r25
     e16:	90 7f       	andi	r25, 0xF0	; 240
     e18:	82 85       	ldd	r24, Z+10	; 0x0a
     e1a:	8f 7e       	andi	r24, 0xEF	; 239
     e1c:	89 2b       	or	r24, r25
     e1e:	82 87       	std	Z+10, r24	; 0x0a
     e20:	0c c2       	rjmp	.+1048   	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRA.Bit.B5 = Copy_Direction;
     e22:	e0 e3       	ldi	r30, 0x30	; 48
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	81 70       	andi	r24, 0x01	; 1
     e2a:	81 70       	andi	r24, 0x01	; 1
     e2c:	98 2f       	mov	r25, r24
     e2e:	92 95       	swap	r25
     e30:	99 0f       	add	r25, r25
     e32:	90 7e       	andi	r25, 0xE0	; 224
     e34:	82 85       	ldd	r24, Z+10	; 0x0a
     e36:	8f 7d       	andi	r24, 0xDF	; 223
     e38:	89 2b       	or	r24, r25
     e3a:	82 87       	std	Z+10, r24	; 0x0a
     e3c:	fe c1       	rjmp	.+1020   	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRA.Bit.B6 = Copy_Direction;
     e3e:	e0 e3       	ldi	r30, 0x30	; 48
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	81 70       	andi	r24, 0x01	; 1
     e46:	81 70       	andi	r24, 0x01	; 1
     e48:	98 2f       	mov	r25, r24
     e4a:	92 95       	swap	r25
     e4c:	99 0f       	add	r25, r25
     e4e:	99 0f       	add	r25, r25
     e50:	90 7c       	andi	r25, 0xC0	; 192
     e52:	82 85       	ldd	r24, Z+10	; 0x0a
     e54:	8f 7b       	andi	r24, 0xBF	; 191
     e56:	89 2b       	or	r24, r25
     e58:	82 87       	std	Z+10, r24	; 0x0a
     e5a:	ef c1       	rjmp	.+990    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRA.Bit.B7 = Copy_Direction;
     e5c:	e0 e3       	ldi	r30, 0x30	; 48
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	81 70       	andi	r24, 0x01	; 1
     e64:	98 2f       	mov	r25, r24
     e66:	97 95       	ror	r25
     e68:	99 27       	eor	r25, r25
     e6a:	97 95       	ror	r25
     e6c:	82 85       	ldd	r24, Z+10	; 0x0a
     e6e:	8f 77       	andi	r24, 0x7F	; 127
     e70:	89 2b       	or	r24, r25
     e72:	82 87       	std	Z+10, r24	; 0x0a
     e74:	e2 c1       	rjmp	.+964    	; 0x123a <DIO_voidSetPinDirection+0x564>
				default: break;
			}
			break;

		case PORT_B:
			switch(Copy_PinId)
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	39 87       	std	Y+9, r19	; 0x09
     e7e:	28 87       	std	Y+8, r18	; 0x08
     e80:	88 85       	ldd	r24, Y+8	; 0x08
     e82:	99 85       	ldd	r25, Y+9	; 0x09
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <DIO_voidSetPinDirection+0x1b6>
     e8a:	51 c0       	rjmp	.+162    	; 0xf2e <DIO_voidSetPinDirection+0x258>
     e8c:	28 85       	ldd	r18, Y+8	; 0x08
     e8e:	39 85       	ldd	r19, Y+9	; 0x09
     e90:	24 30       	cpi	r18, 0x04	; 4
     e92:	31 05       	cpc	r19, r1
     e94:	7c f4       	brge	.+30     	; 0xeb4 <DIO_voidSetPinDirection+0x1de>
     e96:	88 85       	ldd	r24, Y+8	; 0x08
     e98:	99 85       	ldd	r25, Y+9	; 0x09
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	71 f1       	breq	.+92     	; 0xefc <DIO_voidSetPinDirection+0x226>
     ea0:	28 85       	ldd	r18, Y+8	; 0x08
     ea2:	39 85       	ldd	r19, Y+9	; 0x09
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	ac f5       	brge	.+106    	; 0xf14 <DIO_voidSetPinDirection+0x23e>
     eaa:	88 85       	ldd	r24, Y+8	; 0x08
     eac:	99 85       	ldd	r25, Y+9	; 0x09
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	d1 f0       	breq	.+52     	; 0xee6 <DIO_voidSetPinDirection+0x210>
     eb2:	c3 c1       	rjmp	.+902    	; 0x123a <DIO_voidSetPinDirection+0x564>
     eb4:	28 85       	ldd	r18, Y+8	; 0x08
     eb6:	39 85       	ldd	r19, Y+9	; 0x09
     eb8:	25 30       	cpi	r18, 0x05	; 5
     eba:	31 05       	cpc	r19, r1
     ebc:	09 f4       	brne	.+2      	; 0xec0 <DIO_voidSetPinDirection+0x1ea>
     ebe:	52 c0       	rjmp	.+164    	; 0xf64 <DIO_voidSetPinDirection+0x28e>
     ec0:	88 85       	ldd	r24, Y+8	; 0x08
     ec2:	99 85       	ldd	r25, Y+9	; 0x09
     ec4:	85 30       	cpi	r24, 0x05	; 5
     ec6:	91 05       	cpc	r25, r1
     ec8:	0c f4       	brge	.+2      	; 0xecc <DIO_voidSetPinDirection+0x1f6>
     eca:	3f c0       	rjmp	.+126    	; 0xf4a <DIO_voidSetPinDirection+0x274>
     ecc:	28 85       	ldd	r18, Y+8	; 0x08
     ece:	39 85       	ldd	r19, Y+9	; 0x09
     ed0:	26 30       	cpi	r18, 0x06	; 6
     ed2:	31 05       	cpc	r19, r1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <DIO_voidSetPinDirection+0x202>
     ed6:	54 c0       	rjmp	.+168    	; 0xf80 <DIO_voidSetPinDirection+0x2aa>
     ed8:	88 85       	ldd	r24, Y+8	; 0x08
     eda:	99 85       	ldd	r25, Y+9	; 0x09
     edc:	87 30       	cpi	r24, 0x07	; 7
     ede:	91 05       	cpc	r25, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <DIO_voidSetPinDirection+0x20e>
     ee2:	5d c0       	rjmp	.+186    	; 0xf9e <DIO_voidSetPinDirection+0x2c8>
     ee4:	aa c1       	rjmp	.+852    	; 0x123a <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRB.Bit.B0 = Copy_Direction;
     ee6:	e0 e3       	ldi	r30, 0x30	; 48
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	81 70       	andi	r24, 0x01	; 1
     eee:	98 2f       	mov	r25, r24
     ef0:	91 70       	andi	r25, 0x01	; 1
     ef2:	87 81       	ldd	r24, Z+7	; 0x07
     ef4:	8e 7f       	andi	r24, 0xFE	; 254
     ef6:	89 2b       	or	r24, r25
     ef8:	87 83       	std	Z+7, r24	; 0x07
     efa:	9f c1       	rjmp	.+830    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRB.Bit.B1 = Copy_Direction;
     efc:	e0 e3       	ldi	r30, 0x30	; 48
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	81 70       	andi	r24, 0x01	; 1
     f04:	81 70       	andi	r24, 0x01	; 1
     f06:	98 2f       	mov	r25, r24
     f08:	99 0f       	add	r25, r25
     f0a:	87 81       	ldd	r24, Z+7	; 0x07
     f0c:	8d 7f       	andi	r24, 0xFD	; 253
     f0e:	89 2b       	or	r24, r25
     f10:	87 83       	std	Z+7, r24	; 0x07
     f12:	93 c1       	rjmp	.+806    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRB.Bit.B2 = Copy_Direction;
     f14:	e0 e3       	ldi	r30, 0x30	; 48
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	81 70       	andi	r24, 0x01	; 1
     f1c:	81 70       	andi	r24, 0x01	; 1
     f1e:	98 2f       	mov	r25, r24
     f20:	99 0f       	add	r25, r25
     f22:	99 0f       	add	r25, r25
     f24:	87 81       	ldd	r24, Z+7	; 0x07
     f26:	8b 7f       	andi	r24, 0xFB	; 251
     f28:	89 2b       	or	r24, r25
     f2a:	87 83       	std	Z+7, r24	; 0x07
     f2c:	86 c1       	rjmp	.+780    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRB.Bit.B3 = Copy_Direction;
     f2e:	e0 e3       	ldi	r30, 0x30	; 48
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	81 70       	andi	r24, 0x01	; 1
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	98 2f       	mov	r25, r24
     f3a:	99 0f       	add	r25, r25
     f3c:	99 0f       	add	r25, r25
     f3e:	99 0f       	add	r25, r25
     f40:	87 81       	ldd	r24, Z+7	; 0x07
     f42:	87 7f       	andi	r24, 0xF7	; 247
     f44:	89 2b       	or	r24, r25
     f46:	87 83       	std	Z+7, r24	; 0x07
     f48:	78 c1       	rjmp	.+752    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRB.Bit.B4 = Copy_Direction;
     f4a:	e0 e3       	ldi	r30, 0x30	; 48
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	81 70       	andi	r24, 0x01	; 1
     f52:	81 70       	andi	r24, 0x01	; 1
     f54:	98 2f       	mov	r25, r24
     f56:	92 95       	swap	r25
     f58:	90 7f       	andi	r25, 0xF0	; 240
     f5a:	87 81       	ldd	r24, Z+7	; 0x07
     f5c:	8f 7e       	andi	r24, 0xEF	; 239
     f5e:	89 2b       	or	r24, r25
     f60:	87 83       	std	Z+7, r24	; 0x07
     f62:	6b c1       	rjmp	.+726    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRB.Bit.B5 = Copy_Direction;
     f64:	e0 e3       	ldi	r30, 0x30	; 48
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	81 70       	andi	r24, 0x01	; 1
     f6c:	81 70       	andi	r24, 0x01	; 1
     f6e:	98 2f       	mov	r25, r24
     f70:	92 95       	swap	r25
     f72:	99 0f       	add	r25, r25
     f74:	90 7e       	andi	r25, 0xE0	; 224
     f76:	87 81       	ldd	r24, Z+7	; 0x07
     f78:	8f 7d       	andi	r24, 0xDF	; 223
     f7a:	89 2b       	or	r24, r25
     f7c:	87 83       	std	Z+7, r24	; 0x07
     f7e:	5d c1       	rjmp	.+698    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRB.Bit.B6 = Copy_Direction;
     f80:	e0 e3       	ldi	r30, 0x30	; 48
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	81 70       	andi	r24, 0x01	; 1
     f88:	81 70       	andi	r24, 0x01	; 1
     f8a:	98 2f       	mov	r25, r24
     f8c:	92 95       	swap	r25
     f8e:	99 0f       	add	r25, r25
     f90:	99 0f       	add	r25, r25
     f92:	90 7c       	andi	r25, 0xC0	; 192
     f94:	87 81       	ldd	r24, Z+7	; 0x07
     f96:	8f 7b       	andi	r24, 0xBF	; 191
     f98:	89 2b       	or	r24, r25
     f9a:	87 83       	std	Z+7, r24	; 0x07
     f9c:	4e c1       	rjmp	.+668    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRB.Bit.B7 = Copy_Direction;
     f9e:	e0 e3       	ldi	r30, 0x30	; 48
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	81 70       	andi	r24, 0x01	; 1
     fa6:	98 2f       	mov	r25, r24
     fa8:	97 95       	ror	r25
     faa:	99 27       	eor	r25, r25
     fac:	97 95       	ror	r25
     fae:	87 81       	ldd	r24, Z+7	; 0x07
     fb0:	8f 77       	andi	r24, 0x7F	; 127
     fb2:	89 2b       	or	r24, r25
     fb4:	87 83       	std	Z+7, r24	; 0x07
     fb6:	41 c1       	rjmp	.+642    	; 0x123a <DIO_voidSetPinDirection+0x564>
			}
			break;


		case PORT_C:
			switch(Copy_PinId)
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	3f 83       	std	Y+7, r19	; 0x07
     fc0:	2e 83       	std	Y+6, r18	; 0x06
     fc2:	8e 81       	ldd	r24, Y+6	; 0x06
     fc4:	9f 81       	ldd	r25, Y+7	; 0x07
     fc6:	83 30       	cpi	r24, 0x03	; 3
     fc8:	91 05       	cpc	r25, r1
     fca:	09 f4       	brne	.+2      	; 0xfce <DIO_voidSetPinDirection+0x2f8>
     fcc:	51 c0       	rjmp	.+162    	; 0x1070 <DIO_voidSetPinDirection+0x39a>
     fce:	2e 81       	ldd	r18, Y+6	; 0x06
     fd0:	3f 81       	ldd	r19, Y+7	; 0x07
     fd2:	24 30       	cpi	r18, 0x04	; 4
     fd4:	31 05       	cpc	r19, r1
     fd6:	7c f4       	brge	.+30     	; 0xff6 <DIO_voidSetPinDirection+0x320>
     fd8:	8e 81       	ldd	r24, Y+6	; 0x06
     fda:	9f 81       	ldd	r25, Y+7	; 0x07
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	91 05       	cpc	r25, r1
     fe0:	71 f1       	breq	.+92     	; 0x103e <DIO_voidSetPinDirection+0x368>
     fe2:	2e 81       	ldd	r18, Y+6	; 0x06
     fe4:	3f 81       	ldd	r19, Y+7	; 0x07
     fe6:	22 30       	cpi	r18, 0x02	; 2
     fe8:	31 05       	cpc	r19, r1
     fea:	ac f5       	brge	.+106    	; 0x1056 <DIO_voidSetPinDirection+0x380>
     fec:	8e 81       	ldd	r24, Y+6	; 0x06
     fee:	9f 81       	ldd	r25, Y+7	; 0x07
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	d1 f0       	breq	.+52     	; 0x1028 <DIO_voidSetPinDirection+0x352>
     ff4:	22 c1       	rjmp	.+580    	; 0x123a <DIO_voidSetPinDirection+0x564>
     ff6:	2e 81       	ldd	r18, Y+6	; 0x06
     ff8:	3f 81       	ldd	r19, Y+7	; 0x07
     ffa:	25 30       	cpi	r18, 0x05	; 5
     ffc:	31 05       	cpc	r19, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <DIO_voidSetPinDirection+0x32c>
    1000:	52 c0       	rjmp	.+164    	; 0x10a6 <DIO_voidSetPinDirection+0x3d0>
    1002:	8e 81       	ldd	r24, Y+6	; 0x06
    1004:	9f 81       	ldd	r25, Y+7	; 0x07
    1006:	85 30       	cpi	r24, 0x05	; 5
    1008:	91 05       	cpc	r25, r1
    100a:	0c f4       	brge	.+2      	; 0x100e <DIO_voidSetPinDirection+0x338>
    100c:	3f c0       	rjmp	.+126    	; 0x108c <DIO_voidSetPinDirection+0x3b6>
    100e:	2e 81       	ldd	r18, Y+6	; 0x06
    1010:	3f 81       	ldd	r19, Y+7	; 0x07
    1012:	26 30       	cpi	r18, 0x06	; 6
    1014:	31 05       	cpc	r19, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <DIO_voidSetPinDirection+0x344>
    1018:	54 c0       	rjmp	.+168    	; 0x10c2 <DIO_voidSetPinDirection+0x3ec>
    101a:	8e 81       	ldd	r24, Y+6	; 0x06
    101c:	9f 81       	ldd	r25, Y+7	; 0x07
    101e:	87 30       	cpi	r24, 0x07	; 7
    1020:	91 05       	cpc	r25, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <DIO_voidSetPinDirection+0x350>
    1024:	5d c0       	rjmp	.+186    	; 0x10e0 <DIO_voidSetPinDirection+0x40a>
    1026:	09 c1       	rjmp	.+530    	; 0x123a <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRC.Bit.B0 = Copy_Direction;
    1028:	e0 e3       	ldi	r30, 0x30	; 48
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	81 70       	andi	r24, 0x01	; 1
    1030:	98 2f       	mov	r25, r24
    1032:	91 70       	andi	r25, 0x01	; 1
    1034:	84 81       	ldd	r24, Z+4	; 0x04
    1036:	8e 7f       	andi	r24, 0xFE	; 254
    1038:	89 2b       	or	r24, r25
    103a:	84 83       	std	Z+4, r24	; 0x04
    103c:	fe c0       	rjmp	.+508    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRC.Bit.B1 = Copy_Direction;
    103e:	e0 e3       	ldi	r30, 0x30	; 48
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	81 70       	andi	r24, 0x01	; 1
    1046:	81 70       	andi	r24, 0x01	; 1
    1048:	98 2f       	mov	r25, r24
    104a:	99 0f       	add	r25, r25
    104c:	84 81       	ldd	r24, Z+4	; 0x04
    104e:	8d 7f       	andi	r24, 0xFD	; 253
    1050:	89 2b       	or	r24, r25
    1052:	84 83       	std	Z+4, r24	; 0x04
    1054:	f2 c0       	rjmp	.+484    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRC.Bit.B2 = Copy_Direction;
    1056:	e0 e3       	ldi	r30, 0x30	; 48
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	81 70       	andi	r24, 0x01	; 1
    105e:	81 70       	andi	r24, 0x01	; 1
    1060:	98 2f       	mov	r25, r24
    1062:	99 0f       	add	r25, r25
    1064:	99 0f       	add	r25, r25
    1066:	84 81       	ldd	r24, Z+4	; 0x04
    1068:	8b 7f       	andi	r24, 0xFB	; 251
    106a:	89 2b       	or	r24, r25
    106c:	84 83       	std	Z+4, r24	; 0x04
    106e:	e5 c0       	rjmp	.+458    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRC.Bit.B3 = Copy_Direction;
    1070:	e0 e3       	ldi	r30, 0x30	; 48
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	81 70       	andi	r24, 0x01	; 1
    1078:	81 70       	andi	r24, 0x01	; 1
    107a:	98 2f       	mov	r25, r24
    107c:	99 0f       	add	r25, r25
    107e:	99 0f       	add	r25, r25
    1080:	99 0f       	add	r25, r25
    1082:	84 81       	ldd	r24, Z+4	; 0x04
    1084:	87 7f       	andi	r24, 0xF7	; 247
    1086:	89 2b       	or	r24, r25
    1088:	84 83       	std	Z+4, r24	; 0x04
    108a:	d7 c0       	rjmp	.+430    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRC.Bit.B4 = Copy_Direction;
    108c:	e0 e3       	ldi	r30, 0x30	; 48
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	81 70       	andi	r24, 0x01	; 1
    1094:	81 70       	andi	r24, 0x01	; 1
    1096:	98 2f       	mov	r25, r24
    1098:	92 95       	swap	r25
    109a:	90 7f       	andi	r25, 0xF0	; 240
    109c:	84 81       	ldd	r24, Z+4	; 0x04
    109e:	8f 7e       	andi	r24, 0xEF	; 239
    10a0:	89 2b       	or	r24, r25
    10a2:	84 83       	std	Z+4, r24	; 0x04
    10a4:	ca c0       	rjmp	.+404    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRC.Bit.B5 = Copy_Direction;
    10a6:	e0 e3       	ldi	r30, 0x30	; 48
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	81 70       	andi	r24, 0x01	; 1
    10ae:	81 70       	andi	r24, 0x01	; 1
    10b0:	98 2f       	mov	r25, r24
    10b2:	92 95       	swap	r25
    10b4:	99 0f       	add	r25, r25
    10b6:	90 7e       	andi	r25, 0xE0	; 224
    10b8:	84 81       	ldd	r24, Z+4	; 0x04
    10ba:	8f 7d       	andi	r24, 0xDF	; 223
    10bc:	89 2b       	or	r24, r25
    10be:	84 83       	std	Z+4, r24	; 0x04
    10c0:	bc c0       	rjmp	.+376    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRC.Bit.B6 = Copy_Direction;
    10c2:	e0 e3       	ldi	r30, 0x30	; 48
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	81 70       	andi	r24, 0x01	; 1
    10ca:	81 70       	andi	r24, 0x01	; 1
    10cc:	98 2f       	mov	r25, r24
    10ce:	92 95       	swap	r25
    10d0:	99 0f       	add	r25, r25
    10d2:	99 0f       	add	r25, r25
    10d4:	90 7c       	andi	r25, 0xC0	; 192
    10d6:	84 81       	ldd	r24, Z+4	; 0x04
    10d8:	8f 7b       	andi	r24, 0xBF	; 191
    10da:	89 2b       	or	r24, r25
    10dc:	84 83       	std	Z+4, r24	; 0x04
    10de:	ad c0       	rjmp	.+346    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRC.Bit.B7 = Copy_Direction;
    10e0:	e0 e3       	ldi	r30, 0x30	; 48
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	81 70       	andi	r24, 0x01	; 1
    10e8:	98 2f       	mov	r25, r24
    10ea:	97 95       	ror	r25
    10ec:	99 27       	eor	r25, r25
    10ee:	97 95       	ror	r25
    10f0:	84 81       	ldd	r24, Z+4	; 0x04
    10f2:	8f 77       	andi	r24, 0x7F	; 127
    10f4:	89 2b       	or	r24, r25
    10f6:	84 83       	std	Z+4, r24	; 0x04
    10f8:	a0 c0       	rjmp	.+320    	; 0x123a <DIO_voidSetPinDirection+0x564>
				default: break;
			}
			break;

		case PORT_D:
			switch(Copy_PinId)
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3d 83       	std	Y+5, r19	; 0x05
    1102:	2c 83       	std	Y+4, r18	; 0x04
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	91 05       	cpc	r25, r1
    110c:	09 f4       	brne	.+2      	; 0x1110 <DIO_voidSetPinDirection+0x43a>
    110e:	51 c0       	rjmp	.+162    	; 0x11b2 <DIO_voidSetPinDirection+0x4dc>
    1110:	2c 81       	ldd	r18, Y+4	; 0x04
    1112:	3d 81       	ldd	r19, Y+5	; 0x05
    1114:	24 30       	cpi	r18, 0x04	; 4
    1116:	31 05       	cpc	r19, r1
    1118:	7c f4       	brge	.+30     	; 0x1138 <DIO_voidSetPinDirection+0x462>
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	9d 81       	ldd	r25, Y+5	; 0x05
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	91 05       	cpc	r25, r1
    1122:	71 f1       	breq	.+92     	; 0x1180 <DIO_voidSetPinDirection+0x4aa>
    1124:	2c 81       	ldd	r18, Y+4	; 0x04
    1126:	3d 81       	ldd	r19, Y+5	; 0x05
    1128:	22 30       	cpi	r18, 0x02	; 2
    112a:	31 05       	cpc	r19, r1
    112c:	ac f5       	brge	.+106    	; 0x1198 <DIO_voidSetPinDirection+0x4c2>
    112e:	8c 81       	ldd	r24, Y+4	; 0x04
    1130:	9d 81       	ldd	r25, Y+5	; 0x05
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	d1 f0       	breq	.+52     	; 0x116a <DIO_voidSetPinDirection+0x494>
    1136:	81 c0       	rjmp	.+258    	; 0x123a <DIO_voidSetPinDirection+0x564>
    1138:	2c 81       	ldd	r18, Y+4	; 0x04
    113a:	3d 81       	ldd	r19, Y+5	; 0x05
    113c:	25 30       	cpi	r18, 0x05	; 5
    113e:	31 05       	cpc	r19, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <DIO_voidSetPinDirection+0x46e>
    1142:	52 c0       	rjmp	.+164    	; 0x11e8 <DIO_voidSetPinDirection+0x512>
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	9d 81       	ldd	r25, Y+5	; 0x05
    1148:	85 30       	cpi	r24, 0x05	; 5
    114a:	91 05       	cpc	r25, r1
    114c:	0c f4       	brge	.+2      	; 0x1150 <DIO_voidSetPinDirection+0x47a>
    114e:	3f c0       	rjmp	.+126    	; 0x11ce <DIO_voidSetPinDirection+0x4f8>
    1150:	2c 81       	ldd	r18, Y+4	; 0x04
    1152:	3d 81       	ldd	r19, Y+5	; 0x05
    1154:	26 30       	cpi	r18, 0x06	; 6
    1156:	31 05       	cpc	r19, r1
    1158:	09 f4       	brne	.+2      	; 0x115c <DIO_voidSetPinDirection+0x486>
    115a:	54 c0       	rjmp	.+168    	; 0x1204 <DIO_voidSetPinDirection+0x52e>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	87 30       	cpi	r24, 0x07	; 7
    1162:	91 05       	cpc	r25, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <DIO_voidSetPinDirection+0x492>
    1166:	5d c0       	rjmp	.+186    	; 0x1222 <DIO_voidSetPinDirection+0x54c>
    1168:	68 c0       	rjmp	.+208    	; 0x123a <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRD.Bit.B0 = Copy_Direction;
    116a:	e0 e3       	ldi	r30, 0x30	; 48
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	98 2f       	mov	r25, r24
    1174:	91 70       	andi	r25, 0x01	; 1
    1176:	81 81       	ldd	r24, Z+1	; 0x01
    1178:	8e 7f       	andi	r24, 0xFE	; 254
    117a:	89 2b       	or	r24, r25
    117c:	81 83       	std	Z+1, r24	; 0x01
    117e:	5d c0       	rjmp	.+186    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRD.Bit.B1 = Copy_Direction;
    1180:	e0 e3       	ldi	r30, 0x30	; 48
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	81 70       	andi	r24, 0x01	; 1
    118a:	98 2f       	mov	r25, r24
    118c:	99 0f       	add	r25, r25
    118e:	81 81       	ldd	r24, Z+1	; 0x01
    1190:	8d 7f       	andi	r24, 0xFD	; 253
    1192:	89 2b       	or	r24, r25
    1194:	81 83       	std	Z+1, r24	; 0x01
    1196:	51 c0       	rjmp	.+162    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRD.Bit.B2 = Copy_Direction;
    1198:	e0 e3       	ldi	r30, 0x30	; 48
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	81 70       	andi	r24, 0x01	; 1
    11a0:	81 70       	andi	r24, 0x01	; 1
    11a2:	98 2f       	mov	r25, r24
    11a4:	99 0f       	add	r25, r25
    11a6:	99 0f       	add	r25, r25
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	8b 7f       	andi	r24, 0xFB	; 251
    11ac:	89 2b       	or	r24, r25
    11ae:	81 83       	std	Z+1, r24	; 0x01
    11b0:	44 c0       	rjmp	.+136    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRD.Bit.B3 = Copy_Direction;
    11b2:	e0 e3       	ldi	r30, 0x30	; 48
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	81 70       	andi	r24, 0x01	; 1
    11ba:	81 70       	andi	r24, 0x01	; 1
    11bc:	98 2f       	mov	r25, r24
    11be:	99 0f       	add	r25, r25
    11c0:	99 0f       	add	r25, r25
    11c2:	99 0f       	add	r25, r25
    11c4:	81 81       	ldd	r24, Z+1	; 0x01
    11c6:	87 7f       	andi	r24, 0xF7	; 247
    11c8:	89 2b       	or	r24, r25
    11ca:	81 83       	std	Z+1, r24	; 0x01
    11cc:	36 c0       	rjmp	.+108    	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRD.Bit.B4 = Copy_Direction;
    11ce:	e0 e3       	ldi	r30, 0x30	; 48
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	81 70       	andi	r24, 0x01	; 1
    11d6:	81 70       	andi	r24, 0x01	; 1
    11d8:	98 2f       	mov	r25, r24
    11da:	92 95       	swap	r25
    11dc:	90 7f       	andi	r25, 0xF0	; 240
    11de:	81 81       	ldd	r24, Z+1	; 0x01
    11e0:	8f 7e       	andi	r24, 0xEF	; 239
    11e2:	89 2b       	or	r24, r25
    11e4:	81 83       	std	Z+1, r24	; 0x01
    11e6:	29 c0       	rjmp	.+82     	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRD.Bit.B5 = Copy_Direction;
    11e8:	e0 e3       	ldi	r30, 0x30	; 48
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	81 70       	andi	r24, 0x01	; 1
    11f0:	81 70       	andi	r24, 0x01	; 1
    11f2:	98 2f       	mov	r25, r24
    11f4:	92 95       	swap	r25
    11f6:	99 0f       	add	r25, r25
    11f8:	90 7e       	andi	r25, 0xE0	; 224
    11fa:	81 81       	ldd	r24, Z+1	; 0x01
    11fc:	8f 7d       	andi	r24, 0xDF	; 223
    11fe:	89 2b       	or	r24, r25
    1200:	81 83       	std	Z+1, r24	; 0x01
    1202:	1b c0       	rjmp	.+54     	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRD.Bit.B6 = Copy_Direction;
    1204:	e0 e3       	ldi	r30, 0x30	; 48
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	81 70       	andi	r24, 0x01	; 1
    120c:	81 70       	andi	r24, 0x01	; 1
    120e:	98 2f       	mov	r25, r24
    1210:	92 95       	swap	r25
    1212:	99 0f       	add	r25, r25
    1214:	99 0f       	add	r25, r25
    1216:	90 7c       	andi	r25, 0xC0	; 192
    1218:	81 81       	ldd	r24, Z+1	; 0x01
    121a:	8f 7b       	andi	r24, 0xBF	; 191
    121c:	89 2b       	or	r24, r25
    121e:	81 83       	std	Z+1, r24	; 0x01
    1220:	0c c0       	rjmp	.+24     	; 0x123a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRD.Bit.B7 = Copy_Direction;
    1222:	e0 e3       	ldi	r30, 0x30	; 48
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	81 70       	andi	r24, 0x01	; 1
    122a:	98 2f       	mov	r25, r24
    122c:	97 95       	ror	r25
    122e:	99 27       	eor	r25, r25
    1230:	97 95       	ror	r25
    1232:	81 81       	ldd	r24, Z+1	; 0x01
    1234:	8f 77       	andi	r24, 0x7F	; 127
    1236:	89 2b       	or	r24, r25
    1238:	81 83       	std	Z+1, r24	; 0x01
						break;
				default: break;
			}
			break;
	}
}
    123a:	2d 96       	adiw	r28, 0x0d	; 13
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <DIO_voidSetPinValue>:




void DIO_voidSetPinValue(PORT_t Copy_PortId,PIN_t Copy_PinId,VALUE_t Copy_Value)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	2d 97       	sbiw	r28, 0x0d	; 13
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	6a 83       	std	Y+2, r22	; 0x02
    1264:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_PortId)
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	3d 87       	std	Y+13, r19	; 0x0d
    126e:	2c 87       	std	Y+12, r18	; 0x0c
    1270:	8c 85       	ldd	r24, Y+12	; 0x0c
    1272:	9d 85       	ldd	r25, Y+13	; 0x0d
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	91 05       	cpc	r25, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <DIO_voidSetPinValue+0x30>
    127a:	b8 c0       	rjmp	.+368    	; 0x13ec <DIO_voidSetPinValue+0x1a0>
    127c:	2c 85       	ldd	r18, Y+12	; 0x0c
    127e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	2c f4       	brge	.+10     	; 0x1290 <DIO_voidSetPinValue+0x44>
    1286:	8c 85       	ldd	r24, Y+12	; 0x0c
    1288:	9d 85       	ldd	r25, Y+13	; 0x0d
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	71 f0       	breq	.+28     	; 0x12aa <DIO_voidSetPinValue+0x5e>
    128e:	90 c2       	rjmp	.+1312   	; 0x17b0 <DIO_voidSetPinValue+0x564>
    1290:	2c 85       	ldd	r18, Y+12	; 0x0c
    1292:	3d 85       	ldd	r19, Y+13	; 0x0d
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	09 f4       	brne	.+2      	; 0x129c <DIO_voidSetPinValue+0x50>
    129a:	49 c1       	rjmp	.+658    	; 0x152e <DIO_voidSetPinValue+0x2e2>
    129c:	8c 85       	ldd	r24, Y+12	; 0x0c
    129e:	9d 85       	ldd	r25, Y+13	; 0x0d
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	91 05       	cpc	r25, r1
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <DIO_voidSetPinValue+0x5c>
    12a6:	e4 c1       	rjmp	.+968    	; 0x1670 <DIO_voidSetPinValue+0x424>
    12a8:	83 c2       	rjmp	.+1286   	; 0x17b0 <DIO_voidSetPinValue+0x564>
	{
		case PORT_A:
			switch(Copy_PinId)
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3b 87       	std	Y+11, r19	; 0x0b
    12b2:	2a 87       	std	Y+10, r18	; 0x0a
    12b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <DIO_voidSetPinValue+0x74>
    12be:	51 c0       	rjmp	.+162    	; 0x1362 <DIO_voidSetPinValue+0x116>
    12c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    12c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    12c4:	24 30       	cpi	r18, 0x04	; 4
    12c6:	31 05       	cpc	r19, r1
    12c8:	7c f4       	brge	.+30     	; 0x12e8 <DIO_voidSetPinValue+0x9c>
    12ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    12cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	71 f1       	breq	.+92     	; 0x1330 <DIO_voidSetPinValue+0xe4>
    12d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    12d6:	3b 85       	ldd	r19, Y+11	; 0x0b
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	ac f5       	brge	.+106    	; 0x1348 <DIO_voidSetPinValue+0xfc>
    12de:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	d1 f0       	breq	.+52     	; 0x131a <DIO_voidSetPinValue+0xce>
    12e6:	64 c2       	rjmp	.+1224   	; 0x17b0 <DIO_voidSetPinValue+0x564>
    12e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    12ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    12ec:	25 30       	cpi	r18, 0x05	; 5
    12ee:	31 05       	cpc	r19, r1
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <DIO_voidSetPinValue+0xa8>
    12f2:	52 c0       	rjmp	.+164    	; 0x1398 <DIO_voidSetPinValue+0x14c>
    12f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f8:	85 30       	cpi	r24, 0x05	; 5
    12fa:	91 05       	cpc	r25, r1
    12fc:	0c f4       	brge	.+2      	; 0x1300 <DIO_voidSetPinValue+0xb4>
    12fe:	3f c0       	rjmp	.+126    	; 0x137e <DIO_voidSetPinValue+0x132>
    1300:	2a 85       	ldd	r18, Y+10	; 0x0a
    1302:	3b 85       	ldd	r19, Y+11	; 0x0b
    1304:	26 30       	cpi	r18, 0x06	; 6
    1306:	31 05       	cpc	r19, r1
    1308:	09 f4       	brne	.+2      	; 0x130c <DIO_voidSetPinValue+0xc0>
    130a:	54 c0       	rjmp	.+168    	; 0x13b4 <DIO_voidSetPinValue+0x168>
    130c:	8a 85       	ldd	r24, Y+10	; 0x0a
    130e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1310:	87 30       	cpi	r24, 0x07	; 7
    1312:	91 05       	cpc	r25, r1
    1314:	09 f4       	brne	.+2      	; 0x1318 <DIO_voidSetPinValue+0xcc>
    1316:	5d c0       	rjmp	.+186    	; 0x13d2 <DIO_voidSetPinValue+0x186>
    1318:	4b c2       	rjmp	.+1174   	; 0x17b0 <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTA.Bit.B0 = Copy_Value;
    131a:	e0 e3       	ldi	r30, 0x30	; 48
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	81 70       	andi	r24, 0x01	; 1
    1322:	98 2f       	mov	r25, r24
    1324:	91 70       	andi	r25, 0x01	; 1
    1326:	83 85       	ldd	r24, Z+11	; 0x0b
    1328:	8e 7f       	andi	r24, 0xFE	; 254
    132a:	89 2b       	or	r24, r25
    132c:	83 87       	std	Z+11, r24	; 0x0b
    132e:	40 c2       	rjmp	.+1152   	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTA.Bit.B1 = Copy_Value;
    1330:	e0 e3       	ldi	r30, 0x30	; 48
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	81 70       	andi	r24, 0x01	; 1
    1338:	81 70       	andi	r24, 0x01	; 1
    133a:	98 2f       	mov	r25, r24
    133c:	99 0f       	add	r25, r25
    133e:	83 85       	ldd	r24, Z+11	; 0x0b
    1340:	8d 7f       	andi	r24, 0xFD	; 253
    1342:	89 2b       	or	r24, r25
    1344:	83 87       	std	Z+11, r24	; 0x0b
    1346:	34 c2       	rjmp	.+1128   	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTA.Bit.B2 = Copy_Value;
    1348:	e0 e3       	ldi	r30, 0x30	; 48
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	81 70       	andi	r24, 0x01	; 1
    1350:	81 70       	andi	r24, 0x01	; 1
    1352:	98 2f       	mov	r25, r24
    1354:	99 0f       	add	r25, r25
    1356:	99 0f       	add	r25, r25
    1358:	83 85       	ldd	r24, Z+11	; 0x0b
    135a:	8b 7f       	andi	r24, 0xFB	; 251
    135c:	89 2b       	or	r24, r25
    135e:	83 87       	std	Z+11, r24	; 0x0b
    1360:	27 c2       	rjmp	.+1102   	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTA.Bit.B3 = Copy_Value;
    1362:	e0 e3       	ldi	r30, 0x30	; 48
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	81 70       	andi	r24, 0x01	; 1
    136c:	98 2f       	mov	r25, r24
    136e:	99 0f       	add	r25, r25
    1370:	99 0f       	add	r25, r25
    1372:	99 0f       	add	r25, r25
    1374:	83 85       	ldd	r24, Z+11	; 0x0b
    1376:	87 7f       	andi	r24, 0xF7	; 247
    1378:	89 2b       	or	r24, r25
    137a:	83 87       	std	Z+11, r24	; 0x0b
    137c:	19 c2       	rjmp	.+1074   	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTA.Bit.B4 = Copy_Value;
    137e:	e0 e3       	ldi	r30, 0x30	; 48
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	81 70       	andi	r24, 0x01	; 1
    1386:	81 70       	andi	r24, 0x01	; 1
    1388:	98 2f       	mov	r25, r24
    138a:	92 95       	swap	r25
    138c:	90 7f       	andi	r25, 0xF0	; 240
    138e:	83 85       	ldd	r24, Z+11	; 0x0b
    1390:	8f 7e       	andi	r24, 0xEF	; 239
    1392:	89 2b       	or	r24, r25
    1394:	83 87       	std	Z+11, r24	; 0x0b
    1396:	0c c2       	rjmp	.+1048   	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTA.Bit.B5 = Copy_Value;
    1398:	e0 e3       	ldi	r30, 0x30	; 48
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 70       	andi	r24, 0x01	; 1
    13a0:	81 70       	andi	r24, 0x01	; 1
    13a2:	98 2f       	mov	r25, r24
    13a4:	92 95       	swap	r25
    13a6:	99 0f       	add	r25, r25
    13a8:	90 7e       	andi	r25, 0xE0	; 224
    13aa:	83 85       	ldd	r24, Z+11	; 0x0b
    13ac:	8f 7d       	andi	r24, 0xDF	; 223
    13ae:	89 2b       	or	r24, r25
    13b0:	83 87       	std	Z+11, r24	; 0x0b
    13b2:	fe c1       	rjmp	.+1020   	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTA.Bit.B6 = Copy_Value;
    13b4:	e0 e3       	ldi	r30, 0x30	; 48
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	81 70       	andi	r24, 0x01	; 1
    13bc:	81 70       	andi	r24, 0x01	; 1
    13be:	98 2f       	mov	r25, r24
    13c0:	92 95       	swap	r25
    13c2:	99 0f       	add	r25, r25
    13c4:	99 0f       	add	r25, r25
    13c6:	90 7c       	andi	r25, 0xC0	; 192
    13c8:	83 85       	ldd	r24, Z+11	; 0x0b
    13ca:	8f 7b       	andi	r24, 0xBF	; 191
    13cc:	89 2b       	or	r24, r25
    13ce:	83 87       	std	Z+11, r24	; 0x0b
    13d0:	ef c1       	rjmp	.+990    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTA.Bit.B7 = Copy_Value;
    13d2:	e0 e3       	ldi	r30, 0x30	; 48
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	81 70       	andi	r24, 0x01	; 1
    13da:	98 2f       	mov	r25, r24
    13dc:	97 95       	ror	r25
    13de:	99 27       	eor	r25, r25
    13e0:	97 95       	ror	r25
    13e2:	83 85       	ldd	r24, Z+11	; 0x0b
    13e4:	8f 77       	andi	r24, 0x7F	; 127
    13e6:	89 2b       	or	r24, r25
    13e8:	83 87       	std	Z+11, r24	; 0x0b
    13ea:	e2 c1       	rjmp	.+964    	; 0x17b0 <DIO_voidSetPinValue+0x564>
				default: break;
			}
			break;

		case PORT_B:
			switch(Copy_PinId)
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	39 87       	std	Y+9, r19	; 0x09
    13f4:	28 87       	std	Y+8, r18	; 0x08
    13f6:	88 85       	ldd	r24, Y+8	; 0x08
    13f8:	99 85       	ldd	r25, Y+9	; 0x09
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	91 05       	cpc	r25, r1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <DIO_voidSetPinValue+0x1b6>
    1400:	51 c0       	rjmp	.+162    	; 0x14a4 <DIO_voidSetPinValue+0x258>
    1402:	28 85       	ldd	r18, Y+8	; 0x08
    1404:	39 85       	ldd	r19, Y+9	; 0x09
    1406:	24 30       	cpi	r18, 0x04	; 4
    1408:	31 05       	cpc	r19, r1
    140a:	7c f4       	brge	.+30     	; 0x142a <DIO_voidSetPinValue+0x1de>
    140c:	88 85       	ldd	r24, Y+8	; 0x08
    140e:	99 85       	ldd	r25, Y+9	; 0x09
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	91 05       	cpc	r25, r1
    1414:	71 f1       	breq	.+92     	; 0x1472 <DIO_voidSetPinValue+0x226>
    1416:	28 85       	ldd	r18, Y+8	; 0x08
    1418:	39 85       	ldd	r19, Y+9	; 0x09
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	ac f5       	brge	.+106    	; 0x148a <DIO_voidSetPinValue+0x23e>
    1420:	88 85       	ldd	r24, Y+8	; 0x08
    1422:	99 85       	ldd	r25, Y+9	; 0x09
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	d1 f0       	breq	.+52     	; 0x145c <DIO_voidSetPinValue+0x210>
    1428:	c3 c1       	rjmp	.+902    	; 0x17b0 <DIO_voidSetPinValue+0x564>
    142a:	28 85       	ldd	r18, Y+8	; 0x08
    142c:	39 85       	ldd	r19, Y+9	; 0x09
    142e:	25 30       	cpi	r18, 0x05	; 5
    1430:	31 05       	cpc	r19, r1
    1432:	09 f4       	brne	.+2      	; 0x1436 <DIO_voidSetPinValue+0x1ea>
    1434:	52 c0       	rjmp	.+164    	; 0x14da <DIO_voidSetPinValue+0x28e>
    1436:	88 85       	ldd	r24, Y+8	; 0x08
    1438:	99 85       	ldd	r25, Y+9	; 0x09
    143a:	85 30       	cpi	r24, 0x05	; 5
    143c:	91 05       	cpc	r25, r1
    143e:	0c f4       	brge	.+2      	; 0x1442 <DIO_voidSetPinValue+0x1f6>
    1440:	3f c0       	rjmp	.+126    	; 0x14c0 <DIO_voidSetPinValue+0x274>
    1442:	28 85       	ldd	r18, Y+8	; 0x08
    1444:	39 85       	ldd	r19, Y+9	; 0x09
    1446:	26 30       	cpi	r18, 0x06	; 6
    1448:	31 05       	cpc	r19, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <DIO_voidSetPinValue+0x202>
    144c:	54 c0       	rjmp	.+168    	; 0x14f6 <DIO_voidSetPinValue+0x2aa>
    144e:	88 85       	ldd	r24, Y+8	; 0x08
    1450:	99 85       	ldd	r25, Y+9	; 0x09
    1452:	87 30       	cpi	r24, 0x07	; 7
    1454:	91 05       	cpc	r25, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <DIO_voidSetPinValue+0x20e>
    1458:	5d c0       	rjmp	.+186    	; 0x1514 <DIO_voidSetPinValue+0x2c8>
    145a:	aa c1       	rjmp	.+852    	; 0x17b0 <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTB.Bit.B0 = Copy_Value;
    145c:	e0 e3       	ldi	r30, 0x30	; 48
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	81 70       	andi	r24, 0x01	; 1
    1464:	98 2f       	mov	r25, r24
    1466:	91 70       	andi	r25, 0x01	; 1
    1468:	80 85       	ldd	r24, Z+8	; 0x08
    146a:	8e 7f       	andi	r24, 0xFE	; 254
    146c:	89 2b       	or	r24, r25
    146e:	80 87       	std	Z+8, r24	; 0x08
    1470:	9f c1       	rjmp	.+830    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTB.Bit.B1 = Copy_Value;
    1472:	e0 e3       	ldi	r30, 0x30	; 48
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	81 70       	andi	r24, 0x01	; 1
    147a:	81 70       	andi	r24, 0x01	; 1
    147c:	98 2f       	mov	r25, r24
    147e:	99 0f       	add	r25, r25
    1480:	80 85       	ldd	r24, Z+8	; 0x08
    1482:	8d 7f       	andi	r24, 0xFD	; 253
    1484:	89 2b       	or	r24, r25
    1486:	80 87       	std	Z+8, r24	; 0x08
    1488:	93 c1       	rjmp	.+806    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTB.Bit.B2 = Copy_Value;
    148a:	e0 e3       	ldi	r30, 0x30	; 48
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	81 70       	andi	r24, 0x01	; 1
    1492:	81 70       	andi	r24, 0x01	; 1
    1494:	98 2f       	mov	r25, r24
    1496:	99 0f       	add	r25, r25
    1498:	99 0f       	add	r25, r25
    149a:	80 85       	ldd	r24, Z+8	; 0x08
    149c:	8b 7f       	andi	r24, 0xFB	; 251
    149e:	89 2b       	or	r24, r25
    14a0:	80 87       	std	Z+8, r24	; 0x08
    14a2:	86 c1       	rjmp	.+780    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTB.Bit.B3 = Copy_Value;
    14a4:	e0 e3       	ldi	r30, 0x30	; 48
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	81 70       	andi	r24, 0x01	; 1
    14ac:	81 70       	andi	r24, 0x01	; 1
    14ae:	98 2f       	mov	r25, r24
    14b0:	99 0f       	add	r25, r25
    14b2:	99 0f       	add	r25, r25
    14b4:	99 0f       	add	r25, r25
    14b6:	80 85       	ldd	r24, Z+8	; 0x08
    14b8:	87 7f       	andi	r24, 0xF7	; 247
    14ba:	89 2b       	or	r24, r25
    14bc:	80 87       	std	Z+8, r24	; 0x08
    14be:	78 c1       	rjmp	.+752    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTB.Bit.B4 = Copy_Value;
    14c0:	e0 e3       	ldi	r30, 0x30	; 48
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	81 70       	andi	r24, 0x01	; 1
    14c8:	81 70       	andi	r24, 0x01	; 1
    14ca:	98 2f       	mov	r25, r24
    14cc:	92 95       	swap	r25
    14ce:	90 7f       	andi	r25, 0xF0	; 240
    14d0:	80 85       	ldd	r24, Z+8	; 0x08
    14d2:	8f 7e       	andi	r24, 0xEF	; 239
    14d4:	89 2b       	or	r24, r25
    14d6:	80 87       	std	Z+8, r24	; 0x08
    14d8:	6b c1       	rjmp	.+726    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTB.Bit.B5 = Copy_Value;
    14da:	e0 e3       	ldi	r30, 0x30	; 48
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	81 70       	andi	r24, 0x01	; 1
    14e2:	81 70       	andi	r24, 0x01	; 1
    14e4:	98 2f       	mov	r25, r24
    14e6:	92 95       	swap	r25
    14e8:	99 0f       	add	r25, r25
    14ea:	90 7e       	andi	r25, 0xE0	; 224
    14ec:	80 85       	ldd	r24, Z+8	; 0x08
    14ee:	8f 7d       	andi	r24, 0xDF	; 223
    14f0:	89 2b       	or	r24, r25
    14f2:	80 87       	std	Z+8, r24	; 0x08
    14f4:	5d c1       	rjmp	.+698    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTB.Bit.B6 = Copy_Value;
    14f6:	e0 e3       	ldi	r30, 0x30	; 48
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	81 70       	andi	r24, 0x01	; 1
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	98 2f       	mov	r25, r24
    1502:	92 95       	swap	r25
    1504:	99 0f       	add	r25, r25
    1506:	99 0f       	add	r25, r25
    1508:	90 7c       	andi	r25, 0xC0	; 192
    150a:	80 85       	ldd	r24, Z+8	; 0x08
    150c:	8f 7b       	andi	r24, 0xBF	; 191
    150e:	89 2b       	or	r24, r25
    1510:	80 87       	std	Z+8, r24	; 0x08
    1512:	4e c1       	rjmp	.+668    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTB.Bit.B7 = Copy_Value;
    1514:	e0 e3       	ldi	r30, 0x30	; 48
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	81 70       	andi	r24, 0x01	; 1
    151c:	98 2f       	mov	r25, r24
    151e:	97 95       	ror	r25
    1520:	99 27       	eor	r25, r25
    1522:	97 95       	ror	r25
    1524:	80 85       	ldd	r24, Z+8	; 0x08
    1526:	8f 77       	andi	r24, 0x7F	; 127
    1528:	89 2b       	or	r24, r25
    152a:	80 87       	std	Z+8, r24	; 0x08
    152c:	41 c1       	rjmp	.+642    	; 0x17b0 <DIO_voidSetPinValue+0x564>
			}
			break;


		case PORT_C:
			switch(Copy_PinId)
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3f 83       	std	Y+7, r19	; 0x07
    1536:	2e 83       	std	Y+6, r18	; 0x06
    1538:	8e 81       	ldd	r24, Y+6	; 0x06
    153a:	9f 81       	ldd	r25, Y+7	; 0x07
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <DIO_voidSetPinValue+0x2f8>
    1542:	51 c0       	rjmp	.+162    	; 0x15e6 <DIO_voidSetPinValue+0x39a>
    1544:	2e 81       	ldd	r18, Y+6	; 0x06
    1546:	3f 81       	ldd	r19, Y+7	; 0x07
    1548:	24 30       	cpi	r18, 0x04	; 4
    154a:	31 05       	cpc	r19, r1
    154c:	7c f4       	brge	.+30     	; 0x156c <DIO_voidSetPinValue+0x320>
    154e:	8e 81       	ldd	r24, Y+6	; 0x06
    1550:	9f 81       	ldd	r25, Y+7	; 0x07
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	91 05       	cpc	r25, r1
    1556:	71 f1       	breq	.+92     	; 0x15b4 <DIO_voidSetPinValue+0x368>
    1558:	2e 81       	ldd	r18, Y+6	; 0x06
    155a:	3f 81       	ldd	r19, Y+7	; 0x07
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	ac f5       	brge	.+106    	; 0x15cc <DIO_voidSetPinValue+0x380>
    1562:	8e 81       	ldd	r24, Y+6	; 0x06
    1564:	9f 81       	ldd	r25, Y+7	; 0x07
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	d1 f0       	breq	.+52     	; 0x159e <DIO_voidSetPinValue+0x352>
    156a:	22 c1       	rjmp	.+580    	; 0x17b0 <DIO_voidSetPinValue+0x564>
    156c:	2e 81       	ldd	r18, Y+6	; 0x06
    156e:	3f 81       	ldd	r19, Y+7	; 0x07
    1570:	25 30       	cpi	r18, 0x05	; 5
    1572:	31 05       	cpc	r19, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <DIO_voidSetPinValue+0x32c>
    1576:	52 c0       	rjmp	.+164    	; 0x161c <DIO_voidSetPinValue+0x3d0>
    1578:	8e 81       	ldd	r24, Y+6	; 0x06
    157a:	9f 81       	ldd	r25, Y+7	; 0x07
    157c:	85 30       	cpi	r24, 0x05	; 5
    157e:	91 05       	cpc	r25, r1
    1580:	0c f4       	brge	.+2      	; 0x1584 <DIO_voidSetPinValue+0x338>
    1582:	3f c0       	rjmp	.+126    	; 0x1602 <DIO_voidSetPinValue+0x3b6>
    1584:	2e 81       	ldd	r18, Y+6	; 0x06
    1586:	3f 81       	ldd	r19, Y+7	; 0x07
    1588:	26 30       	cpi	r18, 0x06	; 6
    158a:	31 05       	cpc	r19, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <DIO_voidSetPinValue+0x344>
    158e:	54 c0       	rjmp	.+168    	; 0x1638 <DIO_voidSetPinValue+0x3ec>
    1590:	8e 81       	ldd	r24, Y+6	; 0x06
    1592:	9f 81       	ldd	r25, Y+7	; 0x07
    1594:	87 30       	cpi	r24, 0x07	; 7
    1596:	91 05       	cpc	r25, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <DIO_voidSetPinValue+0x350>
    159a:	5d c0       	rjmp	.+186    	; 0x1656 <DIO_voidSetPinValue+0x40a>
    159c:	09 c1       	rjmp	.+530    	; 0x17b0 <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTC.Bit.B0 = Copy_Value;
    159e:	e0 e3       	ldi	r30, 0x30	; 48
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	81 70       	andi	r24, 0x01	; 1
    15a6:	98 2f       	mov	r25, r24
    15a8:	91 70       	andi	r25, 0x01	; 1
    15aa:	85 81       	ldd	r24, Z+5	; 0x05
    15ac:	8e 7f       	andi	r24, 0xFE	; 254
    15ae:	89 2b       	or	r24, r25
    15b0:	85 83       	std	Z+5, r24	; 0x05
    15b2:	fe c0       	rjmp	.+508    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTC.Bit.B1 = Copy_Value;
    15b4:	e0 e3       	ldi	r30, 0x30	; 48
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	81 70       	andi	r24, 0x01	; 1
    15bc:	81 70       	andi	r24, 0x01	; 1
    15be:	98 2f       	mov	r25, r24
    15c0:	99 0f       	add	r25, r25
    15c2:	85 81       	ldd	r24, Z+5	; 0x05
    15c4:	8d 7f       	andi	r24, 0xFD	; 253
    15c6:	89 2b       	or	r24, r25
    15c8:	85 83       	std	Z+5, r24	; 0x05
    15ca:	f2 c0       	rjmp	.+484    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTC.Bit.B2 = Copy_Value;
    15cc:	e0 e3       	ldi	r30, 0x30	; 48
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	81 70       	andi	r24, 0x01	; 1
    15d4:	81 70       	andi	r24, 0x01	; 1
    15d6:	98 2f       	mov	r25, r24
    15d8:	99 0f       	add	r25, r25
    15da:	99 0f       	add	r25, r25
    15dc:	85 81       	ldd	r24, Z+5	; 0x05
    15de:	8b 7f       	andi	r24, 0xFB	; 251
    15e0:	89 2b       	or	r24, r25
    15e2:	85 83       	std	Z+5, r24	; 0x05
    15e4:	e5 c0       	rjmp	.+458    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTC.Bit.B3 = Copy_Value;
    15e6:	e0 e3       	ldi	r30, 0x30	; 48
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	81 70       	andi	r24, 0x01	; 1
    15ee:	81 70       	andi	r24, 0x01	; 1
    15f0:	98 2f       	mov	r25, r24
    15f2:	99 0f       	add	r25, r25
    15f4:	99 0f       	add	r25, r25
    15f6:	99 0f       	add	r25, r25
    15f8:	85 81       	ldd	r24, Z+5	; 0x05
    15fa:	87 7f       	andi	r24, 0xF7	; 247
    15fc:	89 2b       	or	r24, r25
    15fe:	85 83       	std	Z+5, r24	; 0x05
    1600:	d7 c0       	rjmp	.+430    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTC.Bit.B4 = Copy_Value;
    1602:	e0 e3       	ldi	r30, 0x30	; 48
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	81 70       	andi	r24, 0x01	; 1
    160a:	81 70       	andi	r24, 0x01	; 1
    160c:	98 2f       	mov	r25, r24
    160e:	92 95       	swap	r25
    1610:	90 7f       	andi	r25, 0xF0	; 240
    1612:	85 81       	ldd	r24, Z+5	; 0x05
    1614:	8f 7e       	andi	r24, 0xEF	; 239
    1616:	89 2b       	or	r24, r25
    1618:	85 83       	std	Z+5, r24	; 0x05
    161a:	ca c0       	rjmp	.+404    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTC.Bit.B5 = Copy_Value;
    161c:	e0 e3       	ldi	r30, 0x30	; 48
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	81 70       	andi	r24, 0x01	; 1
    1624:	81 70       	andi	r24, 0x01	; 1
    1626:	98 2f       	mov	r25, r24
    1628:	92 95       	swap	r25
    162a:	99 0f       	add	r25, r25
    162c:	90 7e       	andi	r25, 0xE0	; 224
    162e:	85 81       	ldd	r24, Z+5	; 0x05
    1630:	8f 7d       	andi	r24, 0xDF	; 223
    1632:	89 2b       	or	r24, r25
    1634:	85 83       	std	Z+5, r24	; 0x05
    1636:	bc c0       	rjmp	.+376    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTC.Bit.B6 = Copy_Value;
    1638:	e0 e3       	ldi	r30, 0x30	; 48
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	81 70       	andi	r24, 0x01	; 1
    1640:	81 70       	andi	r24, 0x01	; 1
    1642:	98 2f       	mov	r25, r24
    1644:	92 95       	swap	r25
    1646:	99 0f       	add	r25, r25
    1648:	99 0f       	add	r25, r25
    164a:	90 7c       	andi	r25, 0xC0	; 192
    164c:	85 81       	ldd	r24, Z+5	; 0x05
    164e:	8f 7b       	andi	r24, 0xBF	; 191
    1650:	89 2b       	or	r24, r25
    1652:	85 83       	std	Z+5, r24	; 0x05
    1654:	ad c0       	rjmp	.+346    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTC.Bit.B7 = Copy_Value;
    1656:	e0 e3       	ldi	r30, 0x30	; 48
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	81 70       	andi	r24, 0x01	; 1
    165e:	98 2f       	mov	r25, r24
    1660:	97 95       	ror	r25
    1662:	99 27       	eor	r25, r25
    1664:	97 95       	ror	r25
    1666:	85 81       	ldd	r24, Z+5	; 0x05
    1668:	8f 77       	andi	r24, 0x7F	; 127
    166a:	89 2b       	or	r24, r25
    166c:	85 83       	std	Z+5, r24	; 0x05
    166e:	a0 c0       	rjmp	.+320    	; 0x17b0 <DIO_voidSetPinValue+0x564>
				default: break;
			}
			break;

		case PORT_D:
			switch(Copy_PinId)
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	3d 83       	std	Y+5, r19	; 0x05
    1678:	2c 83       	std	Y+4, r18	; 0x04
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	9d 81       	ldd	r25, Y+5	; 0x05
    167e:	83 30       	cpi	r24, 0x03	; 3
    1680:	91 05       	cpc	r25, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <DIO_voidSetPinValue+0x43a>
    1684:	51 c0       	rjmp	.+162    	; 0x1728 <DIO_voidSetPinValue+0x4dc>
    1686:	2c 81       	ldd	r18, Y+4	; 0x04
    1688:	3d 81       	ldd	r19, Y+5	; 0x05
    168a:	24 30       	cpi	r18, 0x04	; 4
    168c:	31 05       	cpc	r19, r1
    168e:	7c f4       	brge	.+30     	; 0x16ae <DIO_voidSetPinValue+0x462>
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	9d 81       	ldd	r25, Y+5	; 0x05
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	91 05       	cpc	r25, r1
    1698:	71 f1       	breq	.+92     	; 0x16f6 <DIO_voidSetPinValue+0x4aa>
    169a:	2c 81       	ldd	r18, Y+4	; 0x04
    169c:	3d 81       	ldd	r19, Y+5	; 0x05
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	ac f5       	brge	.+106    	; 0x170e <DIO_voidSetPinValue+0x4c2>
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	9d 81       	ldd	r25, Y+5	; 0x05
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	d1 f0       	breq	.+52     	; 0x16e0 <DIO_voidSetPinValue+0x494>
    16ac:	81 c0       	rjmp	.+258    	; 0x17b0 <DIO_voidSetPinValue+0x564>
    16ae:	2c 81       	ldd	r18, Y+4	; 0x04
    16b0:	3d 81       	ldd	r19, Y+5	; 0x05
    16b2:	25 30       	cpi	r18, 0x05	; 5
    16b4:	31 05       	cpc	r19, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <DIO_voidSetPinValue+0x46e>
    16b8:	52 c0       	rjmp	.+164    	; 0x175e <DIO_voidSetPinValue+0x512>
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	9d 81       	ldd	r25, Y+5	; 0x05
    16be:	85 30       	cpi	r24, 0x05	; 5
    16c0:	91 05       	cpc	r25, r1
    16c2:	0c f4       	brge	.+2      	; 0x16c6 <DIO_voidSetPinValue+0x47a>
    16c4:	3f c0       	rjmp	.+126    	; 0x1744 <DIO_voidSetPinValue+0x4f8>
    16c6:	2c 81       	ldd	r18, Y+4	; 0x04
    16c8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ca:	26 30       	cpi	r18, 0x06	; 6
    16cc:	31 05       	cpc	r19, r1
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <DIO_voidSetPinValue+0x486>
    16d0:	54 c0       	rjmp	.+168    	; 0x177a <DIO_voidSetPinValue+0x52e>
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	9d 81       	ldd	r25, Y+5	; 0x05
    16d6:	87 30       	cpi	r24, 0x07	; 7
    16d8:	91 05       	cpc	r25, r1
    16da:	09 f4       	brne	.+2      	; 0x16de <DIO_voidSetPinValue+0x492>
    16dc:	5d c0       	rjmp	.+186    	; 0x1798 <DIO_voidSetPinValue+0x54c>
    16de:	68 c0       	rjmp	.+208    	; 0x17b0 <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTD.Bit.B0 = Copy_Value;
    16e0:	e0 e3       	ldi	r30, 0x30	; 48
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	81 70       	andi	r24, 0x01	; 1
    16e8:	98 2f       	mov	r25, r24
    16ea:	91 70       	andi	r25, 0x01	; 1
    16ec:	82 81       	ldd	r24, Z+2	; 0x02
    16ee:	8e 7f       	andi	r24, 0xFE	; 254
    16f0:	89 2b       	or	r24, r25
    16f2:	82 83       	std	Z+2, r24	; 0x02
    16f4:	5d c0       	rjmp	.+186    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTD.Bit.B1 = Copy_Value;
    16f6:	e0 e3       	ldi	r30, 0x30	; 48
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	81 70       	andi	r24, 0x01	; 1
    16fe:	81 70       	andi	r24, 0x01	; 1
    1700:	98 2f       	mov	r25, r24
    1702:	99 0f       	add	r25, r25
    1704:	82 81       	ldd	r24, Z+2	; 0x02
    1706:	8d 7f       	andi	r24, 0xFD	; 253
    1708:	89 2b       	or	r24, r25
    170a:	82 83       	std	Z+2, r24	; 0x02
    170c:	51 c0       	rjmp	.+162    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTD.Bit.B2 = Copy_Value;
    170e:	e0 e3       	ldi	r30, 0x30	; 48
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	81 70       	andi	r24, 0x01	; 1
    1716:	81 70       	andi	r24, 0x01	; 1
    1718:	98 2f       	mov	r25, r24
    171a:	99 0f       	add	r25, r25
    171c:	99 0f       	add	r25, r25
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	8b 7f       	andi	r24, 0xFB	; 251
    1722:	89 2b       	or	r24, r25
    1724:	82 83       	std	Z+2, r24	; 0x02
    1726:	44 c0       	rjmp	.+136    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTD.Bit.B3 = Copy_Value;
    1728:	e0 e3       	ldi	r30, 0x30	; 48
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	81 70       	andi	r24, 0x01	; 1
    1730:	81 70       	andi	r24, 0x01	; 1
    1732:	98 2f       	mov	r25, r24
    1734:	99 0f       	add	r25, r25
    1736:	99 0f       	add	r25, r25
    1738:	99 0f       	add	r25, r25
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	87 7f       	andi	r24, 0xF7	; 247
    173e:	89 2b       	or	r24, r25
    1740:	82 83       	std	Z+2, r24	; 0x02
    1742:	36 c0       	rjmp	.+108    	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTD.Bit.B4 = Copy_Value;
    1744:	e0 e3       	ldi	r30, 0x30	; 48
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	81 70       	andi	r24, 0x01	; 1
    174c:	81 70       	andi	r24, 0x01	; 1
    174e:	98 2f       	mov	r25, r24
    1750:	92 95       	swap	r25
    1752:	90 7f       	andi	r25, 0xF0	; 240
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	8f 7e       	andi	r24, 0xEF	; 239
    1758:	89 2b       	or	r24, r25
    175a:	82 83       	std	Z+2, r24	; 0x02
    175c:	29 c0       	rjmp	.+82     	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTD.Bit.B5 = Copy_Value;
    175e:	e0 e3       	ldi	r30, 0x30	; 48
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	81 70       	andi	r24, 0x01	; 1
    1766:	81 70       	andi	r24, 0x01	; 1
    1768:	98 2f       	mov	r25, r24
    176a:	92 95       	swap	r25
    176c:	99 0f       	add	r25, r25
    176e:	90 7e       	andi	r25, 0xE0	; 224
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	8f 7d       	andi	r24, 0xDF	; 223
    1774:	89 2b       	or	r24, r25
    1776:	82 83       	std	Z+2, r24	; 0x02
    1778:	1b c0       	rjmp	.+54     	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTD.Bit.B6 = Copy_Value;
    177a:	e0 e3       	ldi	r30, 0x30	; 48
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	81 70       	andi	r24, 0x01	; 1
    1782:	81 70       	andi	r24, 0x01	; 1
    1784:	98 2f       	mov	r25, r24
    1786:	92 95       	swap	r25
    1788:	99 0f       	add	r25, r25
    178a:	99 0f       	add	r25, r25
    178c:	90 7c       	andi	r25, 0xC0	; 192
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	8f 7b       	andi	r24, 0xBF	; 191
    1792:	89 2b       	or	r24, r25
    1794:	82 83       	std	Z+2, r24	; 0x02
    1796:	0c c0       	rjmp	.+24     	; 0x17b0 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTD.Bit.B7 = Copy_Value;
    1798:	e0 e3       	ldi	r30, 0x30	; 48
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	81 70       	andi	r24, 0x01	; 1
    17a0:	98 2f       	mov	r25, r24
    17a2:	97 95       	ror	r25
    17a4:	99 27       	eor	r25, r25
    17a6:	97 95       	ror	r25
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	8f 77       	andi	r24, 0x7F	; 127
    17ac:	89 2b       	or	r24, r25
    17ae:	82 83       	std	Z+2, r24	; 0x02
						break;
				default: break;
			}
			break;
	}
}
    17b0:	2d 96       	adiw	r28, 0x0d	; 13
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <DIO_voidGetPinValue>:

u8 DIO_voidGetPinValue(PORT_t Copy_PortId,PIN_t Copy_PinId)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	2d 97       	sbiw	r28, 0x0d	; 13
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	8a 83       	std	Y+2, r24	; 0x02
    17d8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Pin;
	switch(Copy_PortId)
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	3d 87       	std	Y+13, r19	; 0x0d
    17e2:	2c 87       	std	Y+12, r18	; 0x0c
    17e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    17e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	91 05       	cpc	r25, r1
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <DIO_voidGetPinValue+0x2e>
    17ee:	8c c0       	rjmp	.+280    	; 0x1908 <DIO_voidGetPinValue+0x146>
    17f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    17f2:	3d 85       	ldd	r19, Y+13	; 0x0d
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	2c f4       	brge	.+10     	; 0x1804 <DIO_voidGetPinValue+0x42>
    17fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    17fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	71 f0       	breq	.+28     	; 0x181e <DIO_voidGetPinValue+0x5c>
    1802:	e0 c1       	rjmp	.+960    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
    1804:	2c 85       	ldd	r18, Y+12	; 0x0c
    1806:	3d 85       	ldd	r19, Y+13	; 0x0d
    1808:	22 30       	cpi	r18, 0x02	; 2
    180a:	31 05       	cpc	r19, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <DIO_voidGetPinValue+0x4e>
    180e:	f1 c0       	rjmp	.+482    	; 0x19f2 <DIO_voidGetPinValue+0x230>
    1810:	8c 85       	ldd	r24, Y+12	; 0x0c
    1812:	9d 85       	ldd	r25, Y+13	; 0x0d
    1814:	83 30       	cpi	r24, 0x03	; 3
    1816:	91 05       	cpc	r25, r1
    1818:	09 f4       	brne	.+2      	; 0x181c <DIO_voidGetPinValue+0x5a>
    181a:	60 c1       	rjmp	.+704    	; 0x1adc <DIO_voidGetPinValue+0x31a>
    181c:	d3 c1       	rjmp	.+934    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
	{
		case PORT_A:
			switch(Copy_PinId)
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	3b 87       	std	Y+11, r19	; 0x0b
    1826:	2a 87       	std	Y+10, r18	; 0x0a
    1828:	8a 85       	ldd	r24, Y+10	; 0x0a
    182a:	9b 85       	ldd	r25, Y+11	; 0x0b
    182c:	83 30       	cpi	r24, 0x03	; 3
    182e:	91 05       	cpc	r25, r1
    1830:	09 f4       	brne	.+2      	; 0x1834 <DIO_voidGetPinValue+0x72>
    1832:	3e c0       	rjmp	.+124    	; 0x18b0 <DIO_voidGetPinValue+0xee>
    1834:	2a 85       	ldd	r18, Y+10	; 0x0a
    1836:	3b 85       	ldd	r19, Y+11	; 0x0b
    1838:	24 30       	cpi	r18, 0x04	; 4
    183a:	31 05       	cpc	r19, r1
    183c:	7c f4       	brge	.+30     	; 0x185c <DIO_voidGetPinValue+0x9a>
    183e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1840:	9b 85       	ldd	r25, Y+11	; 0x0b
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	29 f1       	breq	.+74     	; 0x1892 <DIO_voidGetPinValue+0xd0>
    1848:	2a 85       	ldd	r18, Y+10	; 0x0a
    184a:	3b 85       	ldd	r19, Y+11	; 0x0b
    184c:	22 30       	cpi	r18, 0x02	; 2
    184e:	31 05       	cpc	r19, r1
    1850:	3c f5       	brge	.+78     	; 0x18a0 <DIO_voidGetPinValue+0xde>
    1852:	8a 85       	ldd	r24, Y+10	; 0x0a
    1854:	9b 85       	ldd	r25, Y+11	; 0x0b
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	b1 f0       	breq	.+44     	; 0x1886 <DIO_voidGetPinValue+0xc4>
    185a:	b4 c1       	rjmp	.+872    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
    185c:	2a 85       	ldd	r18, Y+10	; 0x0a
    185e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1860:	25 30       	cpi	r18, 0x05	; 5
    1862:	31 05       	cpc	r19, r1
    1864:	b1 f1       	breq	.+108    	; 0x18d2 <DIO_voidGetPinValue+0x110>
    1866:	8a 85       	ldd	r24, Y+10	; 0x0a
    1868:	9b 85       	ldd	r25, Y+11	; 0x0b
    186a:	85 30       	cpi	r24, 0x05	; 5
    186c:	91 05       	cpc	r25, r1
    186e:	4c f1       	brlt	.+82     	; 0x18c2 <DIO_voidGetPinValue+0x100>
    1870:	2a 85       	ldd	r18, Y+10	; 0x0a
    1872:	3b 85       	ldd	r19, Y+11	; 0x0b
    1874:	26 30       	cpi	r18, 0x06	; 6
    1876:	31 05       	cpc	r19, r1
    1878:	a9 f1       	breq	.+106    	; 0x18e4 <DIO_voidGetPinValue+0x122>
    187a:	8a 85       	ldd	r24, Y+10	; 0x0a
    187c:	9b 85       	ldd	r25, Y+11	; 0x0b
    187e:	87 30       	cpi	r24, 0x07	; 7
    1880:	91 05       	cpc	r25, r1
    1882:	d1 f1       	breq	.+116    	; 0x18f8 <DIO_voidGetPinValue+0x136>
    1884:	9f c1       	rjmp	.+830    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PINA.Bit.B0;
    1886:	e0 e3       	ldi	r30, 0x30	; 48
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	81 85       	ldd	r24, Z+9	; 0x09
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	99 c1       	rjmp	.+818    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PINA.Bit.B1;
    1892:	e0 e3       	ldi	r30, 0x30	; 48
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	81 85       	ldd	r24, Z+9	; 0x09
    1898:	86 95       	lsr	r24
    189a:	81 70       	andi	r24, 0x01	; 1
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	92 c1       	rjmp	.+804    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PINA.Bit.B2;
    18a0:	e0 e3       	ldi	r30, 0x30	; 48
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	81 85       	ldd	r24, Z+9	; 0x09
    18a6:	86 95       	lsr	r24
    18a8:	86 95       	lsr	r24
    18aa:	81 70       	andi	r24, 0x01	; 1
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	8a c1       	rjmp	.+788    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PINA.Bit.B3;
    18b0:	e0 e3       	ldi	r30, 0x30	; 48
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	81 85       	ldd	r24, Z+9	; 0x09
    18b6:	86 95       	lsr	r24
    18b8:	86 95       	lsr	r24
    18ba:	86 95       	lsr	r24
    18bc:	81 70       	andi	r24, 0x01	; 1
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	81 c1       	rjmp	.+770    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PINA.Bit.B4;
    18c2:	e0 e3       	ldi	r30, 0x30	; 48
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	81 85       	ldd	r24, Z+9	; 0x09
    18c8:	82 95       	swap	r24
    18ca:	8f 70       	andi	r24, 0x0F	; 15
    18cc:	81 70       	andi	r24, 0x01	; 1
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	79 c1       	rjmp	.+754    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PINA.Bit.B5;
    18d2:	e0 e3       	ldi	r30, 0x30	; 48
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	81 85       	ldd	r24, Z+9	; 0x09
    18d8:	82 95       	swap	r24
    18da:	86 95       	lsr	r24
    18dc:	87 70       	andi	r24, 0x07	; 7
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	70 c1       	rjmp	.+736    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PINA.Bit.B6;
    18e4:	e0 e3       	ldi	r30, 0x30	; 48
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	81 85       	ldd	r24, Z+9	; 0x09
    18ea:	82 95       	swap	r24
    18ec:	86 95       	lsr	r24
    18ee:	86 95       	lsr	r24
    18f0:	83 70       	andi	r24, 0x03	; 3
    18f2:	81 70       	andi	r24, 0x01	; 1
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	66 c1       	rjmp	.+716    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PINA.Bit.B7;
    18f8:	e0 e3       	ldi	r30, 0x30	; 48
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	81 85       	ldd	r24, Z+9	; 0x09
    18fe:	88 1f       	adc	r24, r24
    1900:	88 27       	eor	r24, r24
    1902:	88 1f       	adc	r24, r24
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	5e c1       	rjmp	.+700    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
				default: break;
			}
			break;

		case PORT_B:
			switch(Copy_PinId)
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	39 87       	std	Y+9, r19	; 0x09
    1910:	28 87       	std	Y+8, r18	; 0x08
    1912:	88 85       	ldd	r24, Y+8	; 0x08
    1914:	99 85       	ldd	r25, Y+9	; 0x09
    1916:	83 30       	cpi	r24, 0x03	; 3
    1918:	91 05       	cpc	r25, r1
    191a:	09 f4       	brne	.+2      	; 0x191e <DIO_voidGetPinValue+0x15c>
    191c:	3e c0       	rjmp	.+124    	; 0x199a <DIO_voidGetPinValue+0x1d8>
    191e:	28 85       	ldd	r18, Y+8	; 0x08
    1920:	39 85       	ldd	r19, Y+9	; 0x09
    1922:	24 30       	cpi	r18, 0x04	; 4
    1924:	31 05       	cpc	r19, r1
    1926:	7c f4       	brge	.+30     	; 0x1946 <DIO_voidGetPinValue+0x184>
    1928:	88 85       	ldd	r24, Y+8	; 0x08
    192a:	99 85       	ldd	r25, Y+9	; 0x09
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	91 05       	cpc	r25, r1
    1930:	29 f1       	breq	.+74     	; 0x197c <DIO_voidGetPinValue+0x1ba>
    1932:	28 85       	ldd	r18, Y+8	; 0x08
    1934:	39 85       	ldd	r19, Y+9	; 0x09
    1936:	22 30       	cpi	r18, 0x02	; 2
    1938:	31 05       	cpc	r19, r1
    193a:	3c f5       	brge	.+78     	; 0x198a <DIO_voidGetPinValue+0x1c8>
    193c:	88 85       	ldd	r24, Y+8	; 0x08
    193e:	99 85       	ldd	r25, Y+9	; 0x09
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	b1 f0       	breq	.+44     	; 0x1970 <DIO_voidGetPinValue+0x1ae>
    1944:	3f c1       	rjmp	.+638    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
    1946:	28 85       	ldd	r18, Y+8	; 0x08
    1948:	39 85       	ldd	r19, Y+9	; 0x09
    194a:	25 30       	cpi	r18, 0x05	; 5
    194c:	31 05       	cpc	r19, r1
    194e:	b1 f1       	breq	.+108    	; 0x19bc <DIO_voidGetPinValue+0x1fa>
    1950:	88 85       	ldd	r24, Y+8	; 0x08
    1952:	99 85       	ldd	r25, Y+9	; 0x09
    1954:	85 30       	cpi	r24, 0x05	; 5
    1956:	91 05       	cpc	r25, r1
    1958:	4c f1       	brlt	.+82     	; 0x19ac <DIO_voidGetPinValue+0x1ea>
    195a:	28 85       	ldd	r18, Y+8	; 0x08
    195c:	39 85       	ldd	r19, Y+9	; 0x09
    195e:	26 30       	cpi	r18, 0x06	; 6
    1960:	31 05       	cpc	r19, r1
    1962:	a9 f1       	breq	.+106    	; 0x19ce <DIO_voidGetPinValue+0x20c>
    1964:	88 85       	ldd	r24, Y+8	; 0x08
    1966:	99 85       	ldd	r25, Y+9	; 0x09
    1968:	87 30       	cpi	r24, 0x07	; 7
    196a:	91 05       	cpc	r25, r1
    196c:	d1 f1       	breq	.+116    	; 0x19e2 <DIO_voidGetPinValue+0x220>
    196e:	2a c1       	rjmp	.+596    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PINB.Bit.B0;
    1970:	e0 e3       	ldi	r30, 0x30	; 48
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	86 81       	ldd	r24, Z+6	; 0x06
    1976:	81 70       	andi	r24, 0x01	; 1
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	24 c1       	rjmp	.+584    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PINB.Bit.B1;
    197c:	e0 e3       	ldi	r30, 0x30	; 48
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	86 81       	ldd	r24, Z+6	; 0x06
    1982:	86 95       	lsr	r24
    1984:	81 70       	andi	r24, 0x01	; 1
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	1d c1       	rjmp	.+570    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PINB.Bit.B2;
    198a:	e0 e3       	ldi	r30, 0x30	; 48
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	86 81       	ldd	r24, Z+6	; 0x06
    1990:	86 95       	lsr	r24
    1992:	86 95       	lsr	r24
    1994:	81 70       	andi	r24, 0x01	; 1
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	15 c1       	rjmp	.+554    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PINB.Bit.B3;
    199a:	e0 e3       	ldi	r30, 0x30	; 48
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	86 81       	ldd	r24, Z+6	; 0x06
    19a0:	86 95       	lsr	r24
    19a2:	86 95       	lsr	r24
    19a4:	86 95       	lsr	r24
    19a6:	81 70       	andi	r24, 0x01	; 1
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	0c c1       	rjmp	.+536    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PINB.Bit.B4;
    19ac:	e0 e3       	ldi	r30, 0x30	; 48
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	86 81       	ldd	r24, Z+6	; 0x06
    19b2:	82 95       	swap	r24
    19b4:	8f 70       	andi	r24, 0x0F	; 15
    19b6:	81 70       	andi	r24, 0x01	; 1
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	04 c1       	rjmp	.+520    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PINB.Bit.B5;
    19bc:	e0 e3       	ldi	r30, 0x30	; 48
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	86 81       	ldd	r24, Z+6	; 0x06
    19c2:	82 95       	swap	r24
    19c4:	86 95       	lsr	r24
    19c6:	87 70       	andi	r24, 0x07	; 7
    19c8:	81 70       	andi	r24, 0x01	; 1
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	fb c0       	rjmp	.+502    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PINB.Bit.B6;
    19ce:	e0 e3       	ldi	r30, 0x30	; 48
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	86 81       	ldd	r24, Z+6	; 0x06
    19d4:	82 95       	swap	r24
    19d6:	86 95       	lsr	r24
    19d8:	86 95       	lsr	r24
    19da:	83 70       	andi	r24, 0x03	; 3
    19dc:	81 70       	andi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	f1 c0       	rjmp	.+482    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PINB.Bit.B7;
    19e2:	e0 e3       	ldi	r30, 0x30	; 48
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	86 81       	ldd	r24, Z+6	; 0x06
    19e8:	88 1f       	adc	r24, r24
    19ea:	88 27       	eor	r24, r24
    19ec:	88 1f       	adc	r24, r24
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	e9 c0       	rjmp	.+466    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
			}
			break;


		case PORT_C:
			switch(Copy_PinId)
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	3f 83       	std	Y+7, r19	; 0x07
    19fa:	2e 83       	std	Y+6, r18	; 0x06
    19fc:	8e 81       	ldd	r24, Y+6	; 0x06
    19fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1a00:	83 30       	cpi	r24, 0x03	; 3
    1a02:	91 05       	cpc	r25, r1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <DIO_voidGetPinValue+0x246>
    1a06:	3e c0       	rjmp	.+124    	; 0x1a84 <DIO_voidGetPinValue+0x2c2>
    1a08:	2e 81       	ldd	r18, Y+6	; 0x06
    1a0a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a0c:	24 30       	cpi	r18, 0x04	; 4
    1a0e:	31 05       	cpc	r19, r1
    1a10:	7c f4       	brge	.+30     	; 0x1a30 <DIO_voidGetPinValue+0x26e>
    1a12:	8e 81       	ldd	r24, Y+6	; 0x06
    1a14:	9f 81       	ldd	r25, Y+7	; 0x07
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	91 05       	cpc	r25, r1
    1a1a:	29 f1       	breq	.+74     	; 0x1a66 <DIO_voidGetPinValue+0x2a4>
    1a1c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a1e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a20:	22 30       	cpi	r18, 0x02	; 2
    1a22:	31 05       	cpc	r19, r1
    1a24:	3c f5       	brge	.+78     	; 0x1a74 <DIO_voidGetPinValue+0x2b2>
    1a26:	8e 81       	ldd	r24, Y+6	; 0x06
    1a28:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	b1 f0       	breq	.+44     	; 0x1a5a <DIO_voidGetPinValue+0x298>
    1a2e:	ca c0       	rjmp	.+404    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
    1a30:	2e 81       	ldd	r18, Y+6	; 0x06
    1a32:	3f 81       	ldd	r19, Y+7	; 0x07
    1a34:	25 30       	cpi	r18, 0x05	; 5
    1a36:	31 05       	cpc	r19, r1
    1a38:	b1 f1       	breq	.+108    	; 0x1aa6 <DIO_voidGetPinValue+0x2e4>
    1a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a3e:	85 30       	cpi	r24, 0x05	; 5
    1a40:	91 05       	cpc	r25, r1
    1a42:	4c f1       	brlt	.+82     	; 0x1a96 <DIO_voidGetPinValue+0x2d4>
    1a44:	2e 81       	ldd	r18, Y+6	; 0x06
    1a46:	3f 81       	ldd	r19, Y+7	; 0x07
    1a48:	26 30       	cpi	r18, 0x06	; 6
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	a9 f1       	breq	.+106    	; 0x1ab8 <DIO_voidGetPinValue+0x2f6>
    1a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a50:	9f 81       	ldd	r25, Y+7	; 0x07
    1a52:	87 30       	cpi	r24, 0x07	; 7
    1a54:	91 05       	cpc	r25, r1
    1a56:	d1 f1       	breq	.+116    	; 0x1acc <DIO_voidGetPinValue+0x30a>
    1a58:	b5 c0       	rjmp	.+362    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PINC.Bit.B0;
    1a5a:	e0 e3       	ldi	r30, 0x30	; 48
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	83 81       	ldd	r24, Z+3	; 0x03
    1a60:	81 70       	andi	r24, 0x01	; 1
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	af c0       	rjmp	.+350    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PINC.Bit.B1;
    1a66:	e0 e3       	ldi	r30, 0x30	; 48
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	83 81       	ldd	r24, Z+3	; 0x03
    1a6c:	86 95       	lsr	r24
    1a6e:	81 70       	andi	r24, 0x01	; 1
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	a8 c0       	rjmp	.+336    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PINC.Bit.B2;
    1a74:	e0 e3       	ldi	r30, 0x30	; 48
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	83 81       	ldd	r24, Z+3	; 0x03
    1a7a:	86 95       	lsr	r24
    1a7c:	86 95       	lsr	r24
    1a7e:	81 70       	andi	r24, 0x01	; 1
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	a0 c0       	rjmp	.+320    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PINC.Bit.B3;
    1a84:	e0 e3       	ldi	r30, 0x30	; 48
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	83 81       	ldd	r24, Z+3	; 0x03
    1a8a:	86 95       	lsr	r24
    1a8c:	86 95       	lsr	r24
    1a8e:	86 95       	lsr	r24
    1a90:	81 70       	andi	r24, 0x01	; 1
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	97 c0       	rjmp	.+302    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PINC.Bit.B4;
    1a96:	e0 e3       	ldi	r30, 0x30	; 48
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	83 81       	ldd	r24, Z+3	; 0x03
    1a9c:	82 95       	swap	r24
    1a9e:	8f 70       	andi	r24, 0x0F	; 15
    1aa0:	81 70       	andi	r24, 0x01	; 1
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	8f c0       	rjmp	.+286    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PINC.Bit.B5;
    1aa6:	e0 e3       	ldi	r30, 0x30	; 48
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	83 81       	ldd	r24, Z+3	; 0x03
    1aac:	82 95       	swap	r24
    1aae:	86 95       	lsr	r24
    1ab0:	87 70       	andi	r24, 0x07	; 7
    1ab2:	81 70       	andi	r24, 0x01	; 1
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	86 c0       	rjmp	.+268    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PINC.Bit.B6;
    1ab8:	e0 e3       	ldi	r30, 0x30	; 48
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	83 81       	ldd	r24, Z+3	; 0x03
    1abe:	82 95       	swap	r24
    1ac0:	86 95       	lsr	r24
    1ac2:	86 95       	lsr	r24
    1ac4:	83 70       	andi	r24, 0x03	; 3
    1ac6:	81 70       	andi	r24, 0x01	; 1
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	7c c0       	rjmp	.+248    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PINC.Bit.B7;
    1acc:	e0 e3       	ldi	r30, 0x30	; 48
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	83 81       	ldd	r24, Z+3	; 0x03
    1ad2:	88 1f       	adc	r24, r24
    1ad4:	88 27       	eor	r24, r24
    1ad6:	88 1f       	adc	r24, r24
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	74 c0       	rjmp	.+232    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
				default: break;
			}
			break;

		case PORT_D:
			switch(Copy_PinId)
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3d 83       	std	Y+5, r19	; 0x05
    1ae4:	2c 83       	std	Y+4, r18	; 0x04
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aea:	83 30       	cpi	r24, 0x03	; 3
    1aec:	91 05       	cpc	r25, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <DIO_voidGetPinValue+0x330>
    1af0:	3e c0       	rjmp	.+124    	; 0x1b6e <DIO_voidGetPinValue+0x3ac>
    1af2:	2c 81       	ldd	r18, Y+4	; 0x04
    1af4:	3d 81       	ldd	r19, Y+5	; 0x05
    1af6:	24 30       	cpi	r18, 0x04	; 4
    1af8:	31 05       	cpc	r19, r1
    1afa:	7c f4       	brge	.+30     	; 0x1b1a <DIO_voidGetPinValue+0x358>
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	9d 81       	ldd	r25, Y+5	; 0x05
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	91 05       	cpc	r25, r1
    1b04:	29 f1       	breq	.+74     	; 0x1b50 <DIO_voidGetPinValue+0x38e>
    1b06:	2c 81       	ldd	r18, Y+4	; 0x04
    1b08:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	3c f5       	brge	.+78     	; 0x1b5e <DIO_voidGetPinValue+0x39c>
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	9d 81       	ldd	r25, Y+5	; 0x05
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	b1 f0       	breq	.+44     	; 0x1b44 <DIO_voidGetPinValue+0x382>
    1b18:	55 c0       	rjmp	.+170    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
    1b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1e:	25 30       	cpi	r18, 0x05	; 5
    1b20:	31 05       	cpc	r19, r1
    1b22:	b1 f1       	breq	.+108    	; 0x1b90 <DIO_voidGetPinValue+0x3ce>
    1b24:	8c 81       	ldd	r24, Y+4	; 0x04
    1b26:	9d 81       	ldd	r25, Y+5	; 0x05
    1b28:	85 30       	cpi	r24, 0x05	; 5
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	4c f1       	brlt	.+82     	; 0x1b80 <DIO_voidGetPinValue+0x3be>
    1b2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b30:	3d 81       	ldd	r19, Y+5	; 0x05
    1b32:	26 30       	cpi	r18, 0x06	; 6
    1b34:	31 05       	cpc	r19, r1
    1b36:	a9 f1       	breq	.+106    	; 0x1ba2 <DIO_voidGetPinValue+0x3e0>
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	87 30       	cpi	r24, 0x07	; 7
    1b3e:	91 05       	cpc	r25, r1
    1b40:	d1 f1       	breq	.+116    	; 0x1bb6 <DIO_voidGetPinValue+0x3f4>
    1b42:	40 c0       	rjmp	.+128    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PIND.Bit.B0;
    1b44:	e0 e3       	ldi	r30, 0x30	; 48
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	81 70       	andi	r24, 0x01	; 1
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	3a c0       	rjmp	.+116    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PIND.Bit.B1;
    1b50:	e0 e3       	ldi	r30, 0x30	; 48
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	86 95       	lsr	r24
    1b58:	81 70       	andi	r24, 0x01	; 1
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	33 c0       	rjmp	.+102    	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PIND.Bit.B2;
    1b5e:	e0 e3       	ldi	r30, 0x30	; 48
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	86 95       	lsr	r24
    1b66:	86 95       	lsr	r24
    1b68:	81 70       	andi	r24, 0x01	; 1
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	2b c0       	rjmp	.+86     	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PIND.Bit.B3;
    1b6e:	e0 e3       	ldi	r30, 0x30	; 48
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	86 95       	lsr	r24
    1b76:	86 95       	lsr	r24
    1b78:	86 95       	lsr	r24
    1b7a:	81 70       	andi	r24, 0x01	; 1
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	22 c0       	rjmp	.+68     	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PIND.Bit.B4;
    1b80:	e0 e3       	ldi	r30, 0x30	; 48
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	82 95       	swap	r24
    1b88:	8f 70       	andi	r24, 0x0F	; 15
    1b8a:	81 70       	andi	r24, 0x01	; 1
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	1a c0       	rjmp	.+52     	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PIND.Bit.B5;
    1b90:	e0 e3       	ldi	r30, 0x30	; 48
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	82 95       	swap	r24
    1b98:	86 95       	lsr	r24
    1b9a:	87 70       	andi	r24, 0x07	; 7
    1b9c:	81 70       	andi	r24, 0x01	; 1
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	11 c0       	rjmp	.+34     	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PIND.Bit.B6;
    1ba2:	e0 e3       	ldi	r30, 0x30	; 48
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	82 95       	swap	r24
    1baa:	86 95       	lsr	r24
    1bac:	86 95       	lsr	r24
    1bae:	83 70       	andi	r24, 0x03	; 3
    1bb0:	81 70       	andi	r24, 0x01	; 1
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	07 c0       	rjmp	.+14     	; 0x1bc4 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PIND.Bit.B7;
    1bb6:	e0 e3       	ldi	r30, 0x30	; 48
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	88 1f       	adc	r24, r24
    1bbe:	88 27       	eor	r24, r24
    1bc0:	88 1f       	adc	r24, r24
    1bc2:	89 83       	std	Y+1, r24	; 0x01
						break;
				default: break;
			}
			break;
	}
	return Local_u8Pin;
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc6:	2d 96       	adiw	r28, 0x0d	; 13
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <DIO_voidSetPortirection>:

void DIO_voidSetPortirection(PORT_t Copy_PortId,DIRECTION_t Copy_Direction)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <DIO_voidSetPortirection+0x6>
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <DIO_voidSetPortirection+0x8>
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PortId)
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	3c 83       	std	Y+4, r19	; 0x04
    1bf0:	2b 83       	std	Y+3, r18	; 0x03
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	21 f1       	breq	.+72     	; 0x1c44 <DIO_voidSetPortirection+0x6c>
    1bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1c00:	22 30       	cpi	r18, 0x02	; 2
    1c02:	31 05       	cpc	r19, r1
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <DIO_voidSetPortirection+0x38>
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	61 f0       	breq	.+24     	; 0x1c26 <DIO_voidSetPortirection+0x4e>
    1c0e:	46 c0       	rjmp	.+140    	; 0x1c9c <DIO_voidSetPortirection+0xc4>
    1c10:	2b 81       	ldd	r18, Y+3	; 0x03
    1c12:	3c 81       	ldd	r19, Y+4	; 0x04
    1c14:	22 30       	cpi	r18, 0x02	; 2
    1c16:	31 05       	cpc	r19, r1
    1c18:	21 f1       	breq	.+72     	; 0x1c62 <DIO_voidSetPortirection+0x8a>
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	83 30       	cpi	r24, 0x03	; 3
    1c20:	91 05       	cpc	r25, r1
    1c22:	71 f1       	breq	.+92     	; 0x1c80 <DIO_voidSetPortirection+0xa8>
    1c24:	3b c0       	rjmp	.+118    	; 0x1c9c <DIO_voidSetPortirection+0xc4>
		{
			case PORT_A:
				if(Copy_Direction == INPUT)
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	88 23       	and	r24, r24
    1c2a:	21 f4       	brne	.+8      	; 0x1c34 <DIO_voidSetPortirection+0x5c>
				{
					DIO->DDRA.All_Bits = 0;
    1c2c:	e0 e3       	ldi	r30, 0x30	; 48
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	12 86       	std	Z+10, r1	; 0x0a
    1c32:	34 c0       	rjmp	.+104    	; 0x1c9c <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	89 f5       	brne	.+98     	; 0x1c9c <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRA.All_Bits = 0xFF;
    1c3a:	e0 e3       	ldi	r30, 0x30	; 48
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	8f ef       	ldi	r24, 0xFF	; 255
    1c40:	82 87       	std	Z+10, r24	; 0x0a
    1c42:	2c c0       	rjmp	.+88     	; 0x1c9c <DIO_voidSetPortirection+0xc4>

				}
				break;

			case PORT_B:
				if(Copy_Direction == INPUT)
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	88 23       	and	r24, r24
    1c48:	21 f4       	brne	.+8      	; 0x1c52 <DIO_voidSetPortirection+0x7a>
				{
					DIO->DDRB.All_Bits = 0;
    1c4a:	e0 e3       	ldi	r30, 0x30	; 48
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	17 82       	std	Z+7, r1	; 0x07
    1c50:	25 c0       	rjmp	.+74     	; 0x1c9c <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	11 f5       	brne	.+68     	; 0x1c9c <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRB.All_Bits = 0xFF;
    1c58:	e0 e3       	ldi	r30, 0x30	; 48
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	8f ef       	ldi	r24, 0xFF	; 255
    1c5e:	87 83       	std	Z+7, r24	; 0x07
    1c60:	1d c0       	rjmp	.+58     	; 0x1c9c <DIO_voidSetPortirection+0xc4>
				}
				break;


			case PORT_C:
				if(Copy_Direction == INPUT)
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	88 23       	and	r24, r24
    1c66:	21 f4       	brne	.+8      	; 0x1c70 <DIO_voidSetPortirection+0x98>
				{
					DIO->DDRC.All_Bits = 0;
    1c68:	e0 e3       	ldi	r30, 0x30	; 48
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	14 82       	std	Z+4, r1	; 0x04
    1c6e:	16 c0       	rjmp	.+44     	; 0x1c9c <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	99 f4       	brne	.+38     	; 0x1c9c <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRC.All_Bits = 0xFF;
    1c76:	e0 e3       	ldi	r30, 0x30	; 48
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	8f ef       	ldi	r24, 0xFF	; 255
    1c7c:	84 83       	std	Z+4, r24	; 0x04
    1c7e:	0e c0       	rjmp	.+28     	; 0x1c9c <DIO_voidSetPortirection+0xc4>

				}
				break;

			case PORT_D:
				if(Copy_Direction == INPUT)
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	88 23       	and	r24, r24
    1c84:	21 f4       	brne	.+8      	; 0x1c8e <DIO_voidSetPortirection+0xb6>
				{
					DIO->DDRD.All_Bits = 0;
    1c86:	e0 e3       	ldi	r30, 0x30	; 48
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	11 82       	std	Z+1, r1	; 0x01
    1c8c:	07 c0       	rjmp	.+14     	; 0x1c9c <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	21 f4       	brne	.+8      	; 0x1c9c <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRD.All_Bits = 0xFF;
    1c94:	e0 e3       	ldi	r30, 0x30	; 48
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	81 83       	std	Z+1, r24	; 0x01

				}
				break;
		}
}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(PORT_t Copy_PortId,VALUE_t Copy_Value)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <DIO_voidSetPortValue+0x6>
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <DIO_voidSetPortValue+0x8>
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PortId)
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	3c 83       	std	Y+4, r19	; 0x04
    1cc2:	2b 83       	std	Y+3, r18	; 0x03
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	91 05       	cpc	r25, r1
    1ccc:	21 f1       	breq	.+72     	; 0x1d16 <DIO_voidSetPortValue+0x6c>
    1cce:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd2:	22 30       	cpi	r18, 0x02	; 2
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <DIO_voidSetPortValue+0x38>
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	61 f0       	breq	.+24     	; 0x1cf8 <DIO_voidSetPortValue+0x4e>
    1ce0:	46 c0       	rjmp	.+140    	; 0x1d6e <DIO_voidSetPortValue+0xc4>
    1ce2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce6:	22 30       	cpi	r18, 0x02	; 2
    1ce8:	31 05       	cpc	r19, r1
    1cea:	21 f1       	breq	.+72     	; 0x1d34 <DIO_voidSetPortValue+0x8a>
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf0:	83 30       	cpi	r24, 0x03	; 3
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	71 f1       	breq	.+92     	; 0x1d52 <DIO_voidSetPortValue+0xa8>
    1cf6:	3b c0       	rjmp	.+118    	; 0x1d6e <DIO_voidSetPortValue+0xc4>
		{
			case PORT_A:
				if(Copy_Value == HIGH)
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	29 f4       	brne	.+10     	; 0x1d08 <DIO_voidSetPortValue+0x5e>
				{
					DIO->PORTA.All_Bits = 0xFF;
    1cfe:	e0 e3       	ldi	r30, 0x30	; 48
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	83 87       	std	Z+11, r24	; 0x0b
    1d06:	33 c0       	rjmp	.+102    	; 0x1d6e <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	88 23       	and	r24, r24
    1d0c:	81 f5       	brne	.+96     	; 0x1d6e <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTA.All_Bits = 0;
    1d0e:	e0 e3       	ldi	r30, 0x30	; 48
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	13 86       	std	Z+11, r1	; 0x0b
    1d14:	2c c0       	rjmp	.+88     	; 0x1d6e <DIO_voidSetPortValue+0xc4>

				}
				break;

			case PORT_B:
				if(Copy_Value == HIGH)
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	81 30       	cpi	r24, 0x01	; 1
    1d1a:	29 f4       	brne	.+10     	; 0x1d26 <DIO_voidSetPortValue+0x7c>
				{
					DIO->PORTB.All_Bits = 0xFF;
    1d1c:	e0 e3       	ldi	r30, 0x30	; 48
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	8f ef       	ldi	r24, 0xFF	; 255
    1d22:	80 87       	std	Z+8, r24	; 0x08
    1d24:	24 c0       	rjmp	.+72     	; 0x1d6e <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	88 23       	and	r24, r24
    1d2a:	09 f5       	brne	.+66     	; 0x1d6e <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTB.All_Bits = 0;
    1d2c:	e0 e3       	ldi	r30, 0x30	; 48
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	10 86       	std	Z+8, r1	; 0x08
    1d32:	1d c0       	rjmp	.+58     	; 0x1d6e <DIO_voidSetPortValue+0xc4>
				}
				break;


			case PORT_C:
				if(Copy_Value == HIGH)
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	29 f4       	brne	.+10     	; 0x1d44 <DIO_voidSetPortValue+0x9a>
				{
					DIO->PORTC.All_Bits = 0xFF;
    1d3a:	e0 e3       	ldi	r30, 0x30	; 48
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	8f ef       	ldi	r24, 0xFF	; 255
    1d40:	85 83       	std	Z+5, r24	; 0x05
    1d42:	15 c0       	rjmp	.+42     	; 0x1d6e <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	88 23       	and	r24, r24
    1d48:	91 f4       	brne	.+36     	; 0x1d6e <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTC.All_Bits = 0;
    1d4a:	e0 e3       	ldi	r30, 0x30	; 48
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	15 82       	std	Z+5, r1	; 0x05
    1d50:	0e c0       	rjmp	.+28     	; 0x1d6e <DIO_voidSetPortValue+0xc4>

				}
				break;

			case PORT_D:
				if(Copy_Value == HIGH)
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	29 f4       	brne	.+10     	; 0x1d62 <DIO_voidSetPortValue+0xb8>
				{
					DIO->PORTD.All_Bits = 0xFF;
    1d58:	e0 e3       	ldi	r30, 0x30	; 48
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	8f ef       	ldi	r24, 0xFF	; 255
    1d5e:	82 83       	std	Z+2, r24	; 0x02
    1d60:	06 c0       	rjmp	.+12     	; 0x1d6e <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	88 23       	and	r24, r24
    1d66:	19 f4       	brne	.+6      	; 0x1d6e <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTD.All_Bits = 0;
    1d68:	e0 e3       	ldi	r30, 0x30	; 48
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	12 82       	std	Z+2, r1	; 0x02

				}
				break;
		}
}
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <DIO_voidGetPortValue>:
u8 DIO_voidGetPortValue(PORT_t Copy_PortId)
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <DIO_voidGetPortValue+0x6>
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <DIO_voidGetPortValue+0x8>
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Pin;
	switch(Copy_PortId)
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	3c 83       	std	Y+4, r19	; 0x04
    1d92:	2b 83       	std	Y+3, r18	; 0x03
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	9c 81       	ldd	r25, Y+4	; 0x04
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	d1 f0       	breq	.+52     	; 0x1dd2 <DIO_voidGetPortValue+0x56>
    1d9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1da0:	3c 81       	ldd	r19, Y+4	; 0x04
    1da2:	22 30       	cpi	r18, 0x02	; 2
    1da4:	31 05       	cpc	r19, r1
    1da6:	2c f4       	brge	.+10     	; 0x1db2 <DIO_voidGetPortValue+0x36>
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	61 f0       	breq	.+24     	; 0x1dc8 <DIO_voidGetPortValue+0x4c>
    1db0:	1e c0       	rjmp	.+60     	; 0x1dee <DIO_voidGetPortValue+0x72>
    1db2:	2b 81       	ldd	r18, Y+3	; 0x03
    1db4:	3c 81       	ldd	r19, Y+4	; 0x04
    1db6:	22 30       	cpi	r18, 0x02	; 2
    1db8:	31 05       	cpc	r19, r1
    1dba:	81 f0       	breq	.+32     	; 0x1ddc <DIO_voidGetPortValue+0x60>
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	83 30       	cpi	r24, 0x03	; 3
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	81 f0       	breq	.+32     	; 0x1de6 <DIO_voidGetPortValue+0x6a>
    1dc6:	13 c0       	rjmp	.+38     	; 0x1dee <DIO_voidGetPortValue+0x72>
	{
		case PORT_A:
			Local_u8Pin = DIO->PINA.All_Bits;
    1dc8:	e0 e3       	ldi	r30, 0x30	; 48
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	81 85       	ldd	r24, Z+9	; 0x09
    1dce:	89 83       	std	Y+1, r24	; 0x01
    1dd0:	0e c0       	rjmp	.+28     	; 0x1dee <DIO_voidGetPortValue+0x72>
		break;
		case PORT_B:
			Local_u8Pin = DIO->PINB.All_Bits;
    1dd2:	e0 e3       	ldi	r30, 0x30	; 48
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	86 81       	ldd	r24, Z+6	; 0x06
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	09 c0       	rjmp	.+18     	; 0x1dee <DIO_voidGetPortValue+0x72>
		break;
		case PORT_C:
			Local_u8Pin = DIO->PINC.All_Bits;
    1ddc:	e0 e3       	ldi	r30, 0x30	; 48
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	83 81       	ldd	r24, Z+3	; 0x03
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	04 c0       	rjmp	.+8      	; 0x1dee <DIO_voidGetPortValue+0x72>

		break;
		case PORT_D:
			Local_u8Pin = DIO->PIND.All_Bits;
    1de6:	e0 e3       	ldi	r30, 0x30	; 48
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: break;
	}
	return Local_u8Pin;
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <H_EEPROM_voidInit>:
#include  "../inc/EEPROM_private.h"
#include  "../inc/EEPROM_config.h"
/*******************************************************************************/

void H_EEPROM_voidInit(EEPROM_CLK_t Copy_EEPROM_CLK)
{
    1dfe:	0f 93       	push	r16
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	89 83       	std	Y+1, r24	; 0x01
	M_I2C_voidInit(I2C_ENABLE                ,
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	29 81       	ldd	r18, Y+1	; 0x01
    1e14:	00 e0       	ldi	r16, 0x00	; 0
    1e16:	0e 94 d6 10 	call	0x21ac	; 0x21ac <M_I2C_voidInit>
			       I2C_INTERRUPT_ENABLE      ,
				   I2C_NO_PRESCALER          ,
				   Copy_EEPROM_CLK           ,
				   I2C_GENERAL_CALL_DISABLE );
}
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	0f 91       	pop	r16
    1e22:	08 95       	ret

00001e24 <H_EEPROM_WriteByte>:




I2C_STATUS_t H_EEPROM_WriteByte(u16 Copy_u16Address, u8 Copy_u8SendData)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	63 97       	sbiw	r28, 0x13	; 19
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	99 8b       	std	Y+17, r25	; 0x11
    1e3a:	88 8b       	std	Y+16, r24	; 0x10
    1e3c:	6a 8b       	std	Y+18, r22	; 0x12
	I2C_STATUS_t ERROR_STATE = I2C_ERROR;
    1e3e:	1f 86       	std	Y+15, r1	; 0x0f
	// step 1 :	send Start
	M_I2C_voidSendStart_Condition();
    1e40:	0e 94 2e 11 	call	0x225c	; 0x225c <M_I2C_voidSendStart_Condition>
	
	// step 2 : check status if not Start Success return false
    M_I2C_voidGetStatus(&ERROR_STATE);
    1e44:	ce 01       	movw	r24, r28
    1e46:	0f 96       	adiw	r24, 0x0f	; 15
    1e48:	0e 94 7f 11 	call	0x22fe	; 0x22fe <M_I2C_voidGetStatus>
	if (ERROR_STATE != I2C_MT_MR_START_CONDITION)
    1e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4e:	88 30       	cpi	r24, 0x08	; 8
    1e50:	11 f0       	breq	.+4      	; 0x1e56 <H_EEPROM_WriteByte+0x32>
	{
		return I2C_ERROR;
    1e52:	1b 8a       	std	Y+19, r1	; 0x13
    1e54:	9a c0       	rjmp	.+308    	; 0x1f8a <H_EEPROM_WriteByte+0x166>
	}
	
	// step 3 : send address 1010 + E A9 A8 + W
	M_I2C_voidSendByte(0b10100000);
    1e56:	80 ea       	ldi	r24, 0xA0	; 160
    1e58:	0e 94 17 11 	call	0x222e	; 0x222e <M_I2C_voidSendByte>
	// step 4 : check status TWI_MT_SLA_W_ACK 
    M_I2C_voidGetStatus(&ERROR_STATE);
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	0f 96       	adiw	r24, 0x0f	; 15
    1e60:	0e 94 7f 11 	call	0x22fe	; 0x22fe <M_I2C_voidGetStatus>
	if (ERROR_STATE != I2C_MT_SLA_W_ACK)
    1e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e66:	88 31       	cpi	r24, 0x18	; 24
    1e68:	11 f0       	breq	.+4      	; 0x1e6e <H_EEPROM_WriteByte+0x4a>
	{
		return I2C_ERROR;
    1e6a:	1b 8a       	std	Y+19, r1	; 0x13
    1e6c:	8e c0       	rjmp	.+284    	; 0x1f8a <H_EEPROM_WriteByte+0x166>
	}

	// step 5 : send rest of Byte address as data A7 .....A0
	M_I2C_voidSendByte((u8)Copy_u16Address);
    1e6e:	88 89       	ldd	r24, Y+16	; 0x10
    1e70:	0e 94 17 11 	call	0x222e	; 0x222e <M_I2C_voidSendByte>
	
	
	// step 6 : check status TWI_MT_DATA_ACK
    M_I2C_voidGetStatus(&ERROR_STATE);
    1e74:	ce 01       	movw	r24, r28
    1e76:	0f 96       	adiw	r24, 0x0f	; 15
    1e78:	0e 94 7f 11 	call	0x22fe	; 0x22fe <M_I2C_voidGetStatus>
	if (ERROR_STATE != I2C_MT_DATA_ACK)
    1e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7e:	88 32       	cpi	r24, 0x28	; 40
    1e80:	11 f0       	breq	.+4      	; 0x1e86 <H_EEPROM_WriteByte+0x62>
	{
		return I2C_ERROR;
    1e82:	1b 8a       	std	Y+19, r1	; 0x13
    1e84:	82 c0       	rjmp	.+260    	; 0x1f8a <H_EEPROM_WriteByte+0x166>
	}
	// step 7 : send Byte to be written
	M_I2C_voidSendByte(Copy_u8SendData);
    1e86:	8a 89       	ldd	r24, Y+18	; 0x12
    1e88:	0e 94 17 11 	call	0x222e	; 0x222e <M_I2C_voidSendByte>

	// step 8 : check status TWI_MT_DATA_ACK
    M_I2C_voidGetStatus(&ERROR_STATE);
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	0f 96       	adiw	r24, 0x0f	; 15
    1e90:	0e 94 7f 11 	call	0x22fe	; 0x22fe <M_I2C_voidGetStatus>
	if (ERROR_STATE != I2C_MT_DATA_ACK)
    1e94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e96:	88 32       	cpi	r24, 0x28	; 40
    1e98:	11 f0       	breq	.+4      	; 0x1e9e <H_EEPROM_WriteByte+0x7a>
	{
		return I2C_ERROR;
    1e9a:	1b 8a       	std	Y+19, r1	; 0x13
    1e9c:	76 c0       	rjmp	.+236    	; 0x1f8a <H_EEPROM_WriteByte+0x166>
	}
	// step 9 : send stop
	M_I2C_voidSendStop_Condition();
    1e9e:	0e 94 3e 11 	call	0x227c	; 0x227c <M_I2C_voidSendStop_Condition>
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	a0 e2       	ldi	r26, 0x20	; 32
    1ea8:	b1 e4       	ldi	r27, 0x41	; 65
    1eaa:	8b 87       	std	Y+11, r24	; 0x0b
    1eac:	9c 87       	std	Y+12, r25	; 0x0c
    1eae:	ad 87       	std	Y+13, r26	; 0x0d
    1eb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	4a e7       	ldi	r20, 0x7A	; 122
    1ec0:	55 e4       	ldi	r21, 0x45	; 69
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	8f 83       	std	Y+7, r24	; 0x07
    1ecc:	98 87       	std	Y+8, r25	; 0x08
    1ece:	a9 87       	std	Y+9, r26	; 0x09
    1ed0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e8       	ldi	r20, 0x80	; 128
    1ee0:	5f e3       	ldi	r21, 0x3F	; 63
    1ee2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee6:	88 23       	and	r24, r24
    1ee8:	2c f4       	brge	.+10     	; 0x1ef4 <H_EEPROM_WriteByte+0xd0>
		__ticks = 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9e 83       	std	Y+6, r25	; 0x06
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
    1ef2:	3f c0       	rjmp	.+126    	; 0x1f72 <H_EEPROM_WriteByte+0x14e>
	else if (__tmp > 65535)
    1ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef6:	78 85       	ldd	r23, Y+8	; 0x08
    1ef8:	89 85       	ldd	r24, Y+9	; 0x09
    1efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	3f ef       	ldi	r19, 0xFF	; 255
    1f00:	4f e7       	ldi	r20, 0x7F	; 127
    1f02:	57 e4       	ldi	r21, 0x47	; 71
    1f04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f08:	18 16       	cp	r1, r24
    1f0a:	4c f5       	brge	.+82     	; 0x1f5e <H_EEPROM_WriteByte+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e2       	ldi	r20, 0x20	; 32
    1f1a:	51 e4       	ldi	r21, 0x41	; 65
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	0f c0       	rjmp	.+30     	; 0x1f54 <H_EEPROM_WriteByte+0x130>
    1f36:	80 e9       	ldi	r24, 0x90	; 144
    1f38:	91 e0       	ldi	r25, 0x01	; 1
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <H_EEPROM_WriteByte+0x11e>
    1f46:	9c 83       	std	Y+4, r25	; 0x04
    1f48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	69 f7       	brne	.-38     	; 0x1f36 <H_EEPROM_WriteByte+0x112>
    1f5c:	14 c0       	rjmp	.+40     	; 0x1f86 <H_EEPROM_WriteByte+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f60:	78 85       	ldd	r23, Y+8	; 0x08
    1f62:	89 85       	ldd	r24, Y+9	; 0x09
    1f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9e 83       	std	Y+6, r25	; 0x06
    1f70:	8d 83       	std	Y+5, r24	; 0x05
    1f72:	8d 81       	ldd	r24, Y+5	; 0x05
    1f74:	9e 81       	ldd	r25, Y+6	; 0x06
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <H_EEPROM_WriteByte+0x15a>
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for next Byte */
	_delay_ms(10);

	return ERROR_STATE;
    1f86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f88:	8b 8b       	std	Y+19, r24	; 0x13
    1f8a:	8b 89       	ldd	r24, Y+19	; 0x13
}
    1f8c:	63 96       	adiw	r28, 0x13	; 19
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <H_EEPROM_EraseByte>:


I2C_STATUS_t H_EEPROM_EraseByte(u16 Copy_u16Address)
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <H_EEPROM_EraseByte+0x6>
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	9a 83       	std	Y+2, r25	; 0x02
    1faa:	89 83       	std	Y+1, r24	; 0x01
	return H_EEPROM_WriteByte(Copy_u16Address, 0xFF);
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	6f ef       	ldi	r22, 0xFF	; 255
    1fb2:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <H_EEPROM_WriteByte>
}
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <H_EEPROM_ReadByte>:



I2C_STATUS_t H_EEPROM_ReadByte(u16 Copy_u16Address, u8 * Copy_u8RecievedData)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	65 97       	sbiw	r28, 0x15	; 21
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	9a 8b       	std	Y+18, r25	; 0x12
    1fd6:	89 8b       	std	Y+17, r24	; 0x11
    1fd8:	7c 8b       	std	Y+20, r23	; 0x14
    1fda:	6b 8b       	std	Y+19, r22	; 0x13
	I2C_STATUS_t ERROR_STATE = I2C_ERROR;
    1fdc:	1f 86       	std	Y+15, r1	; 0x0f

//	step 1 : send Start
	M_I2C_voidSendStart_Condition();
    1fde:	0e 94 2e 11 	call	0x225c	; 0x225c <M_I2C_voidSendStart_Condition>

//	step 2 : check status if not Start Success return false
    M_I2C_voidGetStatus(&ERROR_STATE);
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	0f 96       	adiw	r24, 0x0f	; 15
    1fe6:	0e 94 7f 11 	call	0x22fe	; 0x22fe <M_I2C_voidGetStatus>
	if (ERROR_STATE != I2C_MT_MR_START_CONDITION)
    1fea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fec:	88 30       	cpi	r24, 0x08	; 8
    1fee:	11 f0       	breq	.+4      	; 0x1ff4 <H_EEPROM_ReadByte+0x34>
	{
		return I2C_ERROR;
    1ff0:	1d 8a       	std	Y+21, r1	; 0x15
    1ff2:	b7 c0       	rjmp	.+366    	; 0x2162 <H_EEPROM_ReadByte+0x1a2>
	}
//  step 3 : send address 1010 + E A9 A8 + W
	M_I2C_voidSendByte(0b10100000);
    1ff4:	80 ea       	ldi	r24, 0xA0	; 160
    1ff6:	0e 94 17 11 	call	0x222e	; 0x222e <M_I2C_voidSendByte>

	
//  step 4 : check status TWI_MT_SLA_W_ACK 
    M_I2C_voidGetStatus(&ERROR_STATE);
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	0f 96       	adiw	r24, 0x0f	; 15
    1ffe:	0e 94 7f 11 	call	0x22fe	; 0x22fe <M_I2C_voidGetStatus>
	if (ERROR_STATE != I2C_MT_SLA_W_ACK)
    2002:	8f 85       	ldd	r24, Y+15	; 0x0f
    2004:	88 31       	cpi	r24, 0x18	; 24
    2006:	11 f0       	breq	.+4      	; 0x200c <H_EEPROM_ReadByte+0x4c>
	{
		return I2C_ERROR;
    2008:	1d 8a       	std	Y+21, r1	; 0x15
    200a:	ab c0       	rjmp	.+342    	; 0x2162 <H_EEPROM_ReadByte+0x1a2>
	}
//  step 5 : send rest of Byte address as data A7 .....A0
	M_I2C_voidSendByte((u8)Copy_u16Address);
    200c:	89 89       	ldd	r24, Y+17	; 0x11
    200e:	0e 94 17 11 	call	0x222e	; 0x222e <M_I2C_voidSendByte>
	
//  step 6 : check status TWI_MT_DATA_ACK
    M_I2C_voidGetStatus(&ERROR_STATE);
    2012:	ce 01       	movw	r24, r28
    2014:	0f 96       	adiw	r24, 0x0f	; 15
    2016:	0e 94 7f 11 	call	0x22fe	; 0x22fe <M_I2C_voidGetStatus>
	if (ERROR_STATE != I2C_MT_DATA_ACK)
    201a:	8f 85       	ldd	r24, Y+15	; 0x0f
    201c:	88 32       	cpi	r24, 0x28	; 40
    201e:	11 f0       	breq	.+4      	; 0x2024 <H_EEPROM_ReadByte+0x64>
	{
		return I2C_ERROR;
    2020:	1d 8a       	std	Y+21, r1	; 0x15
    2022:	9f c0       	rjmp	.+318    	; 0x2162 <H_EEPROM_ReadByte+0x1a2>
	}
	
//  step 7 : send Repeated Start
	M_I2C_voidSendStart_Condition();
    2024:	0e 94 2e 11 	call	0x225c	; 0x225c <M_I2C_voidSendStart_Condition>
	
//  step 8 : check status
    M_I2C_voidGetStatus(&ERROR_STATE);
    2028:	ce 01       	movw	r24, r28
    202a:	0f 96       	adiw	r24, 0x0f	; 15
    202c:	0e 94 7f 11 	call	0x22fe	; 0x22fe <M_I2C_voidGetStatus>
	if (ERROR_STATE != I2C_MT_MR_REPEATED_START_CONDITION)
    2030:	8f 85       	ldd	r24, Y+15	; 0x0f
    2032:	80 31       	cpi	r24, 0x10	; 16
    2034:	11 f0       	breq	.+4      	; 0x203a <H_EEPROM_ReadByte+0x7a>
	{
		return I2C_ERROR;
    2036:	1d 8a       	std	Y+21, r1	; 0x15
    2038:	94 c0       	rjmp	.+296    	; 0x2162 <H_EEPROM_ReadByte+0x1a2>
	}
//  step 9 : send address [1010 + 100 + R] NOT [1010 + 000 + R]
	M_I2C_voidSendByte(0b10100001);
    203a:	81 ea       	ldi	r24, 0xA1	; 161
    203c:	0e 94 17 11 	call	0x222e	; 0x222e <M_I2C_voidSendByte>

//  step 10 : check status TWI_MR_SLA_R_ACK
    M_I2C_voidGetStatus(&ERROR_STATE);
    2040:	ce 01       	movw	r24, r28
    2042:	0f 96       	adiw	r24, 0x0f	; 15
    2044:	0e 94 7f 11 	call	0x22fe	; 0x22fe <M_I2C_voidGetStatus>
	if (ERROR_STATE != I2C_MR_SLA_R_ACK)
    2048:	8f 85       	ldd	r24, Y+15	; 0x0f
    204a:	80 34       	cpi	r24, 0x40	; 64
    204c:	11 f0       	breq	.+4      	; 0x2052 <H_EEPROM_ReadByte+0x92>
	{
		return I2C_ERROR;
    204e:	1d 8a       	std	Y+21, r1	; 0x15
    2050:	88 c0       	rjmp	.+272    	; 0x2162 <H_EEPROM_ReadByte+0x1a2>
	}
	

//  step 11 : read data
	u8 Local_u8Recieved = 0;
    2052:	18 8a       	std	Y+16, r1	; 0x10
	M_I2C_voidReceiveByte_ACK(&Local_u8Recieved);
    2054:	ce 01       	movw	r24, r28
    2056:	40 96       	adiw	r24, 0x10	; 16
    2058:	0e 94 49 11 	call	0x2292	; 0x2292 <M_I2C_voidReceiveByte_ACK>
	*Copy_u8RecievedData = Local_u8Recieved;
    205c:	88 89       	ldd	r24, Y+16	; 0x10
    205e:	eb 89       	ldd	r30, Y+19	; 0x13
    2060:	fc 89       	ldd	r31, Y+20	; 0x14
    2062:	80 83       	st	Z, r24
	
//  step 12 : check status TWI_MR_DATA_ACK
    M_I2C_voidGetStatus(&ERROR_STATE);
    2064:	ce 01       	movw	r24, r28
    2066:	0f 96       	adiw	r24, 0x0f	; 15
    2068:	0e 94 7f 11 	call	0x22fe	; 0x22fe <M_I2C_voidGetStatus>
	if (ERROR_STATE != I2C_MR_DATA_ACK)
    206c:	8f 85       	ldd	r24, Y+15	; 0x0f
    206e:	80 35       	cpi	r24, 0x50	; 80
    2070:	11 f0       	breq	.+4      	; 0x2076 <H_EEPROM_ReadByte+0xb6>
	{
		return I2C_ERROR;
    2072:	1d 8a       	std	Y+21, r1	; 0x15
    2074:	76 c0       	rjmp	.+236    	; 0x2162 <H_EEPROM_ReadByte+0x1a2>
	}
	
//  step 13 : send Stop
	M_I2C_voidSendStop_Condition();
    2076:	0e 94 3e 11 	call	0x227c	; 0x227c <M_I2C_voidSendStop_Condition>
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	a0 e2       	ldi	r26, 0x20	; 32
    2080:	b1 e4       	ldi	r27, 0x41	; 65
    2082:	8b 87       	std	Y+11, r24	; 0x0b
    2084:	9c 87       	std	Y+12, r25	; 0x0c
    2086:	ad 87       	std	Y+13, r26	; 0x0d
    2088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208a:	6b 85       	ldd	r22, Y+11	; 0x0b
    208c:	7c 85       	ldd	r23, Y+12	; 0x0c
    208e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2090:	9e 85       	ldd	r25, Y+14	; 0x0e
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	4a e7       	ldi	r20, 0x7A	; 122
    2098:	55 e4       	ldi	r21, 0x45	; 69
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	8f 83       	std	Y+7, r24	; 0x07
    20a4:	98 87       	std	Y+8, r25	; 0x08
    20a6:	a9 87       	std	Y+9, r26	; 0x09
    20a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20be:	88 23       	and	r24, r24
    20c0:	2c f4       	brge	.+10     	; 0x20cc <H_EEPROM_ReadByte+0x10c>
		__ticks = 1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
    20ca:	3f c0       	rjmp	.+126    	; 0x214a <H_EEPROM_ReadByte+0x18a>
	else if (__tmp > 65535)
    20cc:	6f 81       	ldd	r22, Y+7	; 0x07
    20ce:	78 85       	ldd	r23, Y+8	; 0x08
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	3f ef       	ldi	r19, 0xFF	; 255
    20d8:	4f e7       	ldi	r20, 0x7F	; 127
    20da:	57 e4       	ldi	r21, 0x47	; 71
    20dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e0:	18 16       	cp	r1, r24
    20e2:	4c f5       	brge	.+82     	; 0x2136 <H_EEPROM_ReadByte+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e2       	ldi	r20, 0x20	; 32
    20f2:	51 e4       	ldi	r21, 0x41	; 65
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9e 83       	std	Y+6, r25	; 0x06
    210a:	8d 83       	std	Y+5, r24	; 0x05
    210c:	0f c0       	rjmp	.+30     	; 0x212c <H_EEPROM_ReadByte+0x16c>
    210e:	80 e9       	ldi	r24, 0x90	; 144
    2110:	91 e0       	ldi	r25, 0x01	; 1
    2112:	9c 83       	std	Y+4, r25	; 0x04
    2114:	8b 83       	std	Y+3, r24	; 0x03
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <H_EEPROM_ReadByte+0x15a>
    211e:	9c 83       	std	Y+4, r25	; 0x04
    2120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	69 f7       	brne	.-38     	; 0x210e <H_EEPROM_ReadByte+0x14e>
    2134:	14 c0       	rjmp	.+40     	; 0x215e <H_EEPROM_ReadByte+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2136:	6f 81       	ldd	r22, Y+7	; 0x07
    2138:	78 85       	ldd	r23, Y+8	; 0x08
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9e 83       	std	Y+6, r25	; 0x06
    2148:	8d 83       	std	Y+5, r24	; 0x05
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	9e 81       	ldd	r25, Y+6	; 0x06
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	9a 81       	ldd	r25, Y+2	; 0x02
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <H_EEPROM_ReadByte+0x196>
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for next Byte */
	_delay_ms(10);

	return ERROR_STATE;
    215e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2160:	8d 8b       	std	Y+21, r24	; 0x15
    2162:	8d 89       	ldd	r24, Y+21	; 0x15

}
    2164:	65 96       	adiw	r28, 0x15	; 21
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <MGIE_voidEnable>:
#include "../inc/GIE_config.h"



void MGIE_voidEnable(void)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
	GIE->SREG  |= (GIE_ENABLE  << GIE_BIT) ;
    217e:	af e5       	ldi	r26, 0x5F	; 95
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	ef e5       	ldi	r30, 0x5F	; 95
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	80 68       	ori	r24, 0x80	; 128
    218a:	8c 93       	st	X, r24
}
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <MGIE_voidDisable>:




void MGIE_voidDisable(void)
{	
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
	GIE->SREG  |= (GIE_DISABLE  << GIE_BIT) ;
    219a:	ef e5       	ldi	r30, 0x5F	; 95
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	af e5       	ldi	r26, 0x5F	; 95
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	8c 91       	ld	r24, X
    21a4:	80 83       	st	Z, r24
}
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <M_I2C_voidInit>:
					I2C_INTERRUPT_t         Copy_I2C_INTERRUPT  ,
					I2C_PRESCALER_t         Copy_I2C_PRESCALER  ,
					I2C_CLK_t               Copy_I2C_CLOCK      ,
					I2C_GENRATION_CALL_t    Copy_I2C_GCALL 
					)
{
    21ac:	0f 93       	push	r16
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <M_I2C_voidInit+0x8>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <M_I2C_voidInit+0xa>
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <M_I2C_voidInit+0xc>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	8a 83       	std	Y+2, r24	; 0x02
    21be:	6b 83       	std	Y+3, r22	; 0x03
    21c0:	4c 83       	std	Y+4, r20	; 0x04
    21c2:	2d 83       	std	Y+5, r18	; 0x05
    21c4:	0e 83       	std	Y+6, r16	; 0x06
	u8 Local_RegTemp  = 0;
    21c6:	19 82       	std	Y+1, r1	; 0x01
	/*******************************************************************************/
	Local_RegTemp |= (Copy_I2C_INTERRUPT            << I2C_TWIE_BIT ) ;
    21c8:	99 81       	ldd	r25, Y+1	; 0x01
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	89 2b       	or	r24, r25
    21ce:	89 83       	std	Y+1, r24	; 0x01
	Local_RegTemp |= (Copy_I2C_MODE                 << I2C_TWEN_BIT ) ;
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	88 2f       	mov	r24, r24
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	88 0f       	add	r24, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	98 2f       	mov	r25, r24
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	89 2b       	or	r24, r25
    21e4:	89 83       	std	Y+1, r24	; 0x01
	I2C->TWCR      =  Local_RegTemp;
    21e6:	e0 e2       	ldi	r30, 0x20	; 32
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	86 ab       	std	Z+54, r24	; 0x36
	/*******************************************************************************/
	Local_RegTemp  = 0;
    21ee:	19 82       	std	Y+1, r1	; 0x01
	Local_RegTemp |= (Copy_I2C_PRESCALER            << I2C_TWPS0_BIT) ;
    21f0:	99 81       	ldd	r25, Y+1	; 0x01
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	89 2b       	or	r24, r25
    21f6:	89 83       	std	Y+1, r24	; 0x01
	I2C->TWSR      =  Local_RegTemp;
    21f8:	e0 e2       	ldi	r30, 0x20	; 32
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	81 83       	std	Z+1, r24	; 0x01
	/*******************************************************************************/
	I2C->TWBR      =  Copy_I2C_CLOCK;
    2200:	e0 e2       	ldi	r30, 0x20	; 32
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	80 83       	st	Z, r24
    /*******************************************************************************/
	Local_RegTemp  = 0;
    2208:	19 82       	std	Y+1, r1	; 0x01
	Local_RegTemp |= (Copy_I2C_GCALL                << I2C_TWGCE_BIT) ;
    220a:	99 81       	ldd	r25, Y+1	; 0x01
    220c:	8e 81       	ldd	r24, Y+6	; 0x06
    220e:	89 2b       	or	r24, r25
    2210:	89 83       	std	Y+1, r24	; 0x01
	I2C->TWSR      =  Local_RegTemp;
    2212:	e0 e2       	ldi	r30, 0x20	; 32
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	81 83       	std	Z+1, r24	; 0x01

}				
    221a:	26 96       	adiw	r28, 0x06	; 6
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	0f 91       	pop	r16
    222c:	08 95       	ret

0000222e <M_I2C_voidSendByte>:

/*********************************************************************************/
/*********************************************************************************/
void M_I2C_voidSendByte(u8 Copy_u8TXByte)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	0f 92       	push	r0
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	89 83       	std	Y+1, r24	; 0x01
	I2C->TWDR = Copy_u8TXByte;
    223a:	e0 e2       	ldi	r30, 0x20	; 32
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	83 83       	std	Z+3, r24	; 0x03
	// Enable TWI and clear interrupt flag
	I2C->TWCR = (1<<I2C_TWEN_BIT)|(1<<I2C_TWINT_BIT);
    2242:	e0 e2       	ldi	r30, 0x20	; 32
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	84 e8       	ldi	r24, 0x84	; 132
    2248:	86 ab       	std	Z+54, r24	; 0x36
	/* Wait until TWI finish sending address+ write bit */
	while (!(I2C->TWCR & (1<<I2C_TWINT_BIT)));
    224a:	e0 e2       	ldi	r30, 0x20	; 32
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	86 a9       	ldd	r24, Z+54	; 0x36
    2250:	88 23       	and	r24, r24
    2252:	dc f7       	brge	.-10     	; 0x224a <M_I2C_voidSendByte+0x1c>
}
    2254:	0f 90       	pop	r0
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <M_I2C_voidSendStart_Condition>:
/*********************************************************************************/
/*********************************************************************************/
void M_I2C_voidSendStart_Condition(void)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
	/* Enable TWI, generate start condition and clear interrupt flag */
	I2C->TWCR = (1<<I2C_TWSTA_BIT)|(1<<I2C_TWEN_BIT)|(1<<I2C_TWINT_BIT);
    2264:	e0 e2       	ldi	r30, 0x20	; 32
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	84 ea       	ldi	r24, 0xA4	; 164
    226a:	86 ab       	std	Z+54, r24	; 0x36
	
	/* Wait until TWI finish sending start condition */
	while (!(I2C->TWCR & (1<<I2C_TWINT_BIT)));
    226c:	e0 e2       	ldi	r30, 0x20	; 32
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	86 a9       	ldd	r24, Z+54	; 0x36
    2272:	88 23       	and	r24, r24
    2274:	dc f7       	brge	.-10     	; 0x226c <M_I2C_voidSendStart_Condition+0x10>
}
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <M_I2C_voidSendStop_Condition>:
/*********************************************************************************/
/*********************************************************************************/
void M_I2C_voidSendStop_Condition(void)
{
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
	/* Enable TWI, generate start condition and clear interrupt flag */
	I2C->TWCR = (1<<I2C_TWSTO_BIT)|(1<<I2C_TWEN_BIT)|(1<<I2C_TWINT_BIT);
    2284:	e0 e2       	ldi	r30, 0x20	; 32
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	84 e9       	ldi	r24, 0x94	; 148
    228a:	86 ab       	std	Z+54, r24	; 0x36
	
}
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <M_I2C_voidReceiveByte_ACK>:
/*********************************************************************************/
/*********************************************************************************/
void M_I2C_voidReceiveByte_ACK(u8 * Copy_Byte_ACK)
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	00 d0       	rcall	.+0      	; 0x2298 <M_I2C_voidReceiveByte_ACK+0x6>
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	9a 83       	std	Y+2, r25	; 0x02
    229e:	89 83       	std	Y+1, r24	; 0x01
	/* Enable TWI, generate an Acknoledge and clear interrupt flag */
	I2C->TWCR=(1<<I2C_TWEA_BIT)|(1<<I2C_TWINT_BIT)|(1<<I2C_TWEN_BIT);
    22a0:	e0 e2       	ldi	r30, 0x20	; 32
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	84 ec       	ldi	r24, 0xC4	; 196
    22a6:	86 ab       	std	Z+54, r24	; 0x36
	/* Wait until TWI finish sending Data */
	while (!(I2C->TWCR & (1<<I2C_TWINT_BIT)));
    22a8:	e0 e2       	ldi	r30, 0x20	; 32
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	86 a9       	ldd	r24, Z+54	; 0x36
    22ae:	88 23       	and	r24, r24
    22b0:	dc f7       	brge	.-10     	; 0x22a8 <M_I2C_voidReceiveByte_ACK+0x16>
	/* Return recieved Data */
	*Copy_Byte_ACK = I2C->TWDR ;
    22b2:	e0 e2       	ldi	r30, 0x20	; 32
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	83 81       	ldd	r24, Z+3	; 0x03
    22b8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ba:	fa 81       	ldd	r31, Y+2	; 0x02
    22bc:	80 83       	st	Z, r24
	
}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <M_I2C_voidReceiveByte_NOACK>:
/*********************************************************************************/
/*********************************************************************************/
void M_I2C_voidReceiveByte_NOACK(u8 * Copy_Byte_NOACK)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <M_I2C_voidReceiveByte_NOACK+0x6>
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01
	/* Enable TWI and clear interrupt flag */
	I2C->TWCR=(1<<I2C_TWINT_BIT)|(1<<I2C_TWEN_BIT);
    22d6:	e0 e2       	ldi	r30, 0x20	; 32
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	84 e8       	ldi	r24, 0x84	; 132
    22dc:	86 ab       	std	Z+54, r24	; 0x36
	/* Wait until TWI finish sending Data */
	while (!(I2C->TWCR & (1<<I2C_TWINT_BIT)));
    22de:	e0 e2       	ldi	r30, 0x20	; 32
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	86 a9       	ldd	r24, Z+54	; 0x36
    22e4:	88 23       	and	r24, r24
    22e6:	dc f7       	brge	.-10     	; 0x22de <M_I2C_voidReceiveByte_NOACK+0x16>
	/* Return recieved Data */
	*Copy_Byte_NOACK = I2C->TWDR;
    22e8:	e0 e2       	ldi	r30, 0x20	; 32
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	83 81       	ldd	r24, Z+3	; 0x03
    22ee:	e9 81       	ldd	r30, Y+1	; 0x01
    22f0:	fa 81       	ldd	r31, Y+2	; 0x02
    22f2:	80 83       	st	Z, r24
	
	
}
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <M_I2C_voidGetStatus>:
/*********************************************************************************/
/*********************************************************************************/
void M_I2C_voidGetStatus(I2C_STATUS_t * Copy_Status)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <M_I2C_voidGetStatus+0x6>
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	89 83       	std	Y+1, r24	; 0x01
	// Read status and Mask the prescaler bits
	*Copy_Status = (I2C->TWSR & I2C_STATUS_MASK);
    230c:	e0 e2       	ldi	r30, 0x20	; 32
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	81 81       	ldd	r24, Z+1	; 0x01
    2312:	88 7f       	andi	r24, 0xF8	; 248
    2314:	e9 81       	ldd	r30, Y+1	; 0x01
    2316:	fa 81       	ldd	r31, Y+2	; 0x02
    2318:	80 83       	st	Z, r24
}
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <H_LCD_void_Init>:
                    LCD_D7_PORT_PIN	         // 21
				};
				
/*******************************************************************************/
void H_LCD_void_Init(void)
 {
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	6e 97       	sbiw	r28, 0x1e	; 30
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
	/* SET Direction as OUTPUT for RS,RW,EN */
	for(u8 i = 0; i< 6 ; i+=2)
    2338:	1e 8e       	std	Y+30, r1	; 0x1e
    233a:	17 c0       	rjmp	.+46     	; 0x236a <H_LCD_void_Init+0x46>
	{
		DIO_voidSetPinDirection(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],OUTPUT);
    233c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	fc 01       	movw	r30, r24
    2344:	ea 57       	subi	r30, 0x7A	; 122
    2346:	fe 4f       	sbci	r31, 0xFE	; 254
    2348:	20 81       	ld	r18, Z
    234a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	01 96       	adiw	r24, 0x01	; 1
    2352:	fc 01       	movw	r30, r24
    2354:	ea 57       	subi	r30, 0x7A	; 122
    2356:	fe 4f       	sbci	r31, 0xFE	; 254
    2358:	90 81       	ld	r25, Z
    235a:	82 2f       	mov	r24, r18
    235c:	69 2f       	mov	r22, r25
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
				
/*******************************************************************************/
void H_LCD_void_Init(void)
 {
	/* SET Direction as OUTPUT for RS,RW,EN */
	for(u8 i = 0; i< 6 ; i+=2)
    2364:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2366:	8e 5f       	subi	r24, 0xFE	; 254
    2368:	8e 8f       	std	Y+30, r24	; 0x1e
    236a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    236c:	86 30       	cpi	r24, 0x06	; 6
    236e:	30 f3       	brcs	.-52     	; 0x233c <H_LCD_void_Init+0x18>
		H_LCD_void_sendCommand(0b00000110);



	#elif LCD_MODE == MODE_4BIT
	 	for(u8 i = 14; i<22;i+=2)
    2370:	8e e0       	ldi	r24, 0x0E	; 14
    2372:	8d 8f       	std	Y+29, r24	; 0x1d
    2374:	17 c0       	rjmp	.+46     	; 0x23a4 <H_LCD_void_Init+0x80>
		{
			DIO_voidSetPinDirection(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],OUTPUT);
    2376:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2378:	88 2f       	mov	r24, r24
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	fc 01       	movw	r30, r24
    237e:	ea 57       	subi	r30, 0x7A	; 122
    2380:	fe 4f       	sbci	r31, 0xFE	; 254
    2382:	20 81       	ld	r18, Z
    2384:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	01 96       	adiw	r24, 0x01	; 1
    238c:	fc 01       	movw	r30, r24
    238e:	ea 57       	subi	r30, 0x7A	; 122
    2390:	fe 4f       	sbci	r31, 0xFE	; 254
    2392:	90 81       	ld	r25, Z
    2394:	82 2f       	mov	r24, r18
    2396:	69 2f       	mov	r22, r25
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
		H_LCD_void_sendCommand(0b00000110);



	#elif LCD_MODE == MODE_4BIT
	 	for(u8 i = 14; i<22;i+=2)
    239e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23a0:	8e 5f       	subi	r24, 0xFE	; 254
    23a2:	8d 8f       	std	Y+29, r24	; 0x1d
    23a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23a6:	86 31       	cpi	r24, 0x16	; 22
    23a8:	30 f3       	brcs	.-52     	; 0x2376 <H_LCD_void_Init+0x52>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	a8 e4       	ldi	r26, 0x48	; 72
    23b0:	b2 e4       	ldi	r27, 0x42	; 66
    23b2:	89 8f       	std	Y+25, r24	; 0x19
    23b4:	9a 8f       	std	Y+26, r25	; 0x1a
    23b6:	ab 8f       	std	Y+27, r26	; 0x1b
    23b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ba:	69 8d       	ldd	r22, Y+25	; 0x19
    23bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4a e7       	ldi	r20, 0x7A	; 122
    23c8:	55 e4       	ldi	r21, 0x45	; 69
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	8d 8b       	std	Y+21, r24	; 0x15
    23d4:	9e 8b       	std	Y+22, r25	; 0x16
    23d6:	af 8b       	std	Y+23, r26	; 0x17
    23d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23da:	6d 89       	ldd	r22, Y+21	; 0x15
    23dc:	7e 89       	ldd	r23, Y+22	; 0x16
    23de:	8f 89       	ldd	r24, Y+23	; 0x17
    23e0:	98 8d       	ldd	r25, Y+24	; 0x18
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e8       	ldi	r20, 0x80	; 128
    23e8:	5f e3       	ldi	r21, 0x3F	; 63
    23ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ee:	88 23       	and	r24, r24
    23f0:	2c f4       	brge	.+10     	; 0x23fc <H_LCD_void_Init+0xd8>
		__ticks = 1;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9c 8b       	std	Y+20, r25	; 0x14
    23f8:	8b 8b       	std	Y+19, r24	; 0x13
    23fa:	3f c0       	rjmp	.+126    	; 0x247a <H_LCD_void_Init+0x156>
	else if (__tmp > 65535)
    23fc:	6d 89       	ldd	r22, Y+21	; 0x15
    23fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2400:	8f 89       	ldd	r24, Y+23	; 0x17
    2402:	98 8d       	ldd	r25, Y+24	; 0x18
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	3f ef       	ldi	r19, 0xFF	; 255
    2408:	4f e7       	ldi	r20, 0x7F	; 127
    240a:	57 e4       	ldi	r21, 0x47	; 71
    240c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2410:	18 16       	cp	r1, r24
    2412:	4c f5       	brge	.+82     	; 0x2466 <H_LCD_void_Init+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2414:	69 8d       	ldd	r22, Y+25	; 0x19
    2416:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2418:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e2       	ldi	r20, 0x20	; 32
    2422:	51 e4       	ldi	r21, 0x41	; 65
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9c 8b       	std	Y+20, r25	; 0x14
    243a:	8b 8b       	std	Y+19, r24	; 0x13
    243c:	0f c0       	rjmp	.+30     	; 0x245c <H_LCD_void_Init+0x138>
    243e:	80 e9       	ldi	r24, 0x90	; 144
    2440:	91 e0       	ldi	r25, 0x01	; 1
    2442:	9a 8b       	std	Y+18, r25	; 0x12
    2444:	89 8b       	std	Y+17, r24	; 0x11
    2446:	89 89       	ldd	r24, Y+17	; 0x11
    2448:	9a 89       	ldd	r25, Y+18	; 0x12
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <H_LCD_void_Init+0x126>
    244e:	9a 8b       	std	Y+18, r25	; 0x12
    2450:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2452:	8b 89       	ldd	r24, Y+19	; 0x13
    2454:	9c 89       	ldd	r25, Y+20	; 0x14
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	9c 8b       	std	Y+20, r25	; 0x14
    245a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245c:	8b 89       	ldd	r24, Y+19	; 0x13
    245e:	9c 89       	ldd	r25, Y+20	; 0x14
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	69 f7       	brne	.-38     	; 0x243e <H_LCD_void_Init+0x11a>
    2464:	14 c0       	rjmp	.+40     	; 0x248e <H_LCD_void_Init+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2466:	6d 89       	ldd	r22, Y+21	; 0x15
    2468:	7e 89       	ldd	r23, Y+22	; 0x16
    246a:	8f 89       	ldd	r24, Y+23	; 0x17
    246c:	98 8d       	ldd	r25, Y+24	; 0x18
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9c 8b       	std	Y+20, r25	; 0x14
    2478:	8b 8b       	std	Y+19, r24	; 0x13
    247a:	8b 89       	ldd	r24, Y+19	; 0x13
    247c:	9c 89       	ldd	r25, Y+20	; 0x14
    247e:	98 8b       	std	Y+16, r25	; 0x10
    2480:	8f 87       	std	Y+15, r24	; 0x0f
    2482:	8f 85       	ldd	r24, Y+15	; 0x0f
    2484:	98 89       	ldd	r25, Y+16	; 0x10
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <H_LCD_void_Init+0x162>
    248a:	98 8b       	std	Y+16, r25	; 0x10
    248c:	8f 87       	std	Y+15, r24	; 0x0f
		
		// LCD Initialization
		_delay_ms(50);

		// Function Set
		H_LCD_void_sendCommand(0b00110011);
    248e:	83 e3       	ldi	r24, 0x33	; 51
    2490:	0e 94 0f 13 	call	0x261e	; 0x261e <H_LCD_void_sendCommand>
		H_LCD_void_sendCommand(0b00110010);
    2494:	82 e3       	ldi	r24, 0x32	; 50
    2496:	0e 94 0f 13 	call	0x261e	; 0x261e <H_LCD_void_sendCommand>
			#if   LCD_LINE == ONE_LINE
				H_LCD_void_sendCommand(0b00100011);
			#elif LCD_LINE == TWO_LINE
				H_LCD_void_sendCommand(0b00101011);
			#elif LCD_LINE == FOUR_LINE
				H_LCD_void_sendCommand(0b00101011);
    249a:	8b e2       	ldi	r24, 0x2B	; 43
    249c:	0e 94 0f 13 	call	0x261e	; 0x261e <H_LCD_void_sendCommand>
		#elif LCD_FONT == FONT_5X10
			H_LCD_void_sendCommand(0b00100111);
		#endif

		// Display ON-OFF Controll => ON
		H_LCD_void_sendCommand(0b00001100);
    24a0:	8c e0       	ldi	r24, 0x0C	; 12
    24a2:	0e 94 0f 13 	call	0x261e	; 0x261e <H_LCD_void_sendCommand>

		//Display Clear
		H_LCD_void_sendCommand(0b00000001);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	0e 94 0f 13 	call	0x261e	; 0x261e <H_LCD_void_sendCommand>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a0 e8       	ldi	r26, 0x80	; 128
    24b2:	bf e3       	ldi	r27, 0x3F	; 63
    24b4:	8b 87       	std	Y+11, r24	; 0x0b
    24b6:	9c 87       	std	Y+12, r25	; 0x0c
    24b8:	ad 87       	std	Y+13, r26	; 0x0d
    24ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	4a e7       	ldi	r20, 0x7A	; 122
    24ca:	55 e4       	ldi	r21, 0x45	; 69
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	8f 83       	std	Y+7, r24	; 0x07
    24d6:	98 87       	std	Y+8, r25	; 0x08
    24d8:	a9 87       	std	Y+9, r26	; 0x09
    24da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	2c f4       	brge	.+10     	; 0x24fe <H_LCD_void_Init+0x1da>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	3f c0       	rjmp	.+126    	; 0x257c <H_LCD_void_Init+0x258>
	else if (__tmp > 65535)
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	3f ef       	ldi	r19, 0xFF	; 255
    250a:	4f e7       	ldi	r20, 0x7F	; 127
    250c:	57 e4       	ldi	r21, 0x47	; 71
    250e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2512:	18 16       	cp	r1, r24
    2514:	4c f5       	brge	.+82     	; 0x2568 <H_LCD_void_Init+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2516:	6b 85       	ldd	r22, Y+11	; 0x0b
    2518:	7c 85       	ldd	r23, Y+12	; 0x0c
    251a:	8d 85       	ldd	r24, Y+13	; 0x0d
    251c:	9e 85       	ldd	r25, Y+14	; 0x0e
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e2       	ldi	r20, 0x20	; 32
    2524:	51 e4       	ldi	r21, 0x41	; 65
    2526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9e 83       	std	Y+6, r25	; 0x06
    253c:	8d 83       	std	Y+5, r24	; 0x05
    253e:	0f c0       	rjmp	.+30     	; 0x255e <H_LCD_void_Init+0x23a>
    2540:	80 e9       	ldi	r24, 0x90	; 144
    2542:	91 e0       	ldi	r25, 0x01	; 1
    2544:	9c 83       	std	Y+4, r25	; 0x04
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <H_LCD_void_Init+0x228>
    2550:	9c 83       	std	Y+4, r25	; 0x04
    2552:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	69 f7       	brne	.-38     	; 0x2540 <H_LCD_void_Init+0x21c>
    2566:	14 c0       	rjmp	.+40     	; 0x2590 <H_LCD_void_Init+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2568:	6f 81       	ldd	r22, Y+7	; 0x07
    256a:	78 85       	ldd	r23, Y+8	; 0x08
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <H_LCD_void_Init+0x264>
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01
		
		_delay_ms(1);
		
		//Entry Mode Set  >> I/D=1 & S=0
		H_LCD_void_sendCommand(0b00000110);
    2590:	86 e0       	ldi	r24, 0x06	; 6
    2592:	0e 94 0f 13 	call	0x261e	; 0x261e <H_LCD_void_sendCommand>


	#endif
	
 }
    2596:	6e 96       	adiw	r28, 0x1e	; 30
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <H_LCD_void_sendData>:




void H_LCD_void_sendData(u8 copy_u8data)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	0f 92       	push	r0
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	89 83       	std	Y+1, r24	; 0x01
    // Write Data => RS = 1
    DIO_voidSetPinValue(LCD_RS_PORT_PIN, HIGH);
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	63 e0       	ldi	r22, 0x03	; 3
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPinValue>

    // Send Data to Latch Function
    H_LCD_void_latchByte(copy_u8data);
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <H_LCD_void_latchByte>

    // Update the current position
    Global_u8Current_col++;
    25c4:	80 91 9d 01 	lds	r24, 0x019D
    25c8:	8f 5f       	subi	r24, 0xFF	; 255
    25ca:	80 93 9d 01 	sts	0x019D, r24

    if (Global_u8Current_col >= LCD_COLUMNS)
    25ce:	80 91 9d 01 	lds	r24, 0x019D
    25d2:	84 31       	cpi	r24, 0x14	; 20
    25d4:	00 f1       	brcs	.+64     	; 0x2616 <H_LCD_void_sendData+0x6e>
    {
        Global_u8Current_col = 0;  // Reset column
    25d6:	10 92 9d 01 	sts	0x019D, r1
        if (Global_u8Current_line < (LCD_ROW - 1))  // Check if not on the last line
    25da:	80 91 9c 01 	lds	r24, 0x019C
    25de:	83 30       	cpi	r24, 0x03	; 3
    25e0:	30 f4       	brcc	.+12     	; 0x25ee <H_LCD_void_sendData+0x46>
        {
            Global_u8Current_line++;   // Move to the next line
    25e2:	80 91 9c 01 	lds	r24, 0x019C
    25e6:	8f 5f       	subi	r24, 0xFF	; 255
    25e8:	80 93 9c 01 	sts	0x019C, r24
    25ec:	0d c0       	rjmp	.+26     	; 0x2608 <H_LCD_void_sendData+0x60>
        }
        else if(Global_u8Current_line == (LCD_ROW - 1))
    25ee:	80 91 9c 01 	lds	r24, 0x019C
    25f2:	83 30       	cpi	r24, 0x03	; 3
    25f4:	31 f4       	brne	.+12     	; 0x2602 <H_LCD_void_sendData+0x5a>
        {
        	Global_u8Current_line = 0;
    25f6:	10 92 9c 01 	sts	0x019C, r1
            H_LCD_void_sendCommand(LCD_CLEAR);  // Clear the LCD
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	0e 94 0f 13 	call	0x261e	; 0x261e <H_LCD_void_sendCommand>
    2600:	03 c0       	rjmp	.+6      	; 0x2608 <H_LCD_void_sendData+0x60>

        }
        else
        {
            // If the cursor is on the last line, don't wrap, stay on the last line
            Global_u8Current_col = LCD_COLUMNS  ;
    2602:	84 e1       	ldi	r24, 0x14	; 20
    2604:	80 93 9d 01 	sts	0x019D, r24
        }

        // Set the cursor position for the next line
        H_LCD_void_gotoXY(Global_u8Current_line, Global_u8Current_col);
    2608:	80 91 9c 01 	lds	r24, 0x019C
    260c:	90 91 9d 01 	lds	r25, 0x019D
    2610:	69 2f       	mov	r22, r25
    2612:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <H_LCD_void_gotoXY>
    }



}
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <H_LCD_void_sendCommand>:


void H_LCD_void_sendCommand(u8 copy_u8command)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	0f 92       	push	r0
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	89 83       	std	Y+1, r24	; 0x01
	// Write Instruction => RS = 0
	DIO_voidSetPinValue(LCD_RS_PORT_PIN,LOW);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	63 e0       	ldi	r22, 0x03	; 3
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPinValue>
	

	// Send Data to Latch Function
	H_LCD_void_latchByte(copy_u8command);
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <H_LCD_void_latchByte>

}
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <H_LCD_void_sendString>:

void H_LCD_void_sendString(const s8 *pstr)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	00 d0       	rcall	.+0      	; 0x2648 <H_LCD_void_sendString+0x6>
    2648:	0f 92       	push	r0
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	9b 83       	std	Y+3, r25	; 0x03
    2650:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    2652:	19 82       	std	Y+1, r1	; 0x01
    2654:	0e c0       	rjmp	.+28     	; 0x2672 <H_LCD_void_sendString+0x30>
    while (pstr[Local_u8Counter] != '\0')
    {
        H_LCD_void_sendData(pstr[Local_u8Counter]);
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	9b 81       	ldd	r25, Y+3	; 0x03
    2660:	fc 01       	movw	r30, r24
    2662:	e2 0f       	add	r30, r18
    2664:	f3 1f       	adc	r31, r19
    2666:	80 81       	ld	r24, Z
    2668:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>
        Local_u8Counter++;
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	8f 5f       	subi	r24, 0xFF	; 255
    2670:	89 83       	std	Y+1, r24	; 0x01
}

void H_LCD_void_sendString(const s8 *pstr)
{
	u8 Local_u8Counter = 0;
    while (pstr[Local_u8Counter] != '\0')
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	9b 81       	ldd	r25, Y+3	; 0x03
    267c:	fc 01       	movw	r30, r24
    267e:	e2 0f       	add	r30, r18
    2680:	f3 1f       	adc	r31, r19
    2682:	80 81       	ld	r24, Z
    2684:	88 23       	and	r24, r24
    2686:	39 f7       	brne	.-50     	; 0x2656 <H_LCD_void_sendString+0x14>
    {
        H_LCD_void_sendData(pstr[Local_u8Counter]);
        Local_u8Counter++;
    }
    Global_u8Current_col -= 1 ;
    2688:	80 91 9d 01 	lds	r24, 0x019D
    268c:	81 50       	subi	r24, 0x01	; 1
    268e:	80 93 9d 01 	sts	0x019D, r24
}
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <H_LCD_void_ShiftString>:
    }
}
*/

void H_LCD_void_ShiftString(const s8 *pstr, u8 copy_u8lineNumber)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <H_LCD_void_ShiftString+0x6>
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <H_LCD_void_ShiftString+0x8>
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	9b 83       	std	Y+3, r25	; 0x03
    26ac:	8a 83       	std	Y+2, r24	; 0x02
    26ae:	6c 83       	std	Y+4, r22	; 0x04
	static u8 i = 0 ;
	static u8 j = 0 ;

    if (copy_u8lineNumber < LCD_ROW)
    26b0:	8c 81       	ldd	r24, Y+4	; 0x04
    26b2:	84 30       	cpi	r24, 0x04	; 4
    26b4:	08 f0       	brcs	.+2      	; 0x26b8 <H_LCD_void_ShiftString+0x1a>
    26b6:	4c c0       	rjmp	.+152    	; 0x2750 <H_LCD_void_ShiftString+0xb2>
    {
         u8 strLen = 0;
    26b8:	19 82       	std	Y+1, r1	; 0x01
    26ba:	03 c0       	rjmp	.+6      	; 0x26c2 <H_LCD_void_ShiftString+0x24>
         // Calculate the string length manually
         while (pstr[strLen] != '\0')
         {
             strLen++;
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	8f 5f       	subi	r24, 0xFF	; 255
    26c0:	89 83       	std	Y+1, r24	; 0x01

    if (copy_u8lineNumber < LCD_ROW)
    {
         u8 strLen = 0;
         // Calculate the string length manually
         while (pstr[strLen] != '\0')
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	9b 81       	ldd	r25, Y+3	; 0x03
    26cc:	fc 01       	movw	r30, r24
    26ce:	e2 0f       	add	r30, r18
    26d0:	f3 1f       	adc	r31, r19
    26d2:	80 81       	ld	r24, Z
    26d4:	88 23       	and	r24, r24
    26d6:	91 f7       	brne	.-28     	; 0x26bc <H_LCD_void_ShiftString+0x1e>
         {
             strLen++;
         }

        if (i >= (LCD_COLUMNS-strLen-j))
    26d8:	80 91 9f 01 	lds	r24, 0x019F
    26dc:	48 2f       	mov	r20, r24
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	84 e1       	ldi	r24, 0x14	; 20
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	bc 01       	movw	r22, r24
    26ec:	62 1b       	sub	r22, r18
    26ee:	73 0b       	sbc	r23, r19
    26f0:	9b 01       	movw	r18, r22
    26f2:	80 91 9e 01 	lds	r24, 0x019E
    26f6:	88 2f       	mov	r24, r24
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	b9 01       	movw	r22, r18
    26fc:	68 1b       	sub	r22, r24
    26fe:	79 0b       	sbc	r23, r25
    2700:	cb 01       	movw	r24, r22
    2702:	48 17       	cp	r20, r24
    2704:	59 07       	cpc	r21, r25
    2706:	2c f0       	brlt	.+10     	; 0x2712 <H_LCD_void_ShiftString+0x74>
        {
            i = 0;  // Start from the beginning when reaching the end
    2708:	10 92 9f 01 	sts	0x019F, r1
            H_LCD_void_clearLine(copy_u8lineNumber);
    270c:	8c 81       	ldd	r24, Y+4	; 0x04
    270e:	0e 94 af 13 	call	0x275e	; 0x275e <H_LCD_void_clearLine>
        }
        H_LCD_void_gotoXY(copy_u8lineNumber,i++);
    2712:	80 91 9f 01 	lds	r24, 0x019F
    2716:	98 2f       	mov	r25, r24
    2718:	8f 5f       	subi	r24, 0xFF	; 255
    271a:	80 93 9f 01 	sts	0x019F, r24
    271e:	8c 81       	ldd	r24, Y+4	; 0x04
    2720:	69 2f       	mov	r22, r25
    2722:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <H_LCD_void_gotoXY>
        for(j = 0 ; j < i ;j++)
    2726:	10 92 9e 01 	sts	0x019E, r1
    272a:	08 c0       	rjmp	.+16     	; 0x273c <H_LCD_void_ShiftString+0x9e>
        {
        	H_LCD_void_sendData(' ');
    272c:	80 e2       	ldi	r24, 0x20	; 32
    272e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>
        {
            i = 0;  // Start from the beginning when reaching the end
            H_LCD_void_clearLine(copy_u8lineNumber);
        }
        H_LCD_void_gotoXY(copy_u8lineNumber,i++);
        for(j = 0 ; j < i ;j++)
    2732:	80 91 9e 01 	lds	r24, 0x019E
    2736:	8f 5f       	subi	r24, 0xFF	; 255
    2738:	80 93 9e 01 	sts	0x019E, r24
    273c:	90 91 9e 01 	lds	r25, 0x019E
    2740:	80 91 9f 01 	lds	r24, 0x019F
    2744:	98 17       	cp	r25, r24
    2746:	90 f3       	brcs	.-28     	; 0x272c <H_LCD_void_ShiftString+0x8e>
        {
        	H_LCD_void_sendData(' ');
        }
        H_LCD_void_sendString(pstr);
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	9b 81       	ldd	r25, Y+3	; 0x03
    274c:	0e 94 21 13 	call	0x2642	; 0x2642 <H_LCD_void_sendString>
    }
}
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <H_LCD_void_clearLine>:




void H_LCD_void_clearLine(u8 copy_u8lineNumber)
{
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	00 d0       	rcall	.+0      	; 0x2764 <H_LCD_void_clearLine+0x6>
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
    2768:	8a 83       	std	Y+2, r24	; 0x02
    if (copy_u8lineNumber < LCD_ROW)
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	84 30       	cpi	r24, 0x04	; 4
    276e:	98 f4       	brcc	.+38     	; 0x2796 <H_LCD_void_clearLine+0x38>
    {
        H_LCD_void_gotoXY(copy_u8lineNumber, 0);  // Move to the beginning of the line
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <H_LCD_void_gotoXY>
        for (u8 i = 0; i < LCD_COLUMNS; i++)
    2778:	19 82       	std	Y+1, r1	; 0x01
    277a:	06 c0       	rjmp	.+12     	; 0x2788 <H_LCD_void_clearLine+0x2a>
        {
            H_LCD_void_sendData(' ');  // Send space character to clear the line
    277c:	80 e2       	ldi	r24, 0x20	; 32
    277e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>
void H_LCD_void_clearLine(u8 copy_u8lineNumber)
{
    if (copy_u8lineNumber < LCD_ROW)
    {
        H_LCD_void_gotoXY(copy_u8lineNumber, 0);  // Move to the beginning of the line
        for (u8 i = 0; i < LCD_COLUMNS; i++)
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	84 31       	cpi	r24, 0x14	; 20
    278c:	b8 f3       	brcs	.-18     	; 0x277c <H_LCD_void_clearLine+0x1e>
        {
            H_LCD_void_sendData(' ');  // Send space character to clear the line
        }
        H_LCD_void_gotoXY(copy_u8lineNumber, 0);  // Move to the beginning of the line
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <H_LCD_void_gotoXY>
    }
}
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <H_LCD_void_gotoXY>:

void H_LCD_void_gotoXY(u8 copy_u8Row, u8 copy_u8Col)
{
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	27 97       	sbiw	r28, 0x07	; 7
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	8e 83       	std	Y+6, r24	; 0x06
    27b6:	6f 83       	std	Y+7, r22	; 0x07
    Global_u8Current_line = copy_u8Row;
    27b8:	8e 81       	ldd	r24, Y+6	; 0x06
    27ba:	80 93 9c 01 	sts	0x019C, r24
    Global_u8Current_col  = copy_u8Col;
    27be:	8f 81       	ldd	r24, Y+7	; 0x07
    27c0:	80 93 9d 01 	sts	0x019D, r24

    // Calculate the position for a 4x20 LCD (modify as needed for your specific LCD)
    u8 row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    27c4:	1a 82       	std	Y+2, r1	; 0x02
    27c6:	80 e4       	ldi	r24, 0x40	; 64
    27c8:	8b 83       	std	Y+3, r24	; 0x03
    27ca:	84 e1       	ldi	r24, 0x14	; 20
    27cc:	8c 83       	std	Y+4, r24	; 0x04
    27ce:	84 e5       	ldi	r24, 0x54	; 84
    27d0:	8d 83       	std	Y+5, r24	; 0x05
    u8 position = copy_u8Col + row_offsets[copy_u8Row];
    27d2:	8e 81       	ldd	r24, Y+6	; 0x06
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	ce 01       	movw	r24, r28
    27da:	02 96       	adiw	r24, 0x02	; 2
    27dc:	fc 01       	movw	r30, r24
    27de:	e2 0f       	add	r30, r18
    27e0:	f3 1f       	adc	r31, r19
    27e2:	90 81       	ld	r25, Z
    27e4:	8f 81       	ldd	r24, Y+7	; 0x07
    27e6:	89 0f       	add	r24, r25
    27e8:	89 83       	std	Y+1, r24	; 0x01

    // Send the command to set the cursor position
    H_LCD_void_sendCommand(0x80 | position);
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	80 68       	ori	r24, 0x80	; 128
    27ee:	0e 94 0f 13 	call	0x261e	; 0x261e <H_LCD_void_sendCommand>
}
    27f2:	27 96       	adiw	r28, 0x07	; 7
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <H_LCD_void_sendIntNum>:


void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	62 97       	sbiw	r28, 0x12	; 18
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	6f 87       	std	Y+15, r22	; 0x0f
    281e:	78 8b       	std	Y+16, r23	; 0x10
    2820:	89 8b       	std	Y+17, r24	; 0x11
    2822:	9a 8b       	std	Y+18, r25	; 0x12
		// Buffer to store the digits as characters
	    s8 buffer[12];  // Assuming a 32-bit number, which can have up to 11 digits

	    // Check for negative numbers
	    if (copy_s32Num < 0)
    2824:	8f 85       	ldd	r24, Y+15	; 0x0f
    2826:	98 89       	ldd	r25, Y+16	; 0x10
    2828:	a9 89       	ldd	r26, Y+17	; 0x11
    282a:	ba 89       	ldd	r27, Y+18	; 0x12
    282c:	bb 23       	and	r27, r27
    282e:	94 f4       	brge	.+36     	; 0x2854 <H_LCD_void_sendIntNum+0x50>
	    {
	        H_LCD_void_sendData('-');  // Display a minus sign for negative numbers
    2830:	8d e2       	ldi	r24, 0x2D	; 45
    2832:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>
	        copy_s32Num = -copy_s32Num;  // Make the number positive for processing
    2836:	8f 85       	ldd	r24, Y+15	; 0x0f
    2838:	98 89       	ldd	r25, Y+16	; 0x10
    283a:	a9 89       	ldd	r26, Y+17	; 0x11
    283c:	ba 89       	ldd	r27, Y+18	; 0x12
    283e:	b0 95       	com	r27
    2840:	a0 95       	com	r26
    2842:	90 95       	com	r25
    2844:	81 95       	neg	r24
    2846:	9f 4f       	sbci	r25, 0xFF	; 255
    2848:	af 4f       	sbci	r26, 0xFF	; 255
    284a:	bf 4f       	sbci	r27, 0xFF	; 255
    284c:	8f 87       	std	Y+15, r24	; 0x0f
    284e:	98 8b       	std	Y+16, r25	; 0x10
    2850:	a9 8b       	std	Y+17, r26	; 0x11
    2852:	ba 8b       	std	Y+18, r27	; 0x12
	    }

	    // Handle the case of a number being zero
	    if (copy_s32Num == 0) {
    2854:	8f 85       	ldd	r24, Y+15	; 0x0f
    2856:	98 89       	ldd	r25, Y+16	; 0x10
    2858:	a9 89       	ldd	r26, Y+17	; 0x11
    285a:	ba 89       	ldd	r27, Y+18	; 0x12
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	a1 05       	cpc	r26, r1
    2860:	b1 05       	cpc	r27, r1
    2862:	21 f4       	brne	.+8      	; 0x286c <H_LCD_void_sendIntNum+0x68>
	        H_LCD_void_sendData('0');
    2864:	80 e3       	ldi	r24, 0x30	; 48
    2866:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>
    286a:	50 c0       	rjmp	.+160    	; 0x290c <H_LCD_void_sendIntNum+0x108>
	        return;
	    }

	    // Convert the number to a string in reverse order
	    u8 index = 0;
    286c:	1a 82       	std	Y+2, r1	; 0x02
    286e:	2e c0       	rjmp	.+92     	; 0x28cc <H_LCD_void_sendIntNum+0xc8>
	    while (copy_s32Num > 0)
	    {
	        buffer[index++] = '0' + (copy_s32Num % 10);  // Convert the digit to a character
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	08 2f       	mov	r16, r24
    2874:	10 e0       	ldi	r17, 0x00	; 0
    2876:	8f 85       	ldd	r24, Y+15	; 0x0f
    2878:	98 89       	ldd	r25, Y+16	; 0x10
    287a:	a9 89       	ldd	r26, Y+17	; 0x11
    287c:	ba 89       	ldd	r27, Y+18	; 0x12
    287e:	2a e0       	ldi	r18, 0x0A	; 10
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e0       	ldi	r20, 0x00	; 0
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 49 18 	call	0x3092	; 0x3092 <__divmodsi4>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	80 5d       	subi	r24, 0xD0	; 208
    2894:	28 2f       	mov	r18, r24
    2896:	ce 01       	movw	r24, r28
    2898:	03 96       	adiw	r24, 0x03	; 3
    289a:	fc 01       	movw	r30, r24
    289c:	e0 0f       	add	r30, r16
    289e:	f1 1f       	adc	r31, r17
    28a0:	20 83       	st	Z, r18
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	8f 5f       	subi	r24, 0xFF	; 255
    28a6:	8a 83       	std	Y+2, r24	; 0x02
	        copy_s32Num /= 10;  // Remove the last digit
    28a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28aa:	98 89       	ldd	r25, Y+16	; 0x10
    28ac:	a9 89       	ldd	r26, Y+17	; 0x11
    28ae:	ba 89       	ldd	r27, Y+18	; 0x12
    28b0:	2a e0       	ldi	r18, 0x0A	; 10
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	50 e0       	ldi	r21, 0x00	; 0
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 49 18 	call	0x3092	; 0x3092 <__divmodsi4>
    28c0:	da 01       	movw	r26, r20
    28c2:	c9 01       	movw	r24, r18
    28c4:	8f 87       	std	Y+15, r24	; 0x0f
    28c6:	98 8b       	std	Y+16, r25	; 0x10
    28c8:	a9 8b       	std	Y+17, r26	; 0x11
    28ca:	ba 8b       	std	Y+18, r27	; 0x12
	        return;
	    }

	    // Convert the number to a string in reverse order
	    u8 index = 0;
	    while (copy_s32Num > 0)
    28cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ce:	98 89       	ldd	r25, Y+16	; 0x10
    28d0:	a9 89       	ldd	r26, Y+17	; 0x11
    28d2:	ba 89       	ldd	r27, Y+18	; 0x12
    28d4:	18 16       	cp	r1, r24
    28d6:	19 06       	cpc	r1, r25
    28d8:	1a 06       	cpc	r1, r26
    28da:	1b 06       	cpc	r1, r27
    28dc:	4c f2       	brlt	.-110    	; 0x2870 <H_LCD_void_sendIntNum+0x6c>
	        buffer[index++] = '0' + (copy_s32Num % 10);  // Convert the digit to a character
	        copy_s32Num /= 10;  // Remove the last digit
	    }

	    // Send the string to the LCD in reverse order
	    for (s8 i = index - 1; i >= 0; i--)
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	81 50       	subi	r24, 0x01	; 1
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	10 c0       	rjmp	.+32     	; 0x2906 <H_LCD_void_sendIntNum+0x102>
	    {
	        H_LCD_void_sendData(buffer[i]);
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	28 2f       	mov	r18, r24
    28ea:	33 27       	eor	r19, r19
    28ec:	27 fd       	sbrc	r18, 7
    28ee:	30 95       	com	r19
    28f0:	ce 01       	movw	r24, r28
    28f2:	03 96       	adiw	r24, 0x03	; 3
    28f4:	fc 01       	movw	r30, r24
    28f6:	e2 0f       	add	r30, r18
    28f8:	f3 1f       	adc	r31, r19
    28fa:	80 81       	ld	r24, Z
    28fc:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>
	        buffer[index++] = '0' + (copy_s32Num % 10);  // Convert the digit to a character
	        copy_s32Num /= 10;  // Remove the last digit
	    }

	    // Send the string to the LCD in reverse order
	    for (s8 i = index - 1; i >= 0; i--)
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	81 50       	subi	r24, 0x01	; 1
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	88 23       	and	r24, r24
    290a:	6c f7       	brge	.-38     	; 0x28e6 <H_LCD_void_sendIntNum+0xe2>
	    {
	        H_LCD_void_sendData(buffer[i]);
	    }
	}
    290c:	62 96       	adiw	r28, 0x12	; 18
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	08 95       	ret

00002922 <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 *ArrPattern, u8 copy_u8charCode)
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	00 d0       	rcall	.+0      	; 0x2928 <H_LCD_void_creatCustomChar+0x6>
    2928:	00 d0       	rcall	.+0      	; 0x292a <H_LCD_void_creatCustomChar+0x8>
    292a:	00 d0       	rcall	.+0      	; 0x292c <H_LCD_void_creatCustomChar+0xa>
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
    2930:	9d 83       	std	Y+5, r25	; 0x05
    2932:	8c 83       	std	Y+4, r24	; 0x04
    2934:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_u8Temp_Line = Global_u8Current_line;
    2936:	80 91 9c 01 	lds	r24, 0x019C
    293a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Temp_Col =  Global_u8Current_col;
    293c:	80 91 9d 01 	lds	r24, 0x019D
    2940:	8a 83       	std	Y+2, r24	; 0x02

    // Set CGRAM address to write the custom character (0 to 7)
    H_LCD_void_sendCommand(0x40 | (copy_u8charCode << 3));
    2942:	8e 81       	ldd	r24, Y+6	; 0x06
    2944:	88 2f       	mov	r24, r24
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	80 64       	ori	r24, 0x40	; 64
    2956:	0e 94 0f 13 	call	0x261e	; 0x261e <H_LCD_void_sendCommand>

    // Send the custom character pattern data
    for (u8 i = 0; i < 8; i++)
    295a:	19 82       	std	Y+1, r1	; 0x01
    295c:	0e c0       	rjmp	.+28     	; 0x297a <H_LCD_void_creatCustomChar+0x58>
    {
        H_LCD_void_sendData(ArrPattern[i]);
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	8c 81       	ldd	r24, Y+4	; 0x04
    2966:	9d 81       	ldd	r25, Y+5	; 0x05
    2968:	fc 01       	movw	r30, r24
    296a:	e2 0f       	add	r30, r18
    296c:	f3 1f       	adc	r31, r19
    296e:	80 81       	ld	r24, Z
    2970:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>

    // Set CGRAM address to write the custom character (0 to 7)
    H_LCD_void_sendCommand(0x40 | (copy_u8charCode << 3));

    // Send the custom character pattern data
    for (u8 i = 0; i < 8; i++)
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	8f 5f       	subi	r24, 0xFF	; 255
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	88 30       	cpi	r24, 0x08	; 8
    297e:	78 f3       	brcs	.-34     	; 0x295e <H_LCD_void_creatCustomChar+0x3c>
    {
        H_LCD_void_sendData(ArrPattern[i]);
    }

    Global_u8Current_line =  Local_u8Temp_Line ;
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	80 93 9c 01 	sts	0x019C, r24
    Global_u8Current_col  =  Local_u8Temp_Col  ;
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	80 93 9d 01 	sts	0x019D, r24

    // Return to the DDRAM address
    H_LCD_void_sendCommand(0x80);
    298c:	80 e8       	ldi	r24, 0x80	; 128
    298e:	0e 94 0f 13 	call	0x261e	; 0x261e <H_LCD_void_sendCommand>
}
    2992:	26 96       	adiw	r28, 0x06	; 6
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	08 95       	ret

000029a4 <H_LCD_void_displayCustomChar>:

void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	0f 92       	push	r0
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	89 83       	std	Y+1, r24	; 0x01

    // Send the custom character using its character code (0 to 7)
    H_LCD_void_sendData(copy_u8charCode);
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>
}
    29b6:	0f 90       	pop	r0
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <H_LCD_void_sendFloat>:


void H_LCD_void_sendFloat(f32 number, u8 decimalPlaces)
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	2b 97       	sbiw	r28, 0x0b	; 11
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	6f 83       	std	Y+7, r22	; 0x07
    29d4:	78 87       	std	Y+8, r23	; 0x08
    29d6:	89 87       	std	Y+9, r24	; 0x09
    29d8:	9a 87       	std	Y+10, r25	; 0x0a
    29da:	4b 87       	std	Y+11, r20	; 0x0b
    // Handle negative numbers
    if (number < 0.0)
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	50 e0       	ldi	r21, 0x00	; 0
    29ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f0:	88 23       	and	r24, r24
    29f2:	64 f4       	brge	.+24     	; 0x2a0c <H_LCD_void_sendFloat+0x4e>
    {
        H_LCD_void_sendData('-');
    29f4:	8d e2       	ldi	r24, 0x2D	; 45
    29f6:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>
        number = -number;
    29fa:	8f 81       	ldd	r24, Y+7	; 0x07
    29fc:	98 85       	ldd	r25, Y+8	; 0x08
    29fe:	a9 85       	ldd	r26, Y+9	; 0x09
    2a00:	ba 85       	ldd	r27, Y+10	; 0x0a
    2a02:	b0 58       	subi	r27, 0x80	; 128
    2a04:	8f 83       	std	Y+7, r24	; 0x07
    2a06:	98 87       	std	Y+8, r25	; 0x08
    2a08:	a9 87       	std	Y+9, r26	; 0x09
    2a0a:	ba 87       	std	Y+10, r27	; 0x0a
    }

    // Extract the integer part
    u32 integerPart = (u32)number;
    2a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0e:	78 85       	ldd	r23, Y+8	; 0x08
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	8b 83       	std	Y+3, r24	; 0x03
    2a1e:	9c 83       	std	Y+4, r25	; 0x04
    2a20:	ad 83       	std	Y+5, r26	; 0x05
    2a22:	be 83       	std	Y+6, r27	; 0x06

    // Convert the integer part to a string
    H_LCD_void_sendIntNum(integerPart);
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	9c 81       	ldd	r25, Y+4	; 0x04
    2a28:	ad 81       	ldd	r26, Y+5	; 0x05
    2a2a:	be 81       	ldd	r27, Y+6	; 0x06
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 02 14 	call	0x2804	; 0x2804 <H_LCD_void_sendIntNum>

    // Handle decimal point
    if (decimalPlaces > 0)
    2a34:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a36:	88 23       	and	r24, r24
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <H_LCD_void_sendFloat+0x7e>
    2a3a:	54 c0       	rjmp	.+168    	; 0x2ae4 <H_LCD_void_sendFloat+0x126>
    {
        H_LCD_void_sendData('.');
    2a3c:	8e e2       	ldi	r24, 0x2E	; 46
    2a3e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>
        number -= (f32)integerPart; // Get the fractional part
    2a42:	6b 81       	ldd	r22, Y+3	; 0x03
    2a44:	7c 81       	ldd	r23, Y+4	; 0x04
    2a46:	8d 81       	ldd	r24, Y+5	; 0x05
    2a48:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2a4e:	9b 01       	movw	r18, r22
    2a50:	ac 01       	movw	r20, r24
    2a52:	6f 81       	ldd	r22, Y+7	; 0x07
    2a54:	78 85       	ldd	r23, Y+8	; 0x08
    2a56:	89 85       	ldd	r24, Y+9	; 0x09
    2a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	8f 83       	std	Y+7, r24	; 0x07
    2a64:	98 87       	std	Y+8, r25	; 0x08
    2a66:	a9 87       	std	Y+9, r26	; 0x09
    2a68:	ba 87       	std	Y+10, r27	; 0x0a

        // Print decimal digits
        for (u8 i = 0; i < decimalPlaces; i++)
    2a6a:	1a 82       	std	Y+2, r1	; 0x02
    2a6c:	37 c0       	rjmp	.+110    	; 0x2adc <H_LCD_void_sendFloat+0x11e>
        {
            number *= 10.0;
    2a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a70:	78 85       	ldd	r23, Y+8	; 0x08
    2a72:	89 85       	ldd	r24, Y+9	; 0x09
    2a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e2       	ldi	r20, 0x20	; 32
    2a7c:	51 e4       	ldi	r21, 0x41	; 65
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	8f 83       	std	Y+7, r24	; 0x07
    2a88:	98 87       	std	Y+8, r25	; 0x08
    2a8a:	a9 87       	std	Y+9, r26	; 0x09
    2a8c:	ba 87       	std	Y+10, r27	; 0x0a
            u8 digit = (u8)number;
    2a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a90:	78 85       	ldd	r23, Y+8	; 0x08
    2a92:	89 85       	ldd	r24, Y+9	; 0x09
    2a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	89 83       	std	Y+1, r24	; 0x01
            H_LCD_void_sendData('0' + digit);
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	80 5d       	subi	r24, 0xD0	; 208
    2aa4:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>
            number -= (f32)digit;
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	88 2f       	mov	r24, r24
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	a0 e0       	ldi	r26, 0x00	; 0
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2aba:	9b 01       	movw	r18, r22
    2abc:	ac 01       	movw	r20, r24
    2abe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac0:	78 85       	ldd	r23, Y+8	; 0x08
    2ac2:	89 85       	ldd	r24, Y+9	; 0x09
    2ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	8f 83       	std	Y+7, r24	; 0x07
    2ad0:	98 87       	std	Y+8, r25	; 0x08
    2ad2:	a9 87       	std	Y+9, r26	; 0x09
    2ad4:	ba 87       	std	Y+10, r27	; 0x0a
    {
        H_LCD_void_sendData('.');
        number -= (f32)integerPart; // Get the fractional part

        // Print decimal digits
        for (u8 i = 0; i < decimalPlaces; i++)
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	8f 5f       	subi	r24, 0xFF	; 255
    2ada:	8a 83       	std	Y+2, r24	; 0x02
    2adc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ade:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ae0:	98 17       	cp	r25, r24
    2ae2:	28 f2       	brcs	.-118    	; 0x2a6e <H_LCD_void_sendFloat+0xb0>
            u8 digit = (u8)number;
            H_LCD_void_sendData('0' + digit);
            number -= (f32)digit;
        }
    }
}
    2ae4:	2b 96       	adiw	r28, 0x0b	; 11
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <H_LCD_void_latchByte>:
/*******************************************************************************/
/*************************    Private Function      ****************************/
/*******************************************************************************/

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{	 
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	c7 54       	subi	r28, 0x47	; 71
    2b00:	d0 40       	sbci	r29, 0x00	; 0
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	8b af       	std	Y+59, r24	; 0x3b
	DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	62 e0       	ldi	r22, 0x02	; 2
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
		_delay_ms(5);

	#elif LCD_MODE == MODE_4BIT

		for(u8 i = 20; i>12;i-=2)
    2b18:	84 e1       	ldi	r24, 0x14	; 20
    2b1a:	8a af       	std	Y+58, r24	; 0x3a
    2b1c:	52 c0       	rjmp	.+164    	; 0x2bc2 <H_LCD_void_latchByte+0xcc>
		{
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-6)/2)));
    2b1e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b20:	88 2f       	mov	r24, r24
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	fc 01       	movw	r30, r24
    2b26:	ea 57       	subi	r30, 0x7A	; 122
    2b28:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2a:	20 81       	ld	r18, Z
    2b2c:	24 96       	adiw	r28, 0x04	; 4
    2b2e:	2f af       	std	Y+63, r18	; 0x3f
    2b30:	24 97       	sbiw	r28, 0x04	; 4
    2b32:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b34:	88 2f       	mov	r24, r24
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	ea 57       	subi	r30, 0x7A	; 122
    2b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b40:	30 81       	ld	r19, Z
    2b42:	23 96       	adiw	r28, 0x03	; 3
    2b44:	3f af       	std	Y+63, r19	; 0x3f
    2b46:	23 97       	sbiw	r28, 0x03	; 3
    2b48:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	22 96       	adiw	r28, 0x02	; 2
    2b50:	3f af       	std	Y+63, r19	; 0x3f
    2b52:	2e af       	std	Y+62, r18	; 0x3e
    2b54:	22 97       	sbiw	r28, 0x02	; 2
    2b56:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b58:	88 2f       	mov	r24, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	06 97       	sbiw	r24, 0x06	; 6
    2b5e:	26 96       	adiw	r28, 0x06	; 6
    2b60:	9f af       	std	Y+63, r25	; 0x3f
    2b62:	8e af       	std	Y+62, r24	; 0x3e
    2b64:	26 97       	sbiw	r28, 0x06	; 6
    2b66:	26 96       	adiw	r28, 0x06	; 6
    2b68:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b6c:	26 97       	sbiw	r28, 0x06	; 6
    2b6e:	99 23       	and	r25, r25
    2b70:	54 f4       	brge	.+20     	; 0x2b86 <H_LCD_void_latchByte+0x90>
    2b72:	26 96       	adiw	r28, 0x06	; 6
    2b74:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b76:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b78:	26 97       	sbiw	r28, 0x06	; 6
    2b7a:	2f 5f       	subi	r18, 0xFF	; 255
    2b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b7e:	26 96       	adiw	r28, 0x06	; 6
    2b80:	3f af       	std	Y+63, r19	; 0x3f
    2b82:	2e af       	std	Y+62, r18	; 0x3e
    2b84:	26 97       	sbiw	r28, 0x06	; 6
    2b86:	26 96       	adiw	r28, 0x06	; 6
    2b88:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b8c:	26 97       	sbiw	r28, 0x06	; 6
    2b8e:	95 95       	asr	r25
    2b90:	87 95       	ror	r24
    2b92:	22 96       	adiw	r28, 0x02	; 2
    2b94:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b96:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b98:	22 97       	sbiw	r28, 0x02	; 2
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <H_LCD_void_latchByte+0xaa>
    2b9c:	35 95       	asr	r19
    2b9e:	27 95       	ror	r18
    2ba0:	8a 95       	dec	r24
    2ba2:	e2 f7       	brpl	.-8      	; 0x2b9c <H_LCD_void_latchByte+0xa6>
    2ba4:	c9 01       	movw	r24, r18
    2ba6:	98 2f       	mov	r25, r24
    2ba8:	91 70       	andi	r25, 0x01	; 1
    2baa:	24 96       	adiw	r28, 0x04	; 4
    2bac:	8f ad       	ldd	r24, Y+63	; 0x3f
    2bae:	24 97       	sbiw	r28, 0x04	; 4
    2bb0:	23 96       	adiw	r28, 0x03	; 3
    2bb2:	6f ad       	ldd	r22, Y+63	; 0x3f
    2bb4:	23 97       	sbiw	r28, 0x03	; 3
    2bb6:	49 2f       	mov	r20, r25
    2bb8:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
		_delay_ms(5);

	#elif LCD_MODE == MODE_4BIT

		for(u8 i = 20; i>12;i-=2)
    2bbc:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bbe:	82 50       	subi	r24, 0x02	; 2
    2bc0:	8a af       	std	Y+58, r24	; 0x3a
    2bc2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bc4:	8d 30       	cpi	r24, 0x0D	; 13
    2bc6:	08 f0       	brcs	.+2      	; 0x2bca <H_LCD_void_latchByte+0xd4>
    2bc8:	aa cf       	rjmp	.-172    	; 0x2b1e <H_LCD_void_latchByte+0x28>
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-6)/2)));
		}

		// Falling Edge
		// Set Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,HIGH);
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	62 e0       	ldi	r22, 0x02	; 2
    2bce:	41 e0       	ldi	r20, 0x01	; 1
    2bd0:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPinValue>
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	a0 e8       	ldi	r26, 0x80	; 128
    2bda:	bf e3       	ldi	r27, 0x3F	; 63
    2bdc:	8d ab       	std	Y+53, r24	; 0x35
    2bde:	9e ab       	std	Y+54, r25	; 0x36
    2be0:	af ab       	std	Y+55, r26	; 0x37
    2be2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be4:	6d a9       	ldd	r22, Y+53	; 0x35
    2be6:	7e a9       	ldd	r23, Y+54	; 0x36
    2be8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bea:	98 ad       	ldd	r25, Y+56	; 0x38
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	4a e7       	ldi	r20, 0x7A	; 122
    2bf2:	55 e4       	ldi	r21, 0x45	; 69
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	89 ab       	std	Y+49, r24	; 0x31
    2bfe:	9a ab       	std	Y+50, r25	; 0x32
    2c00:	ab ab       	std	Y+51, r26	; 0x33
    2c02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c04:	69 a9       	ldd	r22, Y+49	; 0x31
    2c06:	7a a9       	ldd	r23, Y+50	; 0x32
    2c08:	8b a9       	ldd	r24, Y+51	; 0x33
    2c0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e8       	ldi	r20, 0x80	; 128
    2c12:	5f e3       	ldi	r21, 0x3F	; 63
    2c14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c18:	88 23       	and	r24, r24
    2c1a:	2c f4       	brge	.+10     	; 0x2c26 <H_LCD_void_latchByte+0x130>
		__ticks = 1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	98 ab       	std	Y+48, r25	; 0x30
    2c22:	8f a7       	std	Y+47, r24	; 0x2f
    2c24:	3f c0       	rjmp	.+126    	; 0x2ca4 <H_LCD_void_latchByte+0x1ae>
	else if (__tmp > 65535)
    2c26:	69 a9       	ldd	r22, Y+49	; 0x31
    2c28:	7a a9       	ldd	r23, Y+50	; 0x32
    2c2a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c2c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	3f ef       	ldi	r19, 0xFF	; 255
    2c32:	4f e7       	ldi	r20, 0x7F	; 127
    2c34:	57 e4       	ldi	r21, 0x47	; 71
    2c36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c3a:	18 16       	cp	r1, r24
    2c3c:	4c f5       	brge	.+82     	; 0x2c90 <H_LCD_void_latchByte+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c40:	7e a9       	ldd	r23, Y+54	; 0x36
    2c42:	8f a9       	ldd	r24, Y+55	; 0x37
    2c44:	98 ad       	ldd	r25, Y+56	; 0x38
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e2       	ldi	r20, 0x20	; 32
    2c4c:	51 e4       	ldi	r21, 0x41	; 65
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	98 ab       	std	Y+48, r25	; 0x30
    2c64:	8f a7       	std	Y+47, r24	; 0x2f
    2c66:	0f c0       	rjmp	.+30     	; 0x2c86 <H_LCD_void_latchByte+0x190>
    2c68:	80 e9       	ldi	r24, 0x90	; 144
    2c6a:	91 e0       	ldi	r25, 0x01	; 1
    2c6c:	9e a7       	std	Y+46, r25	; 0x2e
    2c6e:	8d a7       	std	Y+45, r24	; 0x2d
    2c70:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c72:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <H_LCD_void_latchByte+0x17e>
    2c78:	9e a7       	std	Y+46, r25	; 0x2e
    2c7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	98 ab       	std	Y+48, r25	; 0x30
    2c84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c88:	98 a9       	ldd	r25, Y+48	; 0x30
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	69 f7       	brne	.-38     	; 0x2c68 <H_LCD_void_latchByte+0x172>
    2c8e:	14 c0       	rjmp	.+40     	; 0x2cb8 <H_LCD_void_latchByte+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c90:	69 a9       	ldd	r22, Y+49	; 0x31
    2c92:	7a a9       	ldd	r23, Y+50	; 0x32
    2c94:	8b a9       	ldd	r24, Y+51	; 0x33
    2c96:	9c a9       	ldd	r25, Y+52	; 0x34
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	98 ab       	std	Y+48, r25	; 0x30
    2ca2:	8f a7       	std	Y+47, r24	; 0x2f
    2ca4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ca6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca8:	9c a7       	std	Y+44, r25	; 0x2c
    2caa:	8b a7       	std	Y+43, r24	; 0x2b
    2cac:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cae:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <H_LCD_void_latchByte+0x1ba>
    2cb4:	9c a7       	std	Y+44, r25	; 0x2c
    2cb6:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		// Reset Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	62 e0       	ldi	r22, 0x02	; 2
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPinValue>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	a0 ea       	ldi	r26, 0xA0	; 160
    2cc8:	b0 e4       	ldi	r27, 0x40	; 64
    2cca:	8f a3       	std	Y+39, r24	; 0x27
    2ccc:	98 a7       	std	Y+40, r25	; 0x28
    2cce:	a9 a7       	std	Y+41, r26	; 0x29
    2cd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd2:	6f a1       	ldd	r22, Y+39	; 0x27
    2cd4:	78 a5       	ldd	r23, Y+40	; 0x28
    2cd6:	89 a5       	ldd	r24, Y+41	; 0x29
    2cd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	4a e7       	ldi	r20, 0x7A	; 122
    2ce0:	55 e4       	ldi	r21, 0x45	; 69
    2ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8b a3       	std	Y+35, r24	; 0x23
    2cec:	9c a3       	std	Y+36, r25	; 0x24
    2cee:	ad a3       	std	Y+37, r26	; 0x25
    2cf0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cf2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cf4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e8       	ldi	r20, 0x80	; 128
    2d00:	5f e3       	ldi	r21, 0x3F	; 63
    2d02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d06:	88 23       	and	r24, r24
    2d08:	2c f4       	brge	.+10     	; 0x2d14 <H_LCD_void_latchByte+0x21e>
		__ticks = 1;
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	9a a3       	std	Y+34, r25	; 0x22
    2d10:	89 a3       	std	Y+33, r24	; 0x21
    2d12:	3f c0       	rjmp	.+126    	; 0x2d92 <H_LCD_void_latchByte+0x29c>
	else if (__tmp > 65535)
    2d14:	6b a1       	ldd	r22, Y+35	; 0x23
    2d16:	7c a1       	ldd	r23, Y+36	; 0x24
    2d18:	8d a1       	ldd	r24, Y+37	; 0x25
    2d1a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	3f ef       	ldi	r19, 0xFF	; 255
    2d20:	4f e7       	ldi	r20, 0x7F	; 127
    2d22:	57 e4       	ldi	r21, 0x47	; 71
    2d24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d28:	18 16       	cp	r1, r24
    2d2a:	4c f5       	brge	.+82     	; 0x2d7e <H_LCD_void_latchByte+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d2e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d30:	89 a5       	ldd	r24, Y+41	; 0x29
    2d32:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e2       	ldi	r20, 0x20	; 32
    2d3a:	51 e4       	ldi	r21, 0x41	; 65
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	9a a3       	std	Y+34, r25	; 0x22
    2d52:	89 a3       	std	Y+33, r24	; 0x21
    2d54:	0f c0       	rjmp	.+30     	; 0x2d74 <H_LCD_void_latchByte+0x27e>
    2d56:	80 e9       	ldi	r24, 0x90	; 144
    2d58:	91 e0       	ldi	r25, 0x01	; 1
    2d5a:	98 a3       	std	Y+32, r25	; 0x20
    2d5c:	8f 8f       	std	Y+31, r24	; 0x1f
    2d5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d60:	98 a1       	ldd	r25, Y+32	; 0x20
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	f1 f7       	brne	.-4      	; 0x2d62 <H_LCD_void_latchByte+0x26c>
    2d66:	98 a3       	std	Y+32, r25	; 0x20
    2d68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	9a a3       	std	Y+34, r25	; 0x22
    2d72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d74:	89 a1       	ldd	r24, Y+33	; 0x21
    2d76:	9a a1       	ldd	r25, Y+34	; 0x22
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	69 f7       	brne	.-38     	; 0x2d56 <H_LCD_void_latchByte+0x260>
    2d7c:	14 c0       	rjmp	.+40     	; 0x2da6 <H_LCD_void_latchByte+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d80:	7c a1       	ldd	r23, Y+36	; 0x24
    2d82:	8d a1       	ldd	r24, Y+37	; 0x25
    2d84:	9e a1       	ldd	r25, Y+38	; 0x26
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	9a a3       	std	Y+34, r25	; 0x22
    2d90:	89 a3       	std	Y+33, r24	; 0x21
    2d92:	89 a1       	ldd	r24, Y+33	; 0x21
    2d94:	9a a1       	ldd	r25, Y+34	; 0x22
    2d96:	9e 8f       	std	Y+30, r25	; 0x1e
    2d98:	8d 8f       	std	Y+29, r24	; 0x1d
    2d9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <H_LCD_void_latchByte+0x2a8>
    2da2:	9e 8f       	std	Y+30, r25	; 0x1e
    2da4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);


		for(u8 i = 20; i>12;i-=2)
    2da6:	84 e1       	ldi	r24, 0x14	; 20
    2da8:	89 af       	std	Y+57, r24	; 0x39
    2daa:	46 c0       	rjmp	.+140    	; 0x2e38 <H_LCD_void_latchByte+0x342>
		{
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-14)/2)));
    2dac:	89 ad       	ldd	r24, Y+57	; 0x39
    2dae:	88 2f       	mov	r24, r24
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	fc 01       	movw	r30, r24
    2db4:	ea 57       	subi	r30, 0x7A	; 122
    2db6:	fe 4f       	sbci	r31, 0xFE	; 254
    2db8:	30 81       	ld	r19, Z
    2dba:	3f af       	std	Y+63, r19	; 0x3f
    2dbc:	89 ad       	ldd	r24, Y+57	; 0x39
    2dbe:	88 2f       	mov	r24, r24
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	01 96       	adiw	r24, 0x01	; 1
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	ea 57       	subi	r30, 0x7A	; 122
    2dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dca:	80 81       	ld	r24, Z
    2dcc:	8e af       	std	Y+62, r24	; 0x3e
    2dce:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	3d af       	std	Y+61, r19	; 0x3d
    2dd6:	2c af       	std	Y+60, r18	; 0x3c
    2dd8:	89 ad       	ldd	r24, Y+57	; 0x39
    2dda:	88 2f       	mov	r24, r24
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	0e 97       	sbiw	r24, 0x0e	; 14
    2de0:	28 96       	adiw	r28, 0x08	; 8
    2de2:	9f af       	std	Y+63, r25	; 0x3f
    2de4:	8e af       	std	Y+62, r24	; 0x3e
    2de6:	28 97       	sbiw	r28, 0x08	; 8
    2de8:	28 96       	adiw	r28, 0x08	; 8
    2dea:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dec:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dee:	28 97       	sbiw	r28, 0x08	; 8
    2df0:	99 23       	and	r25, r25
    2df2:	54 f4       	brge	.+20     	; 0x2e08 <H_LCD_void_latchByte+0x312>
    2df4:	28 96       	adiw	r28, 0x08	; 8
    2df6:	2e ad       	ldd	r18, Y+62	; 0x3e
    2df8:	3f ad       	ldd	r19, Y+63	; 0x3f
    2dfa:	28 97       	sbiw	r28, 0x08	; 8
    2dfc:	2f 5f       	subi	r18, 0xFF	; 255
    2dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2e00:	28 96       	adiw	r28, 0x08	; 8
    2e02:	3f af       	std	Y+63, r19	; 0x3f
    2e04:	2e af       	std	Y+62, r18	; 0x3e
    2e06:	28 97       	sbiw	r28, 0x08	; 8
    2e08:	28 96       	adiw	r28, 0x08	; 8
    2e0a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e0e:	28 97       	sbiw	r28, 0x08	; 8
    2e10:	95 95       	asr	r25
    2e12:	87 95       	ror	r24
    2e14:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e16:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <H_LCD_void_latchByte+0x328>
    2e1a:	35 95       	asr	r19
    2e1c:	27 95       	ror	r18
    2e1e:	8a 95       	dec	r24
    2e20:	e2 f7       	brpl	.-8      	; 0x2e1a <H_LCD_void_latchByte+0x324>
    2e22:	c9 01       	movw	r24, r18
    2e24:	98 2f       	mov	r25, r24
    2e26:	91 70       	andi	r25, 0x01	; 1
    2e28:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e2a:	6e ad       	ldd	r22, Y+62	; 0x3e
    2e2c:	49 2f       	mov	r20, r25
    2e2e:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPinValue>
		// Reset Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
		_delay_ms(5);


		for(u8 i = 20; i>12;i-=2)
    2e32:	89 ad       	ldd	r24, Y+57	; 0x39
    2e34:	82 50       	subi	r24, 0x02	; 2
    2e36:	89 af       	std	Y+57, r24	; 0x39
    2e38:	89 ad       	ldd	r24, Y+57	; 0x39
    2e3a:	8d 30       	cpi	r24, 0x0D	; 13
    2e3c:	08 f0       	brcs	.+2      	; 0x2e40 <H_LCD_void_latchByte+0x34a>
    2e3e:	b6 cf       	rjmp	.-148    	; 0x2dac <H_LCD_void_latchByte+0x2b6>
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-14)/2)));
		}

		// Falling Edge
		// Set Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,HIGH);
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	62 e0       	ldi	r22, 0x02	; 2
    2e44:	41 e0       	ldi	r20, 0x01	; 1
    2e46:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPinValue>
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	a0 e8       	ldi	r26, 0x80	; 128
    2e50:	bf e3       	ldi	r27, 0x3F	; 63
    2e52:	89 8f       	std	Y+25, r24	; 0x19
    2e54:	9a 8f       	std	Y+26, r25	; 0x1a
    2e56:	ab 8f       	std	Y+27, r26	; 0x1b
    2e58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	4a e7       	ldi	r20, 0x7A	; 122
    2e68:	55 e4       	ldi	r21, 0x45	; 69
    2e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	8d 8b       	std	Y+21, r24	; 0x15
    2e74:	9e 8b       	std	Y+22, r25	; 0x16
    2e76:	af 8b       	std	Y+23, r26	; 0x17
    2e78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e80:	98 8d       	ldd	r25, Y+24	; 0x18
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e8       	ldi	r20, 0x80	; 128
    2e88:	5f e3       	ldi	r21, 0x3F	; 63
    2e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e8e:	88 23       	and	r24, r24
    2e90:	2c f4       	brge	.+10     	; 0x2e9c <H_LCD_void_latchByte+0x3a6>
		__ticks = 1;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9c 8b       	std	Y+20, r25	; 0x14
    2e98:	8b 8b       	std	Y+19, r24	; 0x13
    2e9a:	3f c0       	rjmp	.+126    	; 0x2f1a <H_LCD_void_latchByte+0x424>
	else if (__tmp > 65535)
    2e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	3f ef       	ldi	r19, 0xFF	; 255
    2ea8:	4f e7       	ldi	r20, 0x7F	; 127
    2eaa:	57 e4       	ldi	r21, 0x47	; 71
    2eac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb0:	18 16       	cp	r1, r24
    2eb2:	4c f5       	brge	.+82     	; 0x2f06 <H_LCD_void_latchByte+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb4:	69 8d       	ldd	r22, Y+25	; 0x19
    2eb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e2       	ldi	r20, 0x20	; 32
    2ec2:	51 e4       	ldi	r21, 0x41	; 65
    2ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	bc 01       	movw	r22, r24
    2ece:	cd 01       	movw	r24, r26
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9c 8b       	std	Y+20, r25	; 0x14
    2eda:	8b 8b       	std	Y+19, r24	; 0x13
    2edc:	0f c0       	rjmp	.+30     	; 0x2efc <H_LCD_void_latchByte+0x406>
    2ede:	80 e9       	ldi	r24, 0x90	; 144
    2ee0:	91 e0       	ldi	r25, 0x01	; 1
    2ee2:	9a 8b       	std	Y+18, r25	; 0x12
    2ee4:	89 8b       	std	Y+17, r24	; 0x11
    2ee6:	89 89       	ldd	r24, Y+17	; 0x11
    2ee8:	9a 89       	ldd	r25, Y+18	; 0x12
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <H_LCD_void_latchByte+0x3f4>
    2eee:	9a 8b       	std	Y+18, r25	; 0x12
    2ef0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	9c 8b       	std	Y+20, r25	; 0x14
    2efa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efc:	8b 89       	ldd	r24, Y+19	; 0x13
    2efe:	9c 89       	ldd	r25, Y+20	; 0x14
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	69 f7       	brne	.-38     	; 0x2ede <H_LCD_void_latchByte+0x3e8>
    2f04:	14 c0       	rjmp	.+40     	; 0x2f2e <H_LCD_void_latchByte+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f06:	6d 89       	ldd	r22, Y+21	; 0x15
    2f08:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9c 8b       	std	Y+20, r25	; 0x14
    2f18:	8b 8b       	std	Y+19, r24	; 0x13
    2f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1e:	98 8b       	std	Y+16, r25	; 0x10
    2f20:	8f 87       	std	Y+15, r24	; 0x0f
    2f22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f24:	98 89       	ldd	r25, Y+16	; 0x10
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <H_LCD_void_latchByte+0x430>
    2f2a:	98 8b       	std	Y+16, r25	; 0x10
    2f2c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		// Reset Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	62 e0       	ldi	r22, 0x02	; 2
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPinValue>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	a0 ea       	ldi	r26, 0xA0	; 160
    2f3e:	b0 e4       	ldi	r27, 0x40	; 64
    2f40:	8b 87       	std	Y+11, r24	; 0x0b
    2f42:	9c 87       	std	Y+12, r25	; 0x0c
    2f44:	ad 87       	std	Y+13, r26	; 0x0d
    2f46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	4a e7       	ldi	r20, 0x7A	; 122
    2f56:	55 e4       	ldi	r21, 0x45	; 69
    2f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	8f 83       	std	Y+7, r24	; 0x07
    2f62:	98 87       	std	Y+8, r25	; 0x08
    2f64:	a9 87       	std	Y+9, r26	; 0x09
    2f66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f68:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6a:	78 85       	ldd	r23, Y+8	; 0x08
    2f6c:	89 85       	ldd	r24, Y+9	; 0x09
    2f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e8       	ldi	r20, 0x80	; 128
    2f76:	5f e3       	ldi	r21, 0x3F	; 63
    2f78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	2c f4       	brge	.+10     	; 0x2f8a <H_LCD_void_latchByte+0x494>
		__ticks = 1;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	9e 83       	std	Y+6, r25	; 0x06
    2f86:	8d 83       	std	Y+5, r24	; 0x05
    2f88:	3f c0       	rjmp	.+126    	; 0x3008 <H_LCD_void_latchByte+0x512>
	else if (__tmp > 65535)
    2f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8c:	78 85       	ldd	r23, Y+8	; 0x08
    2f8e:	89 85       	ldd	r24, Y+9	; 0x09
    2f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	3f ef       	ldi	r19, 0xFF	; 255
    2f96:	4f e7       	ldi	r20, 0x7F	; 127
    2f98:	57 e4       	ldi	r21, 0x47	; 71
    2f9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f9e:	18 16       	cp	r1, r24
    2fa0:	4c f5       	brge	.+82     	; 0x2ff4 <H_LCD_void_latchByte+0x4fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e2       	ldi	r20, 0x20	; 32
    2fb0:	51 e4       	ldi	r21, 0x41	; 65
    2fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9e 83       	std	Y+6, r25	; 0x06
    2fc8:	8d 83       	std	Y+5, r24	; 0x05
    2fca:	0f c0       	rjmp	.+30     	; 0x2fea <H_LCD_void_latchByte+0x4f4>
    2fcc:	80 e9       	ldi	r24, 0x90	; 144
    2fce:	91 e0       	ldi	r25, 0x01	; 1
    2fd0:	9c 83       	std	Y+4, r25	; 0x04
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <H_LCD_void_latchByte+0x4e2>
    2fdc:	9c 83       	std	Y+4, r25	; 0x04
    2fde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	9e 83       	std	Y+6, r25	; 0x06
    2fe8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	9e 81       	ldd	r25, Y+6	; 0x06
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	69 f7       	brne	.-38     	; 0x2fcc <H_LCD_void_latchByte+0x4d6>
    2ff2:	14 c0       	rjmp	.+40     	; 0x301c <H_LCD_void_latchByte+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff6:	78 85       	ldd	r23, Y+8	; 0x08
    2ff8:	89 85       	ldd	r24, Y+9	; 0x09
    2ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	9e 83       	std	Y+6, r25	; 0x06
    3006:	8d 83       	std	Y+5, r24	; 0x05
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	89 83       	std	Y+1, r24	; 0x01
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	9a 81       	ldd	r25, Y+2	; 0x02
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	f1 f7       	brne	.-4      	; 0x3014 <H_LCD_void_latchByte+0x51e>
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);

	#endif

}	
    301c:	c9 5b       	subi	r28, 0xB9	; 185
    301e:	df 4f       	sbci	r29, 0xFF	; 255
    3020:	0f b6       	in	r0, 0x3f	; 63
    3022:	f8 94       	cli
    3024:	de bf       	out	0x3e, r29	; 62
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	cd bf       	out	0x3d, r28	; 61
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <main>:
#include "../inc/EEPROM_interface.h"
/****************************************************************************/
u8 Global_u8RXByte;
/****************************************************************************/
int main()
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62

	H_EEPROM_voidInit(EEPROM_CLK_SPEED_100K);
    3038:	88 e4       	ldi	r24, 0x48	; 72
    303a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <H_EEPROM_voidInit>
	H_LCD_void_Init();
    303e:	0e 94 92 11 	call	0x2324	; 0x2324 <H_LCD_void_Init>

	H_LCD_void_gotoXY(0,0);
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	60 e0       	ldi	r22, 0x00	; 0
    3046:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("EEPROM WRITE: ");
    304a:	80 e6       	ldi	r24, 0x60	; 96
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	0e 94 21 13 	call	0x2642	; 0x2642 <H_LCD_void_sendString>
	H_EEPROM_WriteByte(0,'B');
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	62 e4       	ldi	r22, 0x42	; 66
    3058:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <H_EEPROM_WriteByte>
	H_LCD_void_sendData('B');
    305c:	82 e4       	ldi	r24, 0x42	; 66
    305e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>

	H_LCD_void_gotoXY(1,0);
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	60 e0       	ldi	r22, 0x00	; 0
    3066:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("EEPROM READ : ");
    306a:	8f e6       	ldi	r24, 0x6F	; 111
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	0e 94 21 13 	call	0x2642	; 0x2642 <H_LCD_void_sendString>
	H_EEPROM_ReadByte(0,&Global_u8RXByte);
    3072:	20 ea       	ldi	r18, 0xA0	; 160
    3074:	31 e0       	ldi	r19, 0x01	; 1
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	b9 01       	movw	r22, r18
    307c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <H_EEPROM_ReadByte>
	H_LCD_void_sendData(Global_u8RXByte);
    3080:	80 91 a0 01 	lds	r24, 0x01A0
    3084:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <H_LCD_void_sendData>

//	/* Erase Address 2 and 5 */
	H_EEPROM_EraseByte(0);
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <H_EEPROM_EraseByte>
    3090:	ff cf       	rjmp	.-2      	; 0x3090 <main+0x60>

00003092 <__divmodsi4>:
    3092:	97 fb       	bst	r25, 7
    3094:	09 2e       	mov	r0, r25
    3096:	05 26       	eor	r0, r21
    3098:	0e d0       	rcall	.+28     	; 0x30b6 <__divmodsi4_neg1>
    309a:	57 fd       	sbrc	r21, 7
    309c:	04 d0       	rcall	.+8      	; 0x30a6 <__divmodsi4_neg2>
    309e:	14 d0       	rcall	.+40     	; 0x30c8 <__udivmodsi4>
    30a0:	0a d0       	rcall	.+20     	; 0x30b6 <__divmodsi4_neg1>
    30a2:	00 1c       	adc	r0, r0
    30a4:	38 f4       	brcc	.+14     	; 0x30b4 <__divmodsi4_exit>

000030a6 <__divmodsi4_neg2>:
    30a6:	50 95       	com	r21
    30a8:	40 95       	com	r20
    30aa:	30 95       	com	r19
    30ac:	21 95       	neg	r18
    30ae:	3f 4f       	sbci	r19, 0xFF	; 255
    30b0:	4f 4f       	sbci	r20, 0xFF	; 255
    30b2:	5f 4f       	sbci	r21, 0xFF	; 255

000030b4 <__divmodsi4_exit>:
    30b4:	08 95       	ret

000030b6 <__divmodsi4_neg1>:
    30b6:	f6 f7       	brtc	.-4      	; 0x30b4 <__divmodsi4_exit>
    30b8:	90 95       	com	r25
    30ba:	80 95       	com	r24
    30bc:	70 95       	com	r23
    30be:	61 95       	neg	r22
    30c0:	7f 4f       	sbci	r23, 0xFF	; 255
    30c2:	8f 4f       	sbci	r24, 0xFF	; 255
    30c4:	9f 4f       	sbci	r25, 0xFF	; 255
    30c6:	08 95       	ret

000030c8 <__udivmodsi4>:
    30c8:	a1 e2       	ldi	r26, 0x21	; 33
    30ca:	1a 2e       	mov	r1, r26
    30cc:	aa 1b       	sub	r26, r26
    30ce:	bb 1b       	sub	r27, r27
    30d0:	fd 01       	movw	r30, r26
    30d2:	0d c0       	rjmp	.+26     	; 0x30ee <__udivmodsi4_ep>

000030d4 <__udivmodsi4_loop>:
    30d4:	aa 1f       	adc	r26, r26
    30d6:	bb 1f       	adc	r27, r27
    30d8:	ee 1f       	adc	r30, r30
    30da:	ff 1f       	adc	r31, r31
    30dc:	a2 17       	cp	r26, r18
    30de:	b3 07       	cpc	r27, r19
    30e0:	e4 07       	cpc	r30, r20
    30e2:	f5 07       	cpc	r31, r21
    30e4:	20 f0       	brcs	.+8      	; 0x30ee <__udivmodsi4_ep>
    30e6:	a2 1b       	sub	r26, r18
    30e8:	b3 0b       	sbc	r27, r19
    30ea:	e4 0b       	sbc	r30, r20
    30ec:	f5 0b       	sbc	r31, r21

000030ee <__udivmodsi4_ep>:
    30ee:	66 1f       	adc	r22, r22
    30f0:	77 1f       	adc	r23, r23
    30f2:	88 1f       	adc	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	1a 94       	dec	r1
    30f8:	69 f7       	brne	.-38     	; 0x30d4 <__udivmodsi4_loop>
    30fa:	60 95       	com	r22
    30fc:	70 95       	com	r23
    30fe:	80 95       	com	r24
    3100:	90 95       	com	r25
    3102:	9b 01       	movw	r18, r22
    3104:	ac 01       	movw	r20, r24
    3106:	bd 01       	movw	r22, r26
    3108:	cf 01       	movw	r24, r30
    310a:	08 95       	ret

0000310c <__prologue_saves__>:
    310c:	2f 92       	push	r2
    310e:	3f 92       	push	r3
    3110:	4f 92       	push	r4
    3112:	5f 92       	push	r5
    3114:	6f 92       	push	r6
    3116:	7f 92       	push	r7
    3118:	8f 92       	push	r8
    311a:	9f 92       	push	r9
    311c:	af 92       	push	r10
    311e:	bf 92       	push	r11
    3120:	cf 92       	push	r12
    3122:	df 92       	push	r13
    3124:	ef 92       	push	r14
    3126:	ff 92       	push	r15
    3128:	0f 93       	push	r16
    312a:	1f 93       	push	r17
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    3134:	ca 1b       	sub	r28, r26
    3136:	db 0b       	sbc	r29, r27
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	09 94       	ijmp

00003144 <__epilogue_restores__>:
    3144:	2a 88       	ldd	r2, Y+18	; 0x12
    3146:	39 88       	ldd	r3, Y+17	; 0x11
    3148:	48 88       	ldd	r4, Y+16	; 0x10
    314a:	5f 84       	ldd	r5, Y+15	; 0x0f
    314c:	6e 84       	ldd	r6, Y+14	; 0x0e
    314e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3150:	8c 84       	ldd	r8, Y+12	; 0x0c
    3152:	9b 84       	ldd	r9, Y+11	; 0x0b
    3154:	aa 84       	ldd	r10, Y+10	; 0x0a
    3156:	b9 84       	ldd	r11, Y+9	; 0x09
    3158:	c8 84       	ldd	r12, Y+8	; 0x08
    315a:	df 80       	ldd	r13, Y+7	; 0x07
    315c:	ee 80       	ldd	r14, Y+6	; 0x06
    315e:	fd 80       	ldd	r15, Y+5	; 0x05
    3160:	0c 81       	ldd	r16, Y+4	; 0x04
    3162:	1b 81       	ldd	r17, Y+3	; 0x03
    3164:	aa 81       	ldd	r26, Y+2	; 0x02
    3166:	b9 81       	ldd	r27, Y+1	; 0x01
    3168:	ce 0f       	add	r28, r30
    316a:	d1 1d       	adc	r29, r1
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	ed 01       	movw	r28, r26
    3178:	08 95       	ret

0000317a <_exit>:
    317a:	f8 94       	cli

0000317c <__stop_program>:
    317c:	ff cf       	rjmp	.-2      	; 0x317c <__stop_program>
