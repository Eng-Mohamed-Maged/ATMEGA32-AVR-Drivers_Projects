
NTI_ADC_AVR_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001aa  00800060  00003376  0000340a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080020a  0080020a  000035b4  2**0
                  ALLOC
  3 .stab         00002658  00000000  00000000  000035b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017e2  00000000  00000000  00005c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000073ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000758e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007780  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000af11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c0e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c59e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 30       	cpi	r26, 0x0E	; 14
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <main>
      8a:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ea       	ldi	r26, 0xAC	; 172
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ea       	ldi	r24, 0xAC	; 172
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c ea       	ldi	r22, 0xAC	; 172
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 54       	subi	r30, 0x4C	; 76
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MADC_Init>:
			   ADC_ADJUST_t Copy_ADC_Adjust		 	,
			   ADC_PRESCALER_t Copy_ADC_Prescaler	,
			   ADC_TRIGGER_t Copy_ADC_Trigger    	,
			   ADC_TRIG_MOD_t Copy_ADC_Trigger_Mode
			   )
{
     e2e:	0f 93       	push	r16
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <MADC_Init+0x8>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <MADC_Init+0xa>
     e38:	0f 92       	push	r0
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	6a 83       	std	Y+2, r22	; 0x02
     e42:	4b 83       	std	Y+3, r20	; 0x03
     e44:	2c 83       	std	Y+4, r18	; 0x04
     e46:	0d 83       	std	Y+5, r16	; 0x05
	/******* FOR ADJUST *********/
	if (Copy_ADC_Adjust == ADC_LEFT_ADJUST)
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	88 23       	and	r24, r24
     e4c:	51 f4       	brne	.+20     	; 0xe62 <MADC_Init+0x34>
	{
		SET_BIT(ADC->ADMUX ,ADLAR_BIT);
     e4e:	a4 e2       	ldi	r26, 0x24	; 36
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e4 e2       	ldi	r30, 0x24	; 36
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	83 81       	ldd	r24, Z+3	; 0x03
     e58:	80 62       	ori	r24, 0x20	; 32
     e5a:	13 96       	adiw	r26, 0x03	; 3
     e5c:	8c 93       	st	X, r24
     e5e:	13 97       	sbiw	r26, 0x03	; 3
     e60:	0b c0       	rjmp	.+22     	; 0xe78 <MADC_Init+0x4a>
	}
	else if(Copy_ADC_Adjust == ADC_RIGHT_ADJUST)
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	41 f4       	brne	.+16     	; 0xe78 <MADC_Init+0x4a>
	{
		CLR_BIT(ADC->ADMUX ,ADLAR_BIT);
     e68:	a4 e2       	ldi	r26, 0x24	; 36
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e4 e2       	ldi	r30, 0x24	; 36
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	83 81       	ldd	r24, Z+3	; 0x03
     e72:	8f 7d       	andi	r24, 0xDF	; 223
     e74:	13 96       	adiw	r26, 0x03	; 3
     e76:	8c 93       	st	X, r24
	}
	
	/********** FOR VREF *********/
	/* Bit Masking */
	ADC->ADMUX &= 0b00111111;
     e78:	a4 e2       	ldi	r26, 0x24	; 36
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e4 e2       	ldi	r30, 0x24	; 36
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	83 81       	ldd	r24, Z+3	; 0x03
     e82:	8f 73       	andi	r24, 0x3F	; 63
     e84:	13 96       	adiw	r26, 0x03	; 3
     e86:	8c 93       	st	X, r24
	/* Assign VREF Value */
	ADC->ADMUX |= (Copy_ADC_VREF << 6);
     e88:	a4 e2       	ldi	r26, 0x24	; 36
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e4 e2       	ldi	r30, 0x24	; 36
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	83 81       	ldd	r24, Z+3	; 0x03
     e92:	28 2f       	mov	r18, r24
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	00 24       	eor	r0, r0
     e9c:	96 95       	lsr	r25
     e9e:	87 95       	ror	r24
     ea0:	07 94       	ror	r0
     ea2:	96 95       	lsr	r25
     ea4:	87 95       	ror	r24
     ea6:	07 94       	ror	r0
     ea8:	98 2f       	mov	r25, r24
     eaa:	80 2d       	mov	r24, r0
     eac:	82 2b       	or	r24, r18
     eae:	13 96       	adiw	r26, 0x03	; 3
     eb0:	8c 93       	st	X, r24
     eb2:	13 97       	sbiw	r26, 0x03	; 3
	

	/******* FOR TRIGGER *********/
	if (Copy_ADC_Trigger == ADC_AUTO_TRIGGER_ON)
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	31 f5       	brne	.+76     	; 0xf06 <MADC_Init+0xd8>
	{
		SET_BIT(ADC->ADCSRA ,ADATE_BIT);
     eba:	a4 e2       	ldi	r26, 0x24	; 36
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e4 e2       	ldi	r30, 0x24	; 36
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	80 62       	ori	r24, 0x20	; 32
     ec6:	12 96       	adiw	r26, 0x02	; 2
     ec8:	8c 93       	st	X, r24

		/******* FOR TRIGGER MODE *********/
		/* Bit Masking */
		ADC->SFIOR &= 0b00011111;
     eca:	a4 e2       	ldi	r26, 0x24	; 36
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e4 e2       	ldi	r30, 0x24	; 36
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	85 a5       	ldd	r24, Z+45	; 0x2d
     ed4:	8f 71       	andi	r24, 0x1F	; 31
     ed6:	9d 96       	adiw	r26, 0x2d	; 45
     ed8:	8c 93       	st	X, r24
		/* Assign TRIGGER MODE Value */
		ADC->SFIOR |= (Copy_ADC_Trigger_Mode << 5);
     eda:	a4 e2       	ldi	r26, 0x24	; 36
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e4 e2       	ldi	r30, 0x24	; 36
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	85 a5       	ldd	r24, Z+45	; 0x2d
     ee4:	28 2f       	mov	r18, r24
     ee6:	8d 81       	ldd	r24, Y+5	; 0x05
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	82 95       	swap	r24
     ef2:	92 95       	swap	r25
     ef4:	90 7f       	andi	r25, 0xF0	; 240
     ef6:	98 27       	eor	r25, r24
     ef8:	80 7f       	andi	r24, 0xF0	; 240
     efa:	98 27       	eor	r25, r24
     efc:	82 2b       	or	r24, r18
     efe:	9d 96       	adiw	r26, 0x2d	; 45
     f00:	8c 93       	st	X, r24
     f02:	9d 97       	sbiw	r26, 0x2d	; 45
     f04:	0b c0       	rjmp	.+22     	; 0xf1c <MADC_Init+0xee>

	}
	else if(Copy_ADC_Trigger == ADC_AUTO_TRIGGER_OFF)
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	88 23       	and	r24, r24
     f0a:	41 f4       	brne	.+16     	; 0xf1c <MADC_Init+0xee>
	{
		CLR_BIT(ADC->ADCSRA ,ADATE_BIT);
     f0c:	a4 e2       	ldi	r26, 0x24	; 36
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e4 e2       	ldi	r30, 0x24	; 36
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	82 81       	ldd	r24, Z+2	; 0x02
     f16:	8f 7d       	andi	r24, 0xDF	; 223
     f18:	12 96       	adiw	r26, 0x02	; 2
     f1a:	8c 93       	st	X, r24
	}

	/******* FOR PRESCALER *********/
	/* Bit Masking */
	ADC->ADCSRA &= 0b11111000;
     f1c:	a4 e2       	ldi	r26, 0x24	; 36
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e4 e2       	ldi	r30, 0x24	; 36
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	88 7f       	andi	r24, 0xF8	; 248
     f28:	12 96       	adiw	r26, 0x02	; 2
     f2a:	8c 93       	st	X, r24
	/* Assign PRESCALER Value */
	ADC->ADCSRA |= Copy_ADC_Prescaler;
     f2c:	a4 e2       	ldi	r26, 0x24	; 36
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e4 e2       	ldi	r30, 0x24	; 36
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	92 81       	ldd	r25, Z+2	; 0x02
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	89 2b       	or	r24, r25
     f3a:	12 96       	adiw	r26, 0x02	; 2
     f3c:	8c 93       	st	X, r24
	
	
	/******* FOR ADC ENABLE *********/
	SET_BIT(ADC->ADCSRA ,ADEN_BIT);
     f3e:	a4 e2       	ldi	r26, 0x24	; 36
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e4 e2       	ldi	r30, 0x24	; 36
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	80 68       	ori	r24, 0x80	; 128
     f4a:	12 96       	adiw	r26, 0x02	; 2
     f4c:	8c 93       	st	X, r24
     f4e:	12 97       	sbiw	r26, 0x02	; 2

}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <MADC_getDigitalValueSynchNonBlocking>:

void MADC_getDigitalValueSynchNonBlocking (ADC_CHANNELS_t Copy_ADC_Channel,u16 * ADC_GET_Data)
{	
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <MADC_getDigitalValueSynchNonBlocking+0x6>
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	7b 83       	std	Y+3, r23	; 0x03
     f72:	6a 83       	std	Y+2, r22	; 0x02
	/* Bit Masking */
	ADC->ADMUX &= 0b11100000;
     f74:	a4 e2       	ldi	r26, 0x24	; 36
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e4 e2       	ldi	r30, 0x24	; 36
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	83 81       	ldd	r24, Z+3	; 0x03
     f7e:	80 7e       	andi	r24, 0xE0	; 224
     f80:	13 96       	adiw	r26, 0x03	; 3
     f82:	8c 93       	st	X, r24
	/* Assign Channel Value */
	ADC->ADMUX |= Copy_ADC_Channel;
     f84:	a4 e2       	ldi	r26, 0x24	; 36
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e4 e2       	ldi	r30, 0x24	; 36
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	93 81       	ldd	r25, Z+3	; 0x03
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	89 2b       	or	r24, r25
     f92:	13 96       	adiw	r26, 0x03	; 3
     f94:	8c 93       	st	X, r24
     f96:	13 97       	sbiw	r26, 0x03	; 3
		
	/**** The conversion is complete ****/
	if(GET_BIT(ADC->ADCSRA ,ADSC_BIT) == 0)
     f98:	e4 e2       	ldi	r30, 0x24	; 36
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	82 95       	swap	r24
     fa0:	86 95       	lsr	r24
     fa2:	86 95       	lsr	r24
     fa4:	83 70       	andi	r24, 0x03	; 3
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	81 70       	andi	r24, 0x01	; 1
     fac:	90 70       	andi	r25, 0x00	; 0
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	31 f4       	brne	.+12     	; 0xfbe <MADC_getDigitalValueSynchNonBlocking+0x5c>
	{
		*ADC_GET_Data = MADC_getDigitalValue();
     fb2:	0e 94 ee 07 	call	0xfdc	; 0xfdc <MADC_getDigitalValue>
     fb6:	ea 81       	ldd	r30, Y+2	; 0x02
     fb8:	fb 81       	ldd	r31, Y+3	; 0x03
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	80 83       	st	Z, r24
	}

	/* Start Conversion */
	SET_BIT(ADC->ADCSRA ,ADSC_BIT);
     fbe:	a4 e2       	ldi	r26, 0x24	; 36
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e4 e2       	ldi	r30, 0x24	; 36
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	82 81       	ldd	r24, Z+2	; 0x02
     fc8:	80 64       	ori	r24, 0x40	; 64
     fca:	12 96       	adiw	r26, 0x02	; 2
     fcc:	8c 93       	st	X, r24
     fce:	12 97       	sbiw	r26, 0x02	; 2

}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret

00000fdc <MADC_getDigitalValue>:

u16 MADC_getDigitalValue(void)
{
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	0f 92       	push	r0
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
	u8 TempADC_Data = 0;
     fe6:	19 82       	std	Y+1, r1	; 0x01
	TempADC_Data = ADC->ADCL;
     fe8:	e4 e2       	ldi	r30, 0x24	; 36
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	89 83       	std	Y+1, r24	; 0x01
	return (TempADC_Data|((ADC->ADCH)<<8));
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	e4 e2       	ldi	r30, 0x24	; 36
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	81 81       	ldd	r24, Z+1	; 0x01
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	98 2f       	mov	r25, r24
    1002:	88 27       	eor	r24, r24
    1004:	82 2b       	or	r24, r18
    1006:	93 2b       	or	r25, r19
}
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <MADC_getDigitalValueAsynchCallBack>:

/************  CallBack Functions Declerations  *************/

void MADC_getDigitalValueAsynchCallBack(ADC_CHANNELS_t Copy_ADC_Channel ,void (*ptr)(void))
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <MADC_getDigitalValueAsynchCallBack+0x6>
    1016:	0f 92       	push	r0
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	7b 83       	std	Y+3, r23	; 0x03
    1020:	6a 83       	std	Y+2, r22	; 0x02
	/* Bit Masking */
	ADC->ADMUX &= 0b11100000;
    1022:	a4 e2       	ldi	r26, 0x24	; 36
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e4 e2       	ldi	r30, 0x24	; 36
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	83 81       	ldd	r24, Z+3	; 0x03
    102c:	80 7e       	andi	r24, 0xE0	; 224
    102e:	13 96       	adiw	r26, 0x03	; 3
    1030:	8c 93       	st	X, r24
	/* Assign Channel Value */
	ADC->ADMUX |= Copy_ADC_Channel;
    1032:	a4 e2       	ldi	r26, 0x24	; 36
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e4 e2       	ldi	r30, 0x24	; 36
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	93 81       	ldd	r25, Z+3	; 0x03
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	89 2b       	or	r24, r25
    1040:	13 96       	adiw	r26, 0x03	; 3
    1042:	8c 93       	st	X, r24
    1044:	13 97       	sbiw	r26, 0x03	; 3

	if(ptr != NULL)
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	b9 f0       	breq	.+46     	; 0x107c <MADC_getDigitalValueAsynchCallBack+0x6c>
	{
		ADC_CallBack = ptr ;
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	90 93 0b 02 	sts	0x020B, r25
    1056:	80 93 0a 02 	sts	0x020A, r24

		/* Enable Interrupt */
		SET_BIT(ADC->ADCSRA ,ADIE_BIT);
    105a:	a4 e2       	ldi	r26, 0x24	; 36
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e4 e2       	ldi	r30, 0x24	; 36
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	88 60       	ori	r24, 0x08	; 8
    1066:	12 96       	adiw	r26, 0x02	; 2
    1068:	8c 93       	st	X, r24
		
		/* Start Conversion */
		SET_BIT(ADC->ADCSRA ,ADSC_BIT);
    106a:	a4 e2       	ldi	r26, 0x24	; 36
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e4 e2       	ldi	r30, 0x24	; 36
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	82 81       	ldd	r24, Z+2	; 0x02
    1074:	80 64       	ori	r24, 0x40	; 64
    1076:	12 96       	adiw	r26, 0x02	; 2
    1078:	8c 93       	st	X, r24
    107a:	12 97       	sbiw	r26, 0x02	; 2

	}
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <__vector_16>:


/*************************  ADC Complete ***************************/
ADC_IRQHandler
{
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	11 24       	eor	r1, r1
    1092:	2f 93       	push	r18
    1094:	3f 93       	push	r19
    1096:	4f 93       	push	r20
    1098:	5f 93       	push	r21
    109a:	6f 93       	push	r22
    109c:	7f 93       	push	r23
    109e:	8f 93       	push	r24
    10a0:	9f 93       	push	r25
    10a2:	af 93       	push	r26
    10a4:	bf 93       	push	r27
    10a6:	ef 93       	push	r30
    10a8:	ff 93       	push	r31
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
	ADC_CallBack();
    10b2:	e0 91 0a 02 	lds	r30, 0x020A
    10b6:	f0 91 0b 02 	lds	r31, 0x020B
    10ba:	09 95       	icall

}
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	ff 91       	pop	r31
    10c2:	ef 91       	pop	r30
    10c4:	bf 91       	pop	r27
    10c6:	af 91       	pop	r26
    10c8:	9f 91       	pop	r25
    10ca:	8f 91       	pop	r24
    10cc:	7f 91       	pop	r23
    10ce:	6f 91       	pop	r22
    10d0:	5f 91       	pop	r21
    10d2:	4f 91       	pop	r20
    10d4:	3f 91       	pop	r19
    10d6:	2f 91       	pop	r18
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	0f 90       	pop	r0
    10de:	1f 90       	pop	r1
    10e0:	18 95       	reti

000010e2 <DIO_voidSetPinDirection>:
#include "../inc/DIO_config.h"
#include "../inc/DIO_interface.h"
#include "../inc/DIO_private.h"

void DIO_voidSetPinDirection(PORT_t Copy_PortId,PIN_t Copy_PinId,DIRECTION_t Copy_Direction)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	2d 97       	sbiw	r28, 0x0d	; 13
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	6a 83       	std	Y+2, r22	; 0x02
    10fa:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_PortId)
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3d 87       	std	Y+13, r19	; 0x0d
    1104:	2c 87       	std	Y+12, r18	; 0x0c
    1106:	8c 85       	ldd	r24, Y+12	; 0x0c
    1108:	9d 85       	ldd	r25, Y+13	; 0x0d
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	91 05       	cpc	r25, r1
    110e:	09 f4       	brne	.+2      	; 0x1112 <DIO_voidSetPinDirection+0x30>
    1110:	b8 c0       	rjmp	.+368    	; 0x1282 <DIO_voidSetPinDirection+0x1a0>
    1112:	2c 85       	ldd	r18, Y+12	; 0x0c
    1114:	3d 85       	ldd	r19, Y+13	; 0x0d
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	2c f4       	brge	.+10     	; 0x1126 <DIO_voidSetPinDirection+0x44>
    111c:	8c 85       	ldd	r24, Y+12	; 0x0c
    111e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	71 f0       	breq	.+28     	; 0x1140 <DIO_voidSetPinDirection+0x5e>
    1124:	90 c2       	rjmp	.+1312   	; 0x1646 <DIO_voidSetPinDirection+0x564>
    1126:	2c 85       	ldd	r18, Y+12	; 0x0c
    1128:	3d 85       	ldd	r19, Y+13	; 0x0d
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	09 f4       	brne	.+2      	; 0x1132 <DIO_voidSetPinDirection+0x50>
    1130:	49 c1       	rjmp	.+658    	; 0x13c4 <DIO_voidSetPinDirection+0x2e2>
    1132:	8c 85       	ldd	r24, Y+12	; 0x0c
    1134:	9d 85       	ldd	r25, Y+13	; 0x0d
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <DIO_voidSetPinDirection+0x5c>
    113c:	e4 c1       	rjmp	.+968    	; 0x1506 <DIO_voidSetPinDirection+0x424>
    113e:	83 c2       	rjmp	.+1286   	; 0x1646 <DIO_voidSetPinDirection+0x564>
	{
		case PORT_A:
			switch(Copy_PinId)
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3b 87       	std	Y+11, r19	; 0x0b
    1148:	2a 87       	std	Y+10, r18	; 0x0a
    114a:	8a 85       	ldd	r24, Y+10	; 0x0a
    114c:	9b 85       	ldd	r25, Y+11	; 0x0b
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	91 05       	cpc	r25, r1
    1152:	09 f4       	brne	.+2      	; 0x1156 <DIO_voidSetPinDirection+0x74>
    1154:	51 c0       	rjmp	.+162    	; 0x11f8 <DIO_voidSetPinDirection+0x116>
    1156:	2a 85       	ldd	r18, Y+10	; 0x0a
    1158:	3b 85       	ldd	r19, Y+11	; 0x0b
    115a:	24 30       	cpi	r18, 0x04	; 4
    115c:	31 05       	cpc	r19, r1
    115e:	7c f4       	brge	.+30     	; 0x117e <DIO_voidSetPinDirection+0x9c>
    1160:	8a 85       	ldd	r24, Y+10	; 0x0a
    1162:	9b 85       	ldd	r25, Y+11	; 0x0b
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	91 05       	cpc	r25, r1
    1168:	71 f1       	breq	.+92     	; 0x11c6 <DIO_voidSetPinDirection+0xe4>
    116a:	2a 85       	ldd	r18, Y+10	; 0x0a
    116c:	3b 85       	ldd	r19, Y+11	; 0x0b
    116e:	22 30       	cpi	r18, 0x02	; 2
    1170:	31 05       	cpc	r19, r1
    1172:	ac f5       	brge	.+106    	; 0x11de <DIO_voidSetPinDirection+0xfc>
    1174:	8a 85       	ldd	r24, Y+10	; 0x0a
    1176:	9b 85       	ldd	r25, Y+11	; 0x0b
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	d1 f0       	breq	.+52     	; 0x11b0 <DIO_voidSetPinDirection+0xce>
    117c:	64 c2       	rjmp	.+1224   	; 0x1646 <DIO_voidSetPinDirection+0x564>
    117e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1180:	3b 85       	ldd	r19, Y+11	; 0x0b
    1182:	25 30       	cpi	r18, 0x05	; 5
    1184:	31 05       	cpc	r19, r1
    1186:	09 f4       	brne	.+2      	; 0x118a <DIO_voidSetPinDirection+0xa8>
    1188:	52 c0       	rjmp	.+164    	; 0x122e <DIO_voidSetPinDirection+0x14c>
    118a:	8a 85       	ldd	r24, Y+10	; 0x0a
    118c:	9b 85       	ldd	r25, Y+11	; 0x0b
    118e:	85 30       	cpi	r24, 0x05	; 5
    1190:	91 05       	cpc	r25, r1
    1192:	0c f4       	brge	.+2      	; 0x1196 <DIO_voidSetPinDirection+0xb4>
    1194:	3f c0       	rjmp	.+126    	; 0x1214 <DIO_voidSetPinDirection+0x132>
    1196:	2a 85       	ldd	r18, Y+10	; 0x0a
    1198:	3b 85       	ldd	r19, Y+11	; 0x0b
    119a:	26 30       	cpi	r18, 0x06	; 6
    119c:	31 05       	cpc	r19, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <DIO_voidSetPinDirection+0xc0>
    11a0:	54 c0       	rjmp	.+168    	; 0x124a <DIO_voidSetPinDirection+0x168>
    11a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    11a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    11a6:	87 30       	cpi	r24, 0x07	; 7
    11a8:	91 05       	cpc	r25, r1
    11aa:	09 f4       	brne	.+2      	; 0x11ae <DIO_voidSetPinDirection+0xcc>
    11ac:	5d c0       	rjmp	.+186    	; 0x1268 <DIO_voidSetPinDirection+0x186>
    11ae:	4b c2       	rjmp	.+1174   	; 0x1646 <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRA.Bit.B0 = Copy_Direction;
    11b0:	e0 e3       	ldi	r30, 0x30	; 48
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	81 70       	andi	r24, 0x01	; 1
    11b8:	98 2f       	mov	r25, r24
    11ba:	91 70       	andi	r25, 0x01	; 1
    11bc:	82 85       	ldd	r24, Z+10	; 0x0a
    11be:	8e 7f       	andi	r24, 0xFE	; 254
    11c0:	89 2b       	or	r24, r25
    11c2:	82 87       	std	Z+10, r24	; 0x0a
    11c4:	40 c2       	rjmp	.+1152   	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRA.Bit.B1 = Copy_Direction;
    11c6:	e0 e3       	ldi	r30, 0x30	; 48
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	81 70       	andi	r24, 0x01	; 1
    11ce:	81 70       	andi	r24, 0x01	; 1
    11d0:	98 2f       	mov	r25, r24
    11d2:	99 0f       	add	r25, r25
    11d4:	82 85       	ldd	r24, Z+10	; 0x0a
    11d6:	8d 7f       	andi	r24, 0xFD	; 253
    11d8:	89 2b       	or	r24, r25
    11da:	82 87       	std	Z+10, r24	; 0x0a
    11dc:	34 c2       	rjmp	.+1128   	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRA.Bit.B2 = Copy_Direction;
    11de:	e0 e3       	ldi	r30, 0x30	; 48
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	81 70       	andi	r24, 0x01	; 1
    11e6:	81 70       	andi	r24, 0x01	; 1
    11e8:	98 2f       	mov	r25, r24
    11ea:	99 0f       	add	r25, r25
    11ec:	99 0f       	add	r25, r25
    11ee:	82 85       	ldd	r24, Z+10	; 0x0a
    11f0:	8b 7f       	andi	r24, 0xFB	; 251
    11f2:	89 2b       	or	r24, r25
    11f4:	82 87       	std	Z+10, r24	; 0x0a
    11f6:	27 c2       	rjmp	.+1102   	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRA.Bit.B3 = Copy_Direction;
    11f8:	e0 e3       	ldi	r30, 0x30	; 48
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	81 70       	andi	r24, 0x01	; 1
    1200:	81 70       	andi	r24, 0x01	; 1
    1202:	98 2f       	mov	r25, r24
    1204:	99 0f       	add	r25, r25
    1206:	99 0f       	add	r25, r25
    1208:	99 0f       	add	r25, r25
    120a:	82 85       	ldd	r24, Z+10	; 0x0a
    120c:	87 7f       	andi	r24, 0xF7	; 247
    120e:	89 2b       	or	r24, r25
    1210:	82 87       	std	Z+10, r24	; 0x0a
    1212:	19 c2       	rjmp	.+1074   	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRA.Bit.B4 = Copy_Direction;
    1214:	e0 e3       	ldi	r30, 0x30	; 48
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	81 70       	andi	r24, 0x01	; 1
    121c:	81 70       	andi	r24, 0x01	; 1
    121e:	98 2f       	mov	r25, r24
    1220:	92 95       	swap	r25
    1222:	90 7f       	andi	r25, 0xF0	; 240
    1224:	82 85       	ldd	r24, Z+10	; 0x0a
    1226:	8f 7e       	andi	r24, 0xEF	; 239
    1228:	89 2b       	or	r24, r25
    122a:	82 87       	std	Z+10, r24	; 0x0a
    122c:	0c c2       	rjmp	.+1048   	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRA.Bit.B5 = Copy_Direction;
    122e:	e0 e3       	ldi	r30, 0x30	; 48
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	81 70       	andi	r24, 0x01	; 1
    1236:	81 70       	andi	r24, 0x01	; 1
    1238:	98 2f       	mov	r25, r24
    123a:	92 95       	swap	r25
    123c:	99 0f       	add	r25, r25
    123e:	90 7e       	andi	r25, 0xE0	; 224
    1240:	82 85       	ldd	r24, Z+10	; 0x0a
    1242:	8f 7d       	andi	r24, 0xDF	; 223
    1244:	89 2b       	or	r24, r25
    1246:	82 87       	std	Z+10, r24	; 0x0a
    1248:	fe c1       	rjmp	.+1020   	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRA.Bit.B6 = Copy_Direction;
    124a:	e0 e3       	ldi	r30, 0x30	; 48
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	81 70       	andi	r24, 0x01	; 1
    1252:	81 70       	andi	r24, 0x01	; 1
    1254:	98 2f       	mov	r25, r24
    1256:	92 95       	swap	r25
    1258:	99 0f       	add	r25, r25
    125a:	99 0f       	add	r25, r25
    125c:	90 7c       	andi	r25, 0xC0	; 192
    125e:	82 85       	ldd	r24, Z+10	; 0x0a
    1260:	8f 7b       	andi	r24, 0xBF	; 191
    1262:	89 2b       	or	r24, r25
    1264:	82 87       	std	Z+10, r24	; 0x0a
    1266:	ef c1       	rjmp	.+990    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRA.Bit.B7 = Copy_Direction;
    1268:	e0 e3       	ldi	r30, 0x30	; 48
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	81 70       	andi	r24, 0x01	; 1
    1270:	98 2f       	mov	r25, r24
    1272:	97 95       	ror	r25
    1274:	99 27       	eor	r25, r25
    1276:	97 95       	ror	r25
    1278:	82 85       	ldd	r24, Z+10	; 0x0a
    127a:	8f 77       	andi	r24, 0x7F	; 127
    127c:	89 2b       	or	r24, r25
    127e:	82 87       	std	Z+10, r24	; 0x0a
    1280:	e2 c1       	rjmp	.+964    	; 0x1646 <DIO_voidSetPinDirection+0x564>
				default: break;
			}
			break;

		case PORT_B:
			switch(Copy_PinId)
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	39 87       	std	Y+9, r19	; 0x09
    128a:	28 87       	std	Y+8, r18	; 0x08
    128c:	88 85       	ldd	r24, Y+8	; 0x08
    128e:	99 85       	ldd	r25, Y+9	; 0x09
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	91 05       	cpc	r25, r1
    1294:	09 f4       	brne	.+2      	; 0x1298 <DIO_voidSetPinDirection+0x1b6>
    1296:	51 c0       	rjmp	.+162    	; 0x133a <DIO_voidSetPinDirection+0x258>
    1298:	28 85       	ldd	r18, Y+8	; 0x08
    129a:	39 85       	ldd	r19, Y+9	; 0x09
    129c:	24 30       	cpi	r18, 0x04	; 4
    129e:	31 05       	cpc	r19, r1
    12a0:	7c f4       	brge	.+30     	; 0x12c0 <DIO_voidSetPinDirection+0x1de>
    12a2:	88 85       	ldd	r24, Y+8	; 0x08
    12a4:	99 85       	ldd	r25, Y+9	; 0x09
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	71 f1       	breq	.+92     	; 0x1308 <DIO_voidSetPinDirection+0x226>
    12ac:	28 85       	ldd	r18, Y+8	; 0x08
    12ae:	39 85       	ldd	r19, Y+9	; 0x09
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	ac f5       	brge	.+106    	; 0x1320 <DIO_voidSetPinDirection+0x23e>
    12b6:	88 85       	ldd	r24, Y+8	; 0x08
    12b8:	99 85       	ldd	r25, Y+9	; 0x09
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	d1 f0       	breq	.+52     	; 0x12f2 <DIO_voidSetPinDirection+0x210>
    12be:	c3 c1       	rjmp	.+902    	; 0x1646 <DIO_voidSetPinDirection+0x564>
    12c0:	28 85       	ldd	r18, Y+8	; 0x08
    12c2:	39 85       	ldd	r19, Y+9	; 0x09
    12c4:	25 30       	cpi	r18, 0x05	; 5
    12c6:	31 05       	cpc	r19, r1
    12c8:	09 f4       	brne	.+2      	; 0x12cc <DIO_voidSetPinDirection+0x1ea>
    12ca:	52 c0       	rjmp	.+164    	; 0x1370 <DIO_voidSetPinDirection+0x28e>
    12cc:	88 85       	ldd	r24, Y+8	; 0x08
    12ce:	99 85       	ldd	r25, Y+9	; 0x09
    12d0:	85 30       	cpi	r24, 0x05	; 5
    12d2:	91 05       	cpc	r25, r1
    12d4:	0c f4       	brge	.+2      	; 0x12d8 <DIO_voidSetPinDirection+0x1f6>
    12d6:	3f c0       	rjmp	.+126    	; 0x1356 <DIO_voidSetPinDirection+0x274>
    12d8:	28 85       	ldd	r18, Y+8	; 0x08
    12da:	39 85       	ldd	r19, Y+9	; 0x09
    12dc:	26 30       	cpi	r18, 0x06	; 6
    12de:	31 05       	cpc	r19, r1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <DIO_voidSetPinDirection+0x202>
    12e2:	54 c0       	rjmp	.+168    	; 0x138c <DIO_voidSetPinDirection+0x2aa>
    12e4:	88 85       	ldd	r24, Y+8	; 0x08
    12e6:	99 85       	ldd	r25, Y+9	; 0x09
    12e8:	87 30       	cpi	r24, 0x07	; 7
    12ea:	91 05       	cpc	r25, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <DIO_voidSetPinDirection+0x20e>
    12ee:	5d c0       	rjmp	.+186    	; 0x13aa <DIO_voidSetPinDirection+0x2c8>
    12f0:	aa c1       	rjmp	.+852    	; 0x1646 <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRB.Bit.B0 = Copy_Direction;
    12f2:	e0 e3       	ldi	r30, 0x30	; 48
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	81 70       	andi	r24, 0x01	; 1
    12fa:	98 2f       	mov	r25, r24
    12fc:	91 70       	andi	r25, 0x01	; 1
    12fe:	87 81       	ldd	r24, Z+7	; 0x07
    1300:	8e 7f       	andi	r24, 0xFE	; 254
    1302:	89 2b       	or	r24, r25
    1304:	87 83       	std	Z+7, r24	; 0x07
    1306:	9f c1       	rjmp	.+830    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRB.Bit.B1 = Copy_Direction;
    1308:	e0 e3       	ldi	r30, 0x30	; 48
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	81 70       	andi	r24, 0x01	; 1
    1310:	81 70       	andi	r24, 0x01	; 1
    1312:	98 2f       	mov	r25, r24
    1314:	99 0f       	add	r25, r25
    1316:	87 81       	ldd	r24, Z+7	; 0x07
    1318:	8d 7f       	andi	r24, 0xFD	; 253
    131a:	89 2b       	or	r24, r25
    131c:	87 83       	std	Z+7, r24	; 0x07
    131e:	93 c1       	rjmp	.+806    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRB.Bit.B2 = Copy_Direction;
    1320:	e0 e3       	ldi	r30, 0x30	; 48
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	81 70       	andi	r24, 0x01	; 1
    1328:	81 70       	andi	r24, 0x01	; 1
    132a:	98 2f       	mov	r25, r24
    132c:	99 0f       	add	r25, r25
    132e:	99 0f       	add	r25, r25
    1330:	87 81       	ldd	r24, Z+7	; 0x07
    1332:	8b 7f       	andi	r24, 0xFB	; 251
    1334:	89 2b       	or	r24, r25
    1336:	87 83       	std	Z+7, r24	; 0x07
    1338:	86 c1       	rjmp	.+780    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRB.Bit.B3 = Copy_Direction;
    133a:	e0 e3       	ldi	r30, 0x30	; 48
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	81 70       	andi	r24, 0x01	; 1
    1342:	81 70       	andi	r24, 0x01	; 1
    1344:	98 2f       	mov	r25, r24
    1346:	99 0f       	add	r25, r25
    1348:	99 0f       	add	r25, r25
    134a:	99 0f       	add	r25, r25
    134c:	87 81       	ldd	r24, Z+7	; 0x07
    134e:	87 7f       	andi	r24, 0xF7	; 247
    1350:	89 2b       	or	r24, r25
    1352:	87 83       	std	Z+7, r24	; 0x07
    1354:	78 c1       	rjmp	.+752    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRB.Bit.B4 = Copy_Direction;
    1356:	e0 e3       	ldi	r30, 0x30	; 48
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	81 70       	andi	r24, 0x01	; 1
    135e:	81 70       	andi	r24, 0x01	; 1
    1360:	98 2f       	mov	r25, r24
    1362:	92 95       	swap	r25
    1364:	90 7f       	andi	r25, 0xF0	; 240
    1366:	87 81       	ldd	r24, Z+7	; 0x07
    1368:	8f 7e       	andi	r24, 0xEF	; 239
    136a:	89 2b       	or	r24, r25
    136c:	87 83       	std	Z+7, r24	; 0x07
    136e:	6b c1       	rjmp	.+726    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRB.Bit.B5 = Copy_Direction;
    1370:	e0 e3       	ldi	r30, 0x30	; 48
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	81 70       	andi	r24, 0x01	; 1
    1378:	81 70       	andi	r24, 0x01	; 1
    137a:	98 2f       	mov	r25, r24
    137c:	92 95       	swap	r25
    137e:	99 0f       	add	r25, r25
    1380:	90 7e       	andi	r25, 0xE0	; 224
    1382:	87 81       	ldd	r24, Z+7	; 0x07
    1384:	8f 7d       	andi	r24, 0xDF	; 223
    1386:	89 2b       	or	r24, r25
    1388:	87 83       	std	Z+7, r24	; 0x07
    138a:	5d c1       	rjmp	.+698    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRB.Bit.B6 = Copy_Direction;
    138c:	e0 e3       	ldi	r30, 0x30	; 48
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	81 70       	andi	r24, 0x01	; 1
    1394:	81 70       	andi	r24, 0x01	; 1
    1396:	98 2f       	mov	r25, r24
    1398:	92 95       	swap	r25
    139a:	99 0f       	add	r25, r25
    139c:	99 0f       	add	r25, r25
    139e:	90 7c       	andi	r25, 0xC0	; 192
    13a0:	87 81       	ldd	r24, Z+7	; 0x07
    13a2:	8f 7b       	andi	r24, 0xBF	; 191
    13a4:	89 2b       	or	r24, r25
    13a6:	87 83       	std	Z+7, r24	; 0x07
    13a8:	4e c1       	rjmp	.+668    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRB.Bit.B7 = Copy_Direction;
    13aa:	e0 e3       	ldi	r30, 0x30	; 48
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	81 70       	andi	r24, 0x01	; 1
    13b2:	98 2f       	mov	r25, r24
    13b4:	97 95       	ror	r25
    13b6:	99 27       	eor	r25, r25
    13b8:	97 95       	ror	r25
    13ba:	87 81       	ldd	r24, Z+7	; 0x07
    13bc:	8f 77       	andi	r24, 0x7F	; 127
    13be:	89 2b       	or	r24, r25
    13c0:	87 83       	std	Z+7, r24	; 0x07
    13c2:	41 c1       	rjmp	.+642    	; 0x1646 <DIO_voidSetPinDirection+0x564>
			}
			break;


		case PORT_C:
			switch(Copy_PinId)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3f 83       	std	Y+7, r19	; 0x07
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	8e 81       	ldd	r24, Y+6	; 0x06
    13d0:	9f 81       	ldd	r25, Y+7	; 0x07
    13d2:	83 30       	cpi	r24, 0x03	; 3
    13d4:	91 05       	cpc	r25, r1
    13d6:	09 f4       	brne	.+2      	; 0x13da <DIO_voidSetPinDirection+0x2f8>
    13d8:	51 c0       	rjmp	.+162    	; 0x147c <DIO_voidSetPinDirection+0x39a>
    13da:	2e 81       	ldd	r18, Y+6	; 0x06
    13dc:	3f 81       	ldd	r19, Y+7	; 0x07
    13de:	24 30       	cpi	r18, 0x04	; 4
    13e0:	31 05       	cpc	r19, r1
    13e2:	7c f4       	brge	.+30     	; 0x1402 <DIO_voidSetPinDirection+0x320>
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	91 05       	cpc	r25, r1
    13ec:	71 f1       	breq	.+92     	; 0x144a <DIO_voidSetPinDirection+0x368>
    13ee:	2e 81       	ldd	r18, Y+6	; 0x06
    13f0:	3f 81       	ldd	r19, Y+7	; 0x07
    13f2:	22 30       	cpi	r18, 0x02	; 2
    13f4:	31 05       	cpc	r19, r1
    13f6:	ac f5       	brge	.+106    	; 0x1462 <DIO_voidSetPinDirection+0x380>
    13f8:	8e 81       	ldd	r24, Y+6	; 0x06
    13fa:	9f 81       	ldd	r25, Y+7	; 0x07
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	d1 f0       	breq	.+52     	; 0x1434 <DIO_voidSetPinDirection+0x352>
    1400:	22 c1       	rjmp	.+580    	; 0x1646 <DIO_voidSetPinDirection+0x564>
    1402:	2e 81       	ldd	r18, Y+6	; 0x06
    1404:	3f 81       	ldd	r19, Y+7	; 0x07
    1406:	25 30       	cpi	r18, 0x05	; 5
    1408:	31 05       	cpc	r19, r1
    140a:	09 f4       	brne	.+2      	; 0x140e <DIO_voidSetPinDirection+0x32c>
    140c:	52 c0       	rjmp	.+164    	; 0x14b2 <DIO_voidSetPinDirection+0x3d0>
    140e:	8e 81       	ldd	r24, Y+6	; 0x06
    1410:	9f 81       	ldd	r25, Y+7	; 0x07
    1412:	85 30       	cpi	r24, 0x05	; 5
    1414:	91 05       	cpc	r25, r1
    1416:	0c f4       	brge	.+2      	; 0x141a <DIO_voidSetPinDirection+0x338>
    1418:	3f c0       	rjmp	.+126    	; 0x1498 <DIO_voidSetPinDirection+0x3b6>
    141a:	2e 81       	ldd	r18, Y+6	; 0x06
    141c:	3f 81       	ldd	r19, Y+7	; 0x07
    141e:	26 30       	cpi	r18, 0x06	; 6
    1420:	31 05       	cpc	r19, r1
    1422:	09 f4       	brne	.+2      	; 0x1426 <DIO_voidSetPinDirection+0x344>
    1424:	54 c0       	rjmp	.+168    	; 0x14ce <DIO_voidSetPinDirection+0x3ec>
    1426:	8e 81       	ldd	r24, Y+6	; 0x06
    1428:	9f 81       	ldd	r25, Y+7	; 0x07
    142a:	87 30       	cpi	r24, 0x07	; 7
    142c:	91 05       	cpc	r25, r1
    142e:	09 f4       	brne	.+2      	; 0x1432 <DIO_voidSetPinDirection+0x350>
    1430:	5d c0       	rjmp	.+186    	; 0x14ec <DIO_voidSetPinDirection+0x40a>
    1432:	09 c1       	rjmp	.+530    	; 0x1646 <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRC.Bit.B0 = Copy_Direction;
    1434:	e0 e3       	ldi	r30, 0x30	; 48
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	81 70       	andi	r24, 0x01	; 1
    143c:	98 2f       	mov	r25, r24
    143e:	91 70       	andi	r25, 0x01	; 1
    1440:	84 81       	ldd	r24, Z+4	; 0x04
    1442:	8e 7f       	andi	r24, 0xFE	; 254
    1444:	89 2b       	or	r24, r25
    1446:	84 83       	std	Z+4, r24	; 0x04
    1448:	fe c0       	rjmp	.+508    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRC.Bit.B1 = Copy_Direction;
    144a:	e0 e3       	ldi	r30, 0x30	; 48
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	81 70       	andi	r24, 0x01	; 1
    1452:	81 70       	andi	r24, 0x01	; 1
    1454:	98 2f       	mov	r25, r24
    1456:	99 0f       	add	r25, r25
    1458:	84 81       	ldd	r24, Z+4	; 0x04
    145a:	8d 7f       	andi	r24, 0xFD	; 253
    145c:	89 2b       	or	r24, r25
    145e:	84 83       	std	Z+4, r24	; 0x04
    1460:	f2 c0       	rjmp	.+484    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRC.Bit.B2 = Copy_Direction;
    1462:	e0 e3       	ldi	r30, 0x30	; 48
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	81 70       	andi	r24, 0x01	; 1
    146a:	81 70       	andi	r24, 0x01	; 1
    146c:	98 2f       	mov	r25, r24
    146e:	99 0f       	add	r25, r25
    1470:	99 0f       	add	r25, r25
    1472:	84 81       	ldd	r24, Z+4	; 0x04
    1474:	8b 7f       	andi	r24, 0xFB	; 251
    1476:	89 2b       	or	r24, r25
    1478:	84 83       	std	Z+4, r24	; 0x04
    147a:	e5 c0       	rjmp	.+458    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRC.Bit.B3 = Copy_Direction;
    147c:	e0 e3       	ldi	r30, 0x30	; 48
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	81 70       	andi	r24, 0x01	; 1
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	98 2f       	mov	r25, r24
    1488:	99 0f       	add	r25, r25
    148a:	99 0f       	add	r25, r25
    148c:	99 0f       	add	r25, r25
    148e:	84 81       	ldd	r24, Z+4	; 0x04
    1490:	87 7f       	andi	r24, 0xF7	; 247
    1492:	89 2b       	or	r24, r25
    1494:	84 83       	std	Z+4, r24	; 0x04
    1496:	d7 c0       	rjmp	.+430    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRC.Bit.B4 = Copy_Direction;
    1498:	e0 e3       	ldi	r30, 0x30	; 48
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	81 70       	andi	r24, 0x01	; 1
    14a0:	81 70       	andi	r24, 0x01	; 1
    14a2:	98 2f       	mov	r25, r24
    14a4:	92 95       	swap	r25
    14a6:	90 7f       	andi	r25, 0xF0	; 240
    14a8:	84 81       	ldd	r24, Z+4	; 0x04
    14aa:	8f 7e       	andi	r24, 0xEF	; 239
    14ac:	89 2b       	or	r24, r25
    14ae:	84 83       	std	Z+4, r24	; 0x04
    14b0:	ca c0       	rjmp	.+404    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRC.Bit.B5 = Copy_Direction;
    14b2:	e0 e3       	ldi	r30, 0x30	; 48
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	81 70       	andi	r24, 0x01	; 1
    14ba:	81 70       	andi	r24, 0x01	; 1
    14bc:	98 2f       	mov	r25, r24
    14be:	92 95       	swap	r25
    14c0:	99 0f       	add	r25, r25
    14c2:	90 7e       	andi	r25, 0xE0	; 224
    14c4:	84 81       	ldd	r24, Z+4	; 0x04
    14c6:	8f 7d       	andi	r24, 0xDF	; 223
    14c8:	89 2b       	or	r24, r25
    14ca:	84 83       	std	Z+4, r24	; 0x04
    14cc:	bc c0       	rjmp	.+376    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRC.Bit.B6 = Copy_Direction;
    14ce:	e0 e3       	ldi	r30, 0x30	; 48
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	81 70       	andi	r24, 0x01	; 1
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	98 2f       	mov	r25, r24
    14da:	92 95       	swap	r25
    14dc:	99 0f       	add	r25, r25
    14de:	99 0f       	add	r25, r25
    14e0:	90 7c       	andi	r25, 0xC0	; 192
    14e2:	84 81       	ldd	r24, Z+4	; 0x04
    14e4:	8f 7b       	andi	r24, 0xBF	; 191
    14e6:	89 2b       	or	r24, r25
    14e8:	84 83       	std	Z+4, r24	; 0x04
    14ea:	ad c0       	rjmp	.+346    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRC.Bit.B7 = Copy_Direction;
    14ec:	e0 e3       	ldi	r30, 0x30	; 48
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	81 70       	andi	r24, 0x01	; 1
    14f4:	98 2f       	mov	r25, r24
    14f6:	97 95       	ror	r25
    14f8:	99 27       	eor	r25, r25
    14fa:	97 95       	ror	r25
    14fc:	84 81       	ldd	r24, Z+4	; 0x04
    14fe:	8f 77       	andi	r24, 0x7F	; 127
    1500:	89 2b       	or	r24, r25
    1502:	84 83       	std	Z+4, r24	; 0x04
    1504:	a0 c0       	rjmp	.+320    	; 0x1646 <DIO_voidSetPinDirection+0x564>
				default: break;
			}
			break;

		case PORT_D:
			switch(Copy_PinId)
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3d 83       	std	Y+5, r19	; 0x05
    150e:	2c 83       	std	Y+4, r18	; 0x04
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <DIO_voidSetPinDirection+0x43a>
    151a:	51 c0       	rjmp	.+162    	; 0x15be <DIO_voidSetPinDirection+0x4dc>
    151c:	2c 81       	ldd	r18, Y+4	; 0x04
    151e:	3d 81       	ldd	r19, Y+5	; 0x05
    1520:	24 30       	cpi	r18, 0x04	; 4
    1522:	31 05       	cpc	r19, r1
    1524:	7c f4       	brge	.+30     	; 0x1544 <DIO_voidSetPinDirection+0x462>
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	71 f1       	breq	.+92     	; 0x158c <DIO_voidSetPinDirection+0x4aa>
    1530:	2c 81       	ldd	r18, Y+4	; 0x04
    1532:	3d 81       	ldd	r19, Y+5	; 0x05
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	ac f5       	brge	.+106    	; 0x15a4 <DIO_voidSetPinDirection+0x4c2>
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	d1 f0       	breq	.+52     	; 0x1576 <DIO_voidSetPinDirection+0x494>
    1542:	81 c0       	rjmp	.+258    	; 0x1646 <DIO_voidSetPinDirection+0x564>
    1544:	2c 81       	ldd	r18, Y+4	; 0x04
    1546:	3d 81       	ldd	r19, Y+5	; 0x05
    1548:	25 30       	cpi	r18, 0x05	; 5
    154a:	31 05       	cpc	r19, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <DIO_voidSetPinDirection+0x46e>
    154e:	52 c0       	rjmp	.+164    	; 0x15f4 <DIO_voidSetPinDirection+0x512>
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	9d 81       	ldd	r25, Y+5	; 0x05
    1554:	85 30       	cpi	r24, 0x05	; 5
    1556:	91 05       	cpc	r25, r1
    1558:	0c f4       	brge	.+2      	; 0x155c <DIO_voidSetPinDirection+0x47a>
    155a:	3f c0       	rjmp	.+126    	; 0x15da <DIO_voidSetPinDirection+0x4f8>
    155c:	2c 81       	ldd	r18, Y+4	; 0x04
    155e:	3d 81       	ldd	r19, Y+5	; 0x05
    1560:	26 30       	cpi	r18, 0x06	; 6
    1562:	31 05       	cpc	r19, r1
    1564:	09 f4       	brne	.+2      	; 0x1568 <DIO_voidSetPinDirection+0x486>
    1566:	54 c0       	rjmp	.+168    	; 0x1610 <DIO_voidSetPinDirection+0x52e>
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	87 30       	cpi	r24, 0x07	; 7
    156e:	91 05       	cpc	r25, r1
    1570:	09 f4       	brne	.+2      	; 0x1574 <DIO_voidSetPinDirection+0x492>
    1572:	5d c0       	rjmp	.+186    	; 0x162e <DIO_voidSetPinDirection+0x54c>
    1574:	68 c0       	rjmp	.+208    	; 0x1646 <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRD.Bit.B0 = Copy_Direction;
    1576:	e0 e3       	ldi	r30, 0x30	; 48
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	81 70       	andi	r24, 0x01	; 1
    157e:	98 2f       	mov	r25, r24
    1580:	91 70       	andi	r25, 0x01	; 1
    1582:	81 81       	ldd	r24, Z+1	; 0x01
    1584:	8e 7f       	andi	r24, 0xFE	; 254
    1586:	89 2b       	or	r24, r25
    1588:	81 83       	std	Z+1, r24	; 0x01
    158a:	5d c0       	rjmp	.+186    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRD.Bit.B1 = Copy_Direction;
    158c:	e0 e3       	ldi	r30, 0x30	; 48
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	81 70       	andi	r24, 0x01	; 1
    1594:	81 70       	andi	r24, 0x01	; 1
    1596:	98 2f       	mov	r25, r24
    1598:	99 0f       	add	r25, r25
    159a:	81 81       	ldd	r24, Z+1	; 0x01
    159c:	8d 7f       	andi	r24, 0xFD	; 253
    159e:	89 2b       	or	r24, r25
    15a0:	81 83       	std	Z+1, r24	; 0x01
    15a2:	51 c0       	rjmp	.+162    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRD.Bit.B2 = Copy_Direction;
    15a4:	e0 e3       	ldi	r30, 0x30	; 48
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	81 70       	andi	r24, 0x01	; 1
    15ac:	81 70       	andi	r24, 0x01	; 1
    15ae:	98 2f       	mov	r25, r24
    15b0:	99 0f       	add	r25, r25
    15b2:	99 0f       	add	r25, r25
    15b4:	81 81       	ldd	r24, Z+1	; 0x01
    15b6:	8b 7f       	andi	r24, 0xFB	; 251
    15b8:	89 2b       	or	r24, r25
    15ba:	81 83       	std	Z+1, r24	; 0x01
    15bc:	44 c0       	rjmp	.+136    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRD.Bit.B3 = Copy_Direction;
    15be:	e0 e3       	ldi	r30, 0x30	; 48
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	81 70       	andi	r24, 0x01	; 1
    15c6:	81 70       	andi	r24, 0x01	; 1
    15c8:	98 2f       	mov	r25, r24
    15ca:	99 0f       	add	r25, r25
    15cc:	99 0f       	add	r25, r25
    15ce:	99 0f       	add	r25, r25
    15d0:	81 81       	ldd	r24, Z+1	; 0x01
    15d2:	87 7f       	andi	r24, 0xF7	; 247
    15d4:	89 2b       	or	r24, r25
    15d6:	81 83       	std	Z+1, r24	; 0x01
    15d8:	36 c0       	rjmp	.+108    	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRD.Bit.B4 = Copy_Direction;
    15da:	e0 e3       	ldi	r30, 0x30	; 48
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	81 70       	andi	r24, 0x01	; 1
    15e2:	81 70       	andi	r24, 0x01	; 1
    15e4:	98 2f       	mov	r25, r24
    15e6:	92 95       	swap	r25
    15e8:	90 7f       	andi	r25, 0xF0	; 240
    15ea:	81 81       	ldd	r24, Z+1	; 0x01
    15ec:	8f 7e       	andi	r24, 0xEF	; 239
    15ee:	89 2b       	or	r24, r25
    15f0:	81 83       	std	Z+1, r24	; 0x01
    15f2:	29 c0       	rjmp	.+82     	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRD.Bit.B5 = Copy_Direction;
    15f4:	e0 e3       	ldi	r30, 0x30	; 48
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	81 70       	andi	r24, 0x01	; 1
    15fc:	81 70       	andi	r24, 0x01	; 1
    15fe:	98 2f       	mov	r25, r24
    1600:	92 95       	swap	r25
    1602:	99 0f       	add	r25, r25
    1604:	90 7e       	andi	r25, 0xE0	; 224
    1606:	81 81       	ldd	r24, Z+1	; 0x01
    1608:	8f 7d       	andi	r24, 0xDF	; 223
    160a:	89 2b       	or	r24, r25
    160c:	81 83       	std	Z+1, r24	; 0x01
    160e:	1b c0       	rjmp	.+54     	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRD.Bit.B6 = Copy_Direction;
    1610:	e0 e3       	ldi	r30, 0x30	; 48
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	81 70       	andi	r24, 0x01	; 1
    161a:	98 2f       	mov	r25, r24
    161c:	92 95       	swap	r25
    161e:	99 0f       	add	r25, r25
    1620:	99 0f       	add	r25, r25
    1622:	90 7c       	andi	r25, 0xC0	; 192
    1624:	81 81       	ldd	r24, Z+1	; 0x01
    1626:	8f 7b       	andi	r24, 0xBF	; 191
    1628:	89 2b       	or	r24, r25
    162a:	81 83       	std	Z+1, r24	; 0x01
    162c:	0c c0       	rjmp	.+24     	; 0x1646 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRD.Bit.B7 = Copy_Direction;
    162e:	e0 e3       	ldi	r30, 0x30	; 48
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	81 70       	andi	r24, 0x01	; 1
    1636:	98 2f       	mov	r25, r24
    1638:	97 95       	ror	r25
    163a:	99 27       	eor	r25, r25
    163c:	97 95       	ror	r25
    163e:	81 81       	ldd	r24, Z+1	; 0x01
    1640:	8f 77       	andi	r24, 0x7F	; 127
    1642:	89 2b       	or	r24, r25
    1644:	81 83       	std	Z+1, r24	; 0x01
						break;
				default: break;
			}
			break;
	}
}
    1646:	2d 96       	adiw	r28, 0x0d	; 13
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <DIO_voidSetPinValue>:




void DIO_voidSetPinValue(PORT_t Copy_PortId,PIN_t Copy_PinId,VALUE_t Copy_Value)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	2d 97       	sbiw	r28, 0x0d	; 13
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	6a 83       	std	Y+2, r22	; 0x02
    1670:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_PortId)
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	3d 87       	std	Y+13, r19	; 0x0d
    167a:	2c 87       	std	Y+12, r18	; 0x0c
    167c:	8c 85       	ldd	r24, Y+12	; 0x0c
    167e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	09 f4       	brne	.+2      	; 0x1688 <DIO_voidSetPinValue+0x30>
    1686:	b8 c0       	rjmp	.+368    	; 0x17f8 <DIO_voidSetPinValue+0x1a0>
    1688:	2c 85       	ldd	r18, Y+12	; 0x0c
    168a:	3d 85       	ldd	r19, Y+13	; 0x0d
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	2c f4       	brge	.+10     	; 0x169c <DIO_voidSetPinValue+0x44>
    1692:	8c 85       	ldd	r24, Y+12	; 0x0c
    1694:	9d 85       	ldd	r25, Y+13	; 0x0d
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	71 f0       	breq	.+28     	; 0x16b6 <DIO_voidSetPinValue+0x5e>
    169a:	90 c2       	rjmp	.+1312   	; 0x1bbc <DIO_voidSetPinValue+0x564>
    169c:	2c 85       	ldd	r18, Y+12	; 0x0c
    169e:	3d 85       	ldd	r19, Y+13	; 0x0d
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <DIO_voidSetPinValue+0x50>
    16a6:	49 c1       	rjmp	.+658    	; 0x193a <DIO_voidSetPinValue+0x2e2>
    16a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    16aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    16ac:	83 30       	cpi	r24, 0x03	; 3
    16ae:	91 05       	cpc	r25, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <DIO_voidSetPinValue+0x5c>
    16b2:	e4 c1       	rjmp	.+968    	; 0x1a7c <DIO_voidSetPinValue+0x424>
    16b4:	83 c2       	rjmp	.+1286   	; 0x1bbc <DIO_voidSetPinValue+0x564>
	{
		case PORT_A:
			switch(Copy_PinId)
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	3b 87       	std	Y+11, r19	; 0x0b
    16be:	2a 87       	std	Y+10, r18	; 0x0a
    16c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c4:	83 30       	cpi	r24, 0x03	; 3
    16c6:	91 05       	cpc	r25, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <DIO_voidSetPinValue+0x74>
    16ca:	51 c0       	rjmp	.+162    	; 0x176e <DIO_voidSetPinValue+0x116>
    16cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    16ce:	3b 85       	ldd	r19, Y+11	; 0x0b
    16d0:	24 30       	cpi	r18, 0x04	; 4
    16d2:	31 05       	cpc	r19, r1
    16d4:	7c f4       	brge	.+30     	; 0x16f4 <DIO_voidSetPinValue+0x9c>
    16d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    16d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	91 05       	cpc	r25, r1
    16de:	71 f1       	breq	.+92     	; 0x173c <DIO_voidSetPinValue+0xe4>
    16e0:	2a 85       	ldd	r18, Y+10	; 0x0a
    16e2:	3b 85       	ldd	r19, Y+11	; 0x0b
    16e4:	22 30       	cpi	r18, 0x02	; 2
    16e6:	31 05       	cpc	r19, r1
    16e8:	ac f5       	brge	.+106    	; 0x1754 <DIO_voidSetPinValue+0xfc>
    16ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	d1 f0       	breq	.+52     	; 0x1726 <DIO_voidSetPinValue+0xce>
    16f2:	64 c2       	rjmp	.+1224   	; 0x1bbc <DIO_voidSetPinValue+0x564>
    16f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    16f6:	3b 85       	ldd	r19, Y+11	; 0x0b
    16f8:	25 30       	cpi	r18, 0x05	; 5
    16fa:	31 05       	cpc	r19, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <DIO_voidSetPinValue+0xa8>
    16fe:	52 c0       	rjmp	.+164    	; 0x17a4 <DIO_voidSetPinValue+0x14c>
    1700:	8a 85       	ldd	r24, Y+10	; 0x0a
    1702:	9b 85       	ldd	r25, Y+11	; 0x0b
    1704:	85 30       	cpi	r24, 0x05	; 5
    1706:	91 05       	cpc	r25, r1
    1708:	0c f4       	brge	.+2      	; 0x170c <DIO_voidSetPinValue+0xb4>
    170a:	3f c0       	rjmp	.+126    	; 0x178a <DIO_voidSetPinValue+0x132>
    170c:	2a 85       	ldd	r18, Y+10	; 0x0a
    170e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1710:	26 30       	cpi	r18, 0x06	; 6
    1712:	31 05       	cpc	r19, r1
    1714:	09 f4       	brne	.+2      	; 0x1718 <DIO_voidSetPinValue+0xc0>
    1716:	54 c0       	rjmp	.+168    	; 0x17c0 <DIO_voidSetPinValue+0x168>
    1718:	8a 85       	ldd	r24, Y+10	; 0x0a
    171a:	9b 85       	ldd	r25, Y+11	; 0x0b
    171c:	87 30       	cpi	r24, 0x07	; 7
    171e:	91 05       	cpc	r25, r1
    1720:	09 f4       	brne	.+2      	; 0x1724 <DIO_voidSetPinValue+0xcc>
    1722:	5d c0       	rjmp	.+186    	; 0x17de <DIO_voidSetPinValue+0x186>
    1724:	4b c2       	rjmp	.+1174   	; 0x1bbc <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTA.Bit.B0 = Copy_Value;
    1726:	e0 e3       	ldi	r30, 0x30	; 48
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	81 70       	andi	r24, 0x01	; 1
    172e:	98 2f       	mov	r25, r24
    1730:	91 70       	andi	r25, 0x01	; 1
    1732:	83 85       	ldd	r24, Z+11	; 0x0b
    1734:	8e 7f       	andi	r24, 0xFE	; 254
    1736:	89 2b       	or	r24, r25
    1738:	83 87       	std	Z+11, r24	; 0x0b
    173a:	40 c2       	rjmp	.+1152   	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTA.Bit.B1 = Copy_Value;
    173c:	e0 e3       	ldi	r30, 0x30	; 48
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	81 70       	andi	r24, 0x01	; 1
    1744:	81 70       	andi	r24, 0x01	; 1
    1746:	98 2f       	mov	r25, r24
    1748:	99 0f       	add	r25, r25
    174a:	83 85       	ldd	r24, Z+11	; 0x0b
    174c:	8d 7f       	andi	r24, 0xFD	; 253
    174e:	89 2b       	or	r24, r25
    1750:	83 87       	std	Z+11, r24	; 0x0b
    1752:	34 c2       	rjmp	.+1128   	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTA.Bit.B2 = Copy_Value;
    1754:	e0 e3       	ldi	r30, 0x30	; 48
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	81 70       	andi	r24, 0x01	; 1
    175c:	81 70       	andi	r24, 0x01	; 1
    175e:	98 2f       	mov	r25, r24
    1760:	99 0f       	add	r25, r25
    1762:	99 0f       	add	r25, r25
    1764:	83 85       	ldd	r24, Z+11	; 0x0b
    1766:	8b 7f       	andi	r24, 0xFB	; 251
    1768:	89 2b       	or	r24, r25
    176a:	83 87       	std	Z+11, r24	; 0x0b
    176c:	27 c2       	rjmp	.+1102   	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTA.Bit.B3 = Copy_Value;
    176e:	e0 e3       	ldi	r30, 0x30	; 48
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	81 70       	andi	r24, 0x01	; 1
    1776:	81 70       	andi	r24, 0x01	; 1
    1778:	98 2f       	mov	r25, r24
    177a:	99 0f       	add	r25, r25
    177c:	99 0f       	add	r25, r25
    177e:	99 0f       	add	r25, r25
    1780:	83 85       	ldd	r24, Z+11	; 0x0b
    1782:	87 7f       	andi	r24, 0xF7	; 247
    1784:	89 2b       	or	r24, r25
    1786:	83 87       	std	Z+11, r24	; 0x0b
    1788:	19 c2       	rjmp	.+1074   	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTA.Bit.B4 = Copy_Value;
    178a:	e0 e3       	ldi	r30, 0x30	; 48
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	81 70       	andi	r24, 0x01	; 1
    1792:	81 70       	andi	r24, 0x01	; 1
    1794:	98 2f       	mov	r25, r24
    1796:	92 95       	swap	r25
    1798:	90 7f       	andi	r25, 0xF0	; 240
    179a:	83 85       	ldd	r24, Z+11	; 0x0b
    179c:	8f 7e       	andi	r24, 0xEF	; 239
    179e:	89 2b       	or	r24, r25
    17a0:	83 87       	std	Z+11, r24	; 0x0b
    17a2:	0c c2       	rjmp	.+1048   	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTA.Bit.B5 = Copy_Value;
    17a4:	e0 e3       	ldi	r30, 0x30	; 48
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	81 70       	andi	r24, 0x01	; 1
    17ac:	81 70       	andi	r24, 0x01	; 1
    17ae:	98 2f       	mov	r25, r24
    17b0:	92 95       	swap	r25
    17b2:	99 0f       	add	r25, r25
    17b4:	90 7e       	andi	r25, 0xE0	; 224
    17b6:	83 85       	ldd	r24, Z+11	; 0x0b
    17b8:	8f 7d       	andi	r24, 0xDF	; 223
    17ba:	89 2b       	or	r24, r25
    17bc:	83 87       	std	Z+11, r24	; 0x0b
    17be:	fe c1       	rjmp	.+1020   	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTA.Bit.B6 = Copy_Value;
    17c0:	e0 e3       	ldi	r30, 0x30	; 48
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	81 70       	andi	r24, 0x01	; 1
    17ca:	98 2f       	mov	r25, r24
    17cc:	92 95       	swap	r25
    17ce:	99 0f       	add	r25, r25
    17d0:	99 0f       	add	r25, r25
    17d2:	90 7c       	andi	r25, 0xC0	; 192
    17d4:	83 85       	ldd	r24, Z+11	; 0x0b
    17d6:	8f 7b       	andi	r24, 0xBF	; 191
    17d8:	89 2b       	or	r24, r25
    17da:	83 87       	std	Z+11, r24	; 0x0b
    17dc:	ef c1       	rjmp	.+990    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTA.Bit.B7 = Copy_Value;
    17de:	e0 e3       	ldi	r30, 0x30	; 48
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	81 70       	andi	r24, 0x01	; 1
    17e6:	98 2f       	mov	r25, r24
    17e8:	97 95       	ror	r25
    17ea:	99 27       	eor	r25, r25
    17ec:	97 95       	ror	r25
    17ee:	83 85       	ldd	r24, Z+11	; 0x0b
    17f0:	8f 77       	andi	r24, 0x7F	; 127
    17f2:	89 2b       	or	r24, r25
    17f4:	83 87       	std	Z+11, r24	; 0x0b
    17f6:	e2 c1       	rjmp	.+964    	; 0x1bbc <DIO_voidSetPinValue+0x564>
				default: break;
			}
			break;

		case PORT_B:
			switch(Copy_PinId)
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	39 87       	std	Y+9, r19	; 0x09
    1800:	28 87       	std	Y+8, r18	; 0x08
    1802:	88 85       	ldd	r24, Y+8	; 0x08
    1804:	99 85       	ldd	r25, Y+9	; 0x09
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	91 05       	cpc	r25, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <DIO_voidSetPinValue+0x1b6>
    180c:	51 c0       	rjmp	.+162    	; 0x18b0 <DIO_voidSetPinValue+0x258>
    180e:	28 85       	ldd	r18, Y+8	; 0x08
    1810:	39 85       	ldd	r19, Y+9	; 0x09
    1812:	24 30       	cpi	r18, 0x04	; 4
    1814:	31 05       	cpc	r19, r1
    1816:	7c f4       	brge	.+30     	; 0x1836 <DIO_voidSetPinValue+0x1de>
    1818:	88 85       	ldd	r24, Y+8	; 0x08
    181a:	99 85       	ldd	r25, Y+9	; 0x09
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	91 05       	cpc	r25, r1
    1820:	71 f1       	breq	.+92     	; 0x187e <DIO_voidSetPinValue+0x226>
    1822:	28 85       	ldd	r18, Y+8	; 0x08
    1824:	39 85       	ldd	r19, Y+9	; 0x09
    1826:	22 30       	cpi	r18, 0x02	; 2
    1828:	31 05       	cpc	r19, r1
    182a:	ac f5       	brge	.+106    	; 0x1896 <DIO_voidSetPinValue+0x23e>
    182c:	88 85       	ldd	r24, Y+8	; 0x08
    182e:	99 85       	ldd	r25, Y+9	; 0x09
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	d1 f0       	breq	.+52     	; 0x1868 <DIO_voidSetPinValue+0x210>
    1834:	c3 c1       	rjmp	.+902    	; 0x1bbc <DIO_voidSetPinValue+0x564>
    1836:	28 85       	ldd	r18, Y+8	; 0x08
    1838:	39 85       	ldd	r19, Y+9	; 0x09
    183a:	25 30       	cpi	r18, 0x05	; 5
    183c:	31 05       	cpc	r19, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <DIO_voidSetPinValue+0x1ea>
    1840:	52 c0       	rjmp	.+164    	; 0x18e6 <DIO_voidSetPinValue+0x28e>
    1842:	88 85       	ldd	r24, Y+8	; 0x08
    1844:	99 85       	ldd	r25, Y+9	; 0x09
    1846:	85 30       	cpi	r24, 0x05	; 5
    1848:	91 05       	cpc	r25, r1
    184a:	0c f4       	brge	.+2      	; 0x184e <DIO_voidSetPinValue+0x1f6>
    184c:	3f c0       	rjmp	.+126    	; 0x18cc <DIO_voidSetPinValue+0x274>
    184e:	28 85       	ldd	r18, Y+8	; 0x08
    1850:	39 85       	ldd	r19, Y+9	; 0x09
    1852:	26 30       	cpi	r18, 0x06	; 6
    1854:	31 05       	cpc	r19, r1
    1856:	09 f4       	brne	.+2      	; 0x185a <DIO_voidSetPinValue+0x202>
    1858:	54 c0       	rjmp	.+168    	; 0x1902 <DIO_voidSetPinValue+0x2aa>
    185a:	88 85       	ldd	r24, Y+8	; 0x08
    185c:	99 85       	ldd	r25, Y+9	; 0x09
    185e:	87 30       	cpi	r24, 0x07	; 7
    1860:	91 05       	cpc	r25, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <DIO_voidSetPinValue+0x20e>
    1864:	5d c0       	rjmp	.+186    	; 0x1920 <DIO_voidSetPinValue+0x2c8>
    1866:	aa c1       	rjmp	.+852    	; 0x1bbc <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTB.Bit.B0 = Copy_Value;
    1868:	e0 e3       	ldi	r30, 0x30	; 48
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	81 70       	andi	r24, 0x01	; 1
    1870:	98 2f       	mov	r25, r24
    1872:	91 70       	andi	r25, 0x01	; 1
    1874:	80 85       	ldd	r24, Z+8	; 0x08
    1876:	8e 7f       	andi	r24, 0xFE	; 254
    1878:	89 2b       	or	r24, r25
    187a:	80 87       	std	Z+8, r24	; 0x08
    187c:	9f c1       	rjmp	.+830    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTB.Bit.B1 = Copy_Value;
    187e:	e0 e3       	ldi	r30, 0x30	; 48
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	81 70       	andi	r24, 0x01	; 1
    1886:	81 70       	andi	r24, 0x01	; 1
    1888:	98 2f       	mov	r25, r24
    188a:	99 0f       	add	r25, r25
    188c:	80 85       	ldd	r24, Z+8	; 0x08
    188e:	8d 7f       	andi	r24, 0xFD	; 253
    1890:	89 2b       	or	r24, r25
    1892:	80 87       	std	Z+8, r24	; 0x08
    1894:	93 c1       	rjmp	.+806    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTB.Bit.B2 = Copy_Value;
    1896:	e0 e3       	ldi	r30, 0x30	; 48
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	81 70       	andi	r24, 0x01	; 1
    189e:	81 70       	andi	r24, 0x01	; 1
    18a0:	98 2f       	mov	r25, r24
    18a2:	99 0f       	add	r25, r25
    18a4:	99 0f       	add	r25, r25
    18a6:	80 85       	ldd	r24, Z+8	; 0x08
    18a8:	8b 7f       	andi	r24, 0xFB	; 251
    18aa:	89 2b       	or	r24, r25
    18ac:	80 87       	std	Z+8, r24	; 0x08
    18ae:	86 c1       	rjmp	.+780    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTB.Bit.B3 = Copy_Value;
    18b0:	e0 e3       	ldi	r30, 0x30	; 48
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	81 70       	andi	r24, 0x01	; 1
    18b8:	81 70       	andi	r24, 0x01	; 1
    18ba:	98 2f       	mov	r25, r24
    18bc:	99 0f       	add	r25, r25
    18be:	99 0f       	add	r25, r25
    18c0:	99 0f       	add	r25, r25
    18c2:	80 85       	ldd	r24, Z+8	; 0x08
    18c4:	87 7f       	andi	r24, 0xF7	; 247
    18c6:	89 2b       	or	r24, r25
    18c8:	80 87       	std	Z+8, r24	; 0x08
    18ca:	78 c1       	rjmp	.+752    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTB.Bit.B4 = Copy_Value;
    18cc:	e0 e3       	ldi	r30, 0x30	; 48
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	81 70       	andi	r24, 0x01	; 1
    18d4:	81 70       	andi	r24, 0x01	; 1
    18d6:	98 2f       	mov	r25, r24
    18d8:	92 95       	swap	r25
    18da:	90 7f       	andi	r25, 0xF0	; 240
    18dc:	80 85       	ldd	r24, Z+8	; 0x08
    18de:	8f 7e       	andi	r24, 0xEF	; 239
    18e0:	89 2b       	or	r24, r25
    18e2:	80 87       	std	Z+8, r24	; 0x08
    18e4:	6b c1       	rjmp	.+726    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTB.Bit.B5 = Copy_Value;
    18e6:	e0 e3       	ldi	r30, 0x30	; 48
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	81 70       	andi	r24, 0x01	; 1
    18ee:	81 70       	andi	r24, 0x01	; 1
    18f0:	98 2f       	mov	r25, r24
    18f2:	92 95       	swap	r25
    18f4:	99 0f       	add	r25, r25
    18f6:	90 7e       	andi	r25, 0xE0	; 224
    18f8:	80 85       	ldd	r24, Z+8	; 0x08
    18fa:	8f 7d       	andi	r24, 0xDF	; 223
    18fc:	89 2b       	or	r24, r25
    18fe:	80 87       	std	Z+8, r24	; 0x08
    1900:	5d c1       	rjmp	.+698    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTB.Bit.B6 = Copy_Value;
    1902:	e0 e3       	ldi	r30, 0x30	; 48
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	81 70       	andi	r24, 0x01	; 1
    190a:	81 70       	andi	r24, 0x01	; 1
    190c:	98 2f       	mov	r25, r24
    190e:	92 95       	swap	r25
    1910:	99 0f       	add	r25, r25
    1912:	99 0f       	add	r25, r25
    1914:	90 7c       	andi	r25, 0xC0	; 192
    1916:	80 85       	ldd	r24, Z+8	; 0x08
    1918:	8f 7b       	andi	r24, 0xBF	; 191
    191a:	89 2b       	or	r24, r25
    191c:	80 87       	std	Z+8, r24	; 0x08
    191e:	4e c1       	rjmp	.+668    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTB.Bit.B7 = Copy_Value;
    1920:	e0 e3       	ldi	r30, 0x30	; 48
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	81 70       	andi	r24, 0x01	; 1
    1928:	98 2f       	mov	r25, r24
    192a:	97 95       	ror	r25
    192c:	99 27       	eor	r25, r25
    192e:	97 95       	ror	r25
    1930:	80 85       	ldd	r24, Z+8	; 0x08
    1932:	8f 77       	andi	r24, 0x7F	; 127
    1934:	89 2b       	or	r24, r25
    1936:	80 87       	std	Z+8, r24	; 0x08
    1938:	41 c1       	rjmp	.+642    	; 0x1bbc <DIO_voidSetPinValue+0x564>
			}
			break;


		case PORT_C:
			switch(Copy_PinId)
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3f 83       	std	Y+7, r19	; 0x07
    1942:	2e 83       	std	Y+6, r18	; 0x06
    1944:	8e 81       	ldd	r24, Y+6	; 0x06
    1946:	9f 81       	ldd	r25, Y+7	; 0x07
    1948:	83 30       	cpi	r24, 0x03	; 3
    194a:	91 05       	cpc	r25, r1
    194c:	09 f4       	brne	.+2      	; 0x1950 <DIO_voidSetPinValue+0x2f8>
    194e:	51 c0       	rjmp	.+162    	; 0x19f2 <DIO_voidSetPinValue+0x39a>
    1950:	2e 81       	ldd	r18, Y+6	; 0x06
    1952:	3f 81       	ldd	r19, Y+7	; 0x07
    1954:	24 30       	cpi	r18, 0x04	; 4
    1956:	31 05       	cpc	r19, r1
    1958:	7c f4       	brge	.+30     	; 0x1978 <DIO_voidSetPinValue+0x320>
    195a:	8e 81       	ldd	r24, Y+6	; 0x06
    195c:	9f 81       	ldd	r25, Y+7	; 0x07
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	91 05       	cpc	r25, r1
    1962:	71 f1       	breq	.+92     	; 0x19c0 <DIO_voidSetPinValue+0x368>
    1964:	2e 81       	ldd	r18, Y+6	; 0x06
    1966:	3f 81       	ldd	r19, Y+7	; 0x07
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	ac f5       	brge	.+106    	; 0x19d8 <DIO_voidSetPinValue+0x380>
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	d1 f0       	breq	.+52     	; 0x19aa <DIO_voidSetPinValue+0x352>
    1976:	22 c1       	rjmp	.+580    	; 0x1bbc <DIO_voidSetPinValue+0x564>
    1978:	2e 81       	ldd	r18, Y+6	; 0x06
    197a:	3f 81       	ldd	r19, Y+7	; 0x07
    197c:	25 30       	cpi	r18, 0x05	; 5
    197e:	31 05       	cpc	r19, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <DIO_voidSetPinValue+0x32c>
    1982:	52 c0       	rjmp	.+164    	; 0x1a28 <DIO_voidSetPinValue+0x3d0>
    1984:	8e 81       	ldd	r24, Y+6	; 0x06
    1986:	9f 81       	ldd	r25, Y+7	; 0x07
    1988:	85 30       	cpi	r24, 0x05	; 5
    198a:	91 05       	cpc	r25, r1
    198c:	0c f4       	brge	.+2      	; 0x1990 <DIO_voidSetPinValue+0x338>
    198e:	3f c0       	rjmp	.+126    	; 0x1a0e <DIO_voidSetPinValue+0x3b6>
    1990:	2e 81       	ldd	r18, Y+6	; 0x06
    1992:	3f 81       	ldd	r19, Y+7	; 0x07
    1994:	26 30       	cpi	r18, 0x06	; 6
    1996:	31 05       	cpc	r19, r1
    1998:	09 f4       	brne	.+2      	; 0x199c <DIO_voidSetPinValue+0x344>
    199a:	54 c0       	rjmp	.+168    	; 0x1a44 <DIO_voidSetPinValue+0x3ec>
    199c:	8e 81       	ldd	r24, Y+6	; 0x06
    199e:	9f 81       	ldd	r25, Y+7	; 0x07
    19a0:	87 30       	cpi	r24, 0x07	; 7
    19a2:	91 05       	cpc	r25, r1
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <DIO_voidSetPinValue+0x350>
    19a6:	5d c0       	rjmp	.+186    	; 0x1a62 <DIO_voidSetPinValue+0x40a>
    19a8:	09 c1       	rjmp	.+530    	; 0x1bbc <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTC.Bit.B0 = Copy_Value;
    19aa:	e0 e3       	ldi	r30, 0x30	; 48
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	81 70       	andi	r24, 0x01	; 1
    19b2:	98 2f       	mov	r25, r24
    19b4:	91 70       	andi	r25, 0x01	; 1
    19b6:	85 81       	ldd	r24, Z+5	; 0x05
    19b8:	8e 7f       	andi	r24, 0xFE	; 254
    19ba:	89 2b       	or	r24, r25
    19bc:	85 83       	std	Z+5, r24	; 0x05
    19be:	fe c0       	rjmp	.+508    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTC.Bit.B1 = Copy_Value;
    19c0:	e0 e3       	ldi	r30, 0x30	; 48
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	81 70       	andi	r24, 0x01	; 1
    19c8:	81 70       	andi	r24, 0x01	; 1
    19ca:	98 2f       	mov	r25, r24
    19cc:	99 0f       	add	r25, r25
    19ce:	85 81       	ldd	r24, Z+5	; 0x05
    19d0:	8d 7f       	andi	r24, 0xFD	; 253
    19d2:	89 2b       	or	r24, r25
    19d4:	85 83       	std	Z+5, r24	; 0x05
    19d6:	f2 c0       	rjmp	.+484    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTC.Bit.B2 = Copy_Value;
    19d8:	e0 e3       	ldi	r30, 0x30	; 48
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	81 70       	andi	r24, 0x01	; 1
    19e0:	81 70       	andi	r24, 0x01	; 1
    19e2:	98 2f       	mov	r25, r24
    19e4:	99 0f       	add	r25, r25
    19e6:	99 0f       	add	r25, r25
    19e8:	85 81       	ldd	r24, Z+5	; 0x05
    19ea:	8b 7f       	andi	r24, 0xFB	; 251
    19ec:	89 2b       	or	r24, r25
    19ee:	85 83       	std	Z+5, r24	; 0x05
    19f0:	e5 c0       	rjmp	.+458    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTC.Bit.B3 = Copy_Value;
    19f2:	e0 e3       	ldi	r30, 0x30	; 48
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	81 70       	andi	r24, 0x01	; 1
    19fa:	81 70       	andi	r24, 0x01	; 1
    19fc:	98 2f       	mov	r25, r24
    19fe:	99 0f       	add	r25, r25
    1a00:	99 0f       	add	r25, r25
    1a02:	99 0f       	add	r25, r25
    1a04:	85 81       	ldd	r24, Z+5	; 0x05
    1a06:	87 7f       	andi	r24, 0xF7	; 247
    1a08:	89 2b       	or	r24, r25
    1a0a:	85 83       	std	Z+5, r24	; 0x05
    1a0c:	d7 c0       	rjmp	.+430    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTC.Bit.B4 = Copy_Value;
    1a0e:	e0 e3       	ldi	r30, 0x30	; 48
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	81 70       	andi	r24, 0x01	; 1
    1a16:	81 70       	andi	r24, 0x01	; 1
    1a18:	98 2f       	mov	r25, r24
    1a1a:	92 95       	swap	r25
    1a1c:	90 7f       	andi	r25, 0xF0	; 240
    1a1e:	85 81       	ldd	r24, Z+5	; 0x05
    1a20:	8f 7e       	andi	r24, 0xEF	; 239
    1a22:	89 2b       	or	r24, r25
    1a24:	85 83       	std	Z+5, r24	; 0x05
    1a26:	ca c0       	rjmp	.+404    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTC.Bit.B5 = Copy_Value;
    1a28:	e0 e3       	ldi	r30, 0x30	; 48
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	81 70       	andi	r24, 0x01	; 1
    1a30:	81 70       	andi	r24, 0x01	; 1
    1a32:	98 2f       	mov	r25, r24
    1a34:	92 95       	swap	r25
    1a36:	99 0f       	add	r25, r25
    1a38:	90 7e       	andi	r25, 0xE0	; 224
    1a3a:	85 81       	ldd	r24, Z+5	; 0x05
    1a3c:	8f 7d       	andi	r24, 0xDF	; 223
    1a3e:	89 2b       	or	r24, r25
    1a40:	85 83       	std	Z+5, r24	; 0x05
    1a42:	bc c0       	rjmp	.+376    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTC.Bit.B6 = Copy_Value;
    1a44:	e0 e3       	ldi	r30, 0x30	; 48
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	81 70       	andi	r24, 0x01	; 1
    1a4c:	81 70       	andi	r24, 0x01	; 1
    1a4e:	98 2f       	mov	r25, r24
    1a50:	92 95       	swap	r25
    1a52:	99 0f       	add	r25, r25
    1a54:	99 0f       	add	r25, r25
    1a56:	90 7c       	andi	r25, 0xC0	; 192
    1a58:	85 81       	ldd	r24, Z+5	; 0x05
    1a5a:	8f 7b       	andi	r24, 0xBF	; 191
    1a5c:	89 2b       	or	r24, r25
    1a5e:	85 83       	std	Z+5, r24	; 0x05
    1a60:	ad c0       	rjmp	.+346    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTC.Bit.B7 = Copy_Value;
    1a62:	e0 e3       	ldi	r30, 0x30	; 48
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	81 70       	andi	r24, 0x01	; 1
    1a6a:	98 2f       	mov	r25, r24
    1a6c:	97 95       	ror	r25
    1a6e:	99 27       	eor	r25, r25
    1a70:	97 95       	ror	r25
    1a72:	85 81       	ldd	r24, Z+5	; 0x05
    1a74:	8f 77       	andi	r24, 0x7F	; 127
    1a76:	89 2b       	or	r24, r25
    1a78:	85 83       	std	Z+5, r24	; 0x05
    1a7a:	a0 c0       	rjmp	.+320    	; 0x1bbc <DIO_voidSetPinValue+0x564>
				default: break;
			}
			break;

		case PORT_D:
			switch(Copy_PinId)
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	3d 83       	std	Y+5, r19	; 0x05
    1a84:	2c 83       	std	Y+4, r18	; 0x04
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8a:	83 30       	cpi	r24, 0x03	; 3
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <DIO_voidSetPinValue+0x43a>
    1a90:	51 c0       	rjmp	.+162    	; 0x1b34 <DIO_voidSetPinValue+0x4dc>
    1a92:	2c 81       	ldd	r18, Y+4	; 0x04
    1a94:	3d 81       	ldd	r19, Y+5	; 0x05
    1a96:	24 30       	cpi	r18, 0x04	; 4
    1a98:	31 05       	cpc	r19, r1
    1a9a:	7c f4       	brge	.+30     	; 0x1aba <DIO_voidSetPinValue+0x462>
    1a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	71 f1       	breq	.+92     	; 0x1b02 <DIO_voidSetPinValue+0x4aa>
    1aa6:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	ac f5       	brge	.+106    	; 0x1b1a <DIO_voidSetPinValue+0x4c2>
    1ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	d1 f0       	breq	.+52     	; 0x1aec <DIO_voidSetPinValue+0x494>
    1ab8:	81 c0       	rjmp	.+258    	; 0x1bbc <DIO_voidSetPinValue+0x564>
    1aba:	2c 81       	ldd	r18, Y+4	; 0x04
    1abc:	3d 81       	ldd	r19, Y+5	; 0x05
    1abe:	25 30       	cpi	r18, 0x05	; 5
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <DIO_voidSetPinValue+0x46e>
    1ac4:	52 c0       	rjmp	.+164    	; 0x1b6a <DIO_voidSetPinValue+0x512>
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aca:	85 30       	cpi	r24, 0x05	; 5
    1acc:	91 05       	cpc	r25, r1
    1ace:	0c f4       	brge	.+2      	; 0x1ad2 <DIO_voidSetPinValue+0x47a>
    1ad0:	3f c0       	rjmp	.+126    	; 0x1b50 <DIO_voidSetPinValue+0x4f8>
    1ad2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad6:	26 30       	cpi	r18, 0x06	; 6
    1ad8:	31 05       	cpc	r19, r1
    1ada:	09 f4       	brne	.+2      	; 0x1ade <DIO_voidSetPinValue+0x486>
    1adc:	54 c0       	rjmp	.+168    	; 0x1b86 <DIO_voidSetPinValue+0x52e>
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae2:	87 30       	cpi	r24, 0x07	; 7
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <DIO_voidSetPinValue+0x492>
    1ae8:	5d c0       	rjmp	.+186    	; 0x1ba4 <DIO_voidSetPinValue+0x54c>
    1aea:	68 c0       	rjmp	.+208    	; 0x1bbc <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTD.Bit.B0 = Copy_Value;
    1aec:	e0 e3       	ldi	r30, 0x30	; 48
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	81 70       	andi	r24, 0x01	; 1
    1af4:	98 2f       	mov	r25, r24
    1af6:	91 70       	andi	r25, 0x01	; 1
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	8e 7f       	andi	r24, 0xFE	; 254
    1afc:	89 2b       	or	r24, r25
    1afe:	82 83       	std	Z+2, r24	; 0x02
    1b00:	5d c0       	rjmp	.+186    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTD.Bit.B1 = Copy_Value;
    1b02:	e0 e3       	ldi	r30, 0x30	; 48
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	81 70       	andi	r24, 0x01	; 1
    1b0a:	81 70       	andi	r24, 0x01	; 1
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	99 0f       	add	r25, r25
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	8d 7f       	andi	r24, 0xFD	; 253
    1b14:	89 2b       	or	r24, r25
    1b16:	82 83       	std	Z+2, r24	; 0x02
    1b18:	51 c0       	rjmp	.+162    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTD.Bit.B2 = Copy_Value;
    1b1a:	e0 e3       	ldi	r30, 0x30	; 48
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	81 70       	andi	r24, 0x01	; 1
    1b22:	81 70       	andi	r24, 0x01	; 1
    1b24:	98 2f       	mov	r25, r24
    1b26:	99 0f       	add	r25, r25
    1b28:	99 0f       	add	r25, r25
    1b2a:	82 81       	ldd	r24, Z+2	; 0x02
    1b2c:	8b 7f       	andi	r24, 0xFB	; 251
    1b2e:	89 2b       	or	r24, r25
    1b30:	82 83       	std	Z+2, r24	; 0x02
    1b32:	44 c0       	rjmp	.+136    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTD.Bit.B3 = Copy_Value;
    1b34:	e0 e3       	ldi	r30, 0x30	; 48
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	81 70       	andi	r24, 0x01	; 1
    1b3c:	81 70       	andi	r24, 0x01	; 1
    1b3e:	98 2f       	mov	r25, r24
    1b40:	99 0f       	add	r25, r25
    1b42:	99 0f       	add	r25, r25
    1b44:	99 0f       	add	r25, r25
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	87 7f       	andi	r24, 0xF7	; 247
    1b4a:	89 2b       	or	r24, r25
    1b4c:	82 83       	std	Z+2, r24	; 0x02
    1b4e:	36 c0       	rjmp	.+108    	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTD.Bit.B4 = Copy_Value;
    1b50:	e0 e3       	ldi	r30, 0x30	; 48
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	81 70       	andi	r24, 0x01	; 1
    1b58:	81 70       	andi	r24, 0x01	; 1
    1b5a:	98 2f       	mov	r25, r24
    1b5c:	92 95       	swap	r25
    1b5e:	90 7f       	andi	r25, 0xF0	; 240
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	8f 7e       	andi	r24, 0xEF	; 239
    1b64:	89 2b       	or	r24, r25
    1b66:	82 83       	std	Z+2, r24	; 0x02
    1b68:	29 c0       	rjmp	.+82     	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTD.Bit.B5 = Copy_Value;
    1b6a:	e0 e3       	ldi	r30, 0x30	; 48
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	81 70       	andi	r24, 0x01	; 1
    1b72:	81 70       	andi	r24, 0x01	; 1
    1b74:	98 2f       	mov	r25, r24
    1b76:	92 95       	swap	r25
    1b78:	99 0f       	add	r25, r25
    1b7a:	90 7e       	andi	r25, 0xE0	; 224
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	8f 7d       	andi	r24, 0xDF	; 223
    1b80:	89 2b       	or	r24, r25
    1b82:	82 83       	std	Z+2, r24	; 0x02
    1b84:	1b c0       	rjmp	.+54     	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTD.Bit.B6 = Copy_Value;
    1b86:	e0 e3       	ldi	r30, 0x30	; 48
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	81 70       	andi	r24, 0x01	; 1
    1b8e:	81 70       	andi	r24, 0x01	; 1
    1b90:	98 2f       	mov	r25, r24
    1b92:	92 95       	swap	r25
    1b94:	99 0f       	add	r25, r25
    1b96:	99 0f       	add	r25, r25
    1b98:	90 7c       	andi	r25, 0xC0	; 192
    1b9a:	82 81       	ldd	r24, Z+2	; 0x02
    1b9c:	8f 7b       	andi	r24, 0xBF	; 191
    1b9e:	89 2b       	or	r24, r25
    1ba0:	82 83       	std	Z+2, r24	; 0x02
    1ba2:	0c c0       	rjmp	.+24     	; 0x1bbc <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTD.Bit.B7 = Copy_Value;
    1ba4:	e0 e3       	ldi	r30, 0x30	; 48
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	81 70       	andi	r24, 0x01	; 1
    1bac:	98 2f       	mov	r25, r24
    1bae:	97 95       	ror	r25
    1bb0:	99 27       	eor	r25, r25
    1bb2:	97 95       	ror	r25
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	8f 77       	andi	r24, 0x7F	; 127
    1bb8:	89 2b       	or	r24, r25
    1bba:	82 83       	std	Z+2, r24	; 0x02
						break;
				default: break;
			}
			break;
	}
}
    1bbc:	2d 96       	adiw	r28, 0x0d	; 13
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <DIO_voidGetPinValue>:

u8 DIO_voidGetPinValue(PORT_t Copy_PortId,PIN_t Copy_PinId)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	2d 97       	sbiw	r28, 0x0d	; 13
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	8a 83       	std	Y+2, r24	; 0x02
    1be4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Pin;
	switch(Copy_PortId)
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	3d 87       	std	Y+13, r19	; 0x0d
    1bee:	2c 87       	std	Y+12, r18	; 0x0c
    1bf0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bf2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <DIO_voidGetPinValue+0x2e>
    1bfa:	8c c0       	rjmp	.+280    	; 0x1d14 <DIO_voidGetPinValue+0x146>
    1bfc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bfe:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c00:	22 30       	cpi	r18, 0x02	; 2
    1c02:	31 05       	cpc	r19, r1
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <DIO_voidGetPinValue+0x42>
    1c06:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c08:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	71 f0       	breq	.+28     	; 0x1c2a <DIO_voidGetPinValue+0x5c>
    1c0e:	e0 c1       	rjmp	.+960    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
    1c10:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c12:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c14:	22 30       	cpi	r18, 0x02	; 2
    1c16:	31 05       	cpc	r19, r1
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <DIO_voidGetPinValue+0x4e>
    1c1a:	f1 c0       	rjmp	.+482    	; 0x1dfe <DIO_voidGetPinValue+0x230>
    1c1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c20:	83 30       	cpi	r24, 0x03	; 3
    1c22:	91 05       	cpc	r25, r1
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <DIO_voidGetPinValue+0x5a>
    1c26:	60 c1       	rjmp	.+704    	; 0x1ee8 <DIO_voidGetPinValue+0x31a>
    1c28:	d3 c1       	rjmp	.+934    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
	{
		case PORT_A:
			switch(Copy_PinId)
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	3b 87       	std	Y+11, r19	; 0x0b
    1c32:	2a 87       	std	Y+10, r18	; 0x0a
    1c34:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c36:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c38:	83 30       	cpi	r24, 0x03	; 3
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <DIO_voidGetPinValue+0x72>
    1c3e:	3e c0       	rjmp	.+124    	; 0x1cbc <DIO_voidGetPinValue+0xee>
    1c40:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c42:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c44:	24 30       	cpi	r18, 0x04	; 4
    1c46:	31 05       	cpc	r19, r1
    1c48:	7c f4       	brge	.+30     	; 0x1c68 <DIO_voidGetPinValue+0x9a>
    1c4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	91 05       	cpc	r25, r1
    1c52:	29 f1       	breq	.+74     	; 0x1c9e <DIO_voidGetPinValue+0xd0>
    1c54:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c56:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c58:	22 30       	cpi	r18, 0x02	; 2
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	3c f5       	brge	.+78     	; 0x1cac <DIO_voidGetPinValue+0xde>
    1c5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	b1 f0       	breq	.+44     	; 0x1c92 <DIO_voidGetPinValue+0xc4>
    1c66:	b4 c1       	rjmp	.+872    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
    1c68:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c6a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c6c:	25 30       	cpi	r18, 0x05	; 5
    1c6e:	31 05       	cpc	r19, r1
    1c70:	b1 f1       	breq	.+108    	; 0x1cde <DIO_voidGetPinValue+0x110>
    1c72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c74:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c76:	85 30       	cpi	r24, 0x05	; 5
    1c78:	91 05       	cpc	r25, r1
    1c7a:	4c f1       	brlt	.+82     	; 0x1cce <DIO_voidGetPinValue+0x100>
    1c7c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c7e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c80:	26 30       	cpi	r18, 0x06	; 6
    1c82:	31 05       	cpc	r19, r1
    1c84:	a9 f1       	breq	.+106    	; 0x1cf0 <DIO_voidGetPinValue+0x122>
    1c86:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c88:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c8a:	87 30       	cpi	r24, 0x07	; 7
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	d1 f1       	breq	.+116    	; 0x1d04 <DIO_voidGetPinValue+0x136>
    1c90:	9f c1       	rjmp	.+830    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PINA.Bit.B0;
    1c92:	e0 e3       	ldi	r30, 0x30	; 48
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	81 85       	ldd	r24, Z+9	; 0x09
    1c98:	81 70       	andi	r24, 0x01	; 1
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	99 c1       	rjmp	.+818    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PINA.Bit.B1;
    1c9e:	e0 e3       	ldi	r30, 0x30	; 48
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	81 85       	ldd	r24, Z+9	; 0x09
    1ca4:	86 95       	lsr	r24
    1ca6:	81 70       	andi	r24, 0x01	; 1
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	92 c1       	rjmp	.+804    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PINA.Bit.B2;
    1cac:	e0 e3       	ldi	r30, 0x30	; 48
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	81 85       	ldd	r24, Z+9	; 0x09
    1cb2:	86 95       	lsr	r24
    1cb4:	86 95       	lsr	r24
    1cb6:	81 70       	andi	r24, 0x01	; 1
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	8a c1       	rjmp	.+788    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PINA.Bit.B3;
    1cbc:	e0 e3       	ldi	r30, 0x30	; 48
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	81 85       	ldd	r24, Z+9	; 0x09
    1cc2:	86 95       	lsr	r24
    1cc4:	86 95       	lsr	r24
    1cc6:	86 95       	lsr	r24
    1cc8:	81 70       	andi	r24, 0x01	; 1
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	81 c1       	rjmp	.+770    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PINA.Bit.B4;
    1cce:	e0 e3       	ldi	r30, 0x30	; 48
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	81 85       	ldd	r24, Z+9	; 0x09
    1cd4:	82 95       	swap	r24
    1cd6:	8f 70       	andi	r24, 0x0F	; 15
    1cd8:	81 70       	andi	r24, 0x01	; 1
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	79 c1       	rjmp	.+754    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PINA.Bit.B5;
    1cde:	e0 e3       	ldi	r30, 0x30	; 48
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	81 85       	ldd	r24, Z+9	; 0x09
    1ce4:	82 95       	swap	r24
    1ce6:	86 95       	lsr	r24
    1ce8:	87 70       	andi	r24, 0x07	; 7
    1cea:	81 70       	andi	r24, 0x01	; 1
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	70 c1       	rjmp	.+736    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PINA.Bit.B6;
    1cf0:	e0 e3       	ldi	r30, 0x30	; 48
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	81 85       	ldd	r24, Z+9	; 0x09
    1cf6:	82 95       	swap	r24
    1cf8:	86 95       	lsr	r24
    1cfa:	86 95       	lsr	r24
    1cfc:	83 70       	andi	r24, 0x03	; 3
    1cfe:	81 70       	andi	r24, 0x01	; 1
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	66 c1       	rjmp	.+716    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PINA.Bit.B7;
    1d04:	e0 e3       	ldi	r30, 0x30	; 48
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	81 85       	ldd	r24, Z+9	; 0x09
    1d0a:	88 1f       	adc	r24, r24
    1d0c:	88 27       	eor	r24, r24
    1d0e:	88 1f       	adc	r24, r24
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	5e c1       	rjmp	.+700    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
				default: break;
			}
			break;

		case PORT_B:
			switch(Copy_PinId)
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	39 87       	std	Y+9, r19	; 0x09
    1d1c:	28 87       	std	Y+8, r18	; 0x08
    1d1e:	88 85       	ldd	r24, Y+8	; 0x08
    1d20:	99 85       	ldd	r25, Y+9	; 0x09
    1d22:	83 30       	cpi	r24, 0x03	; 3
    1d24:	91 05       	cpc	r25, r1
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <DIO_voidGetPinValue+0x15c>
    1d28:	3e c0       	rjmp	.+124    	; 0x1da6 <DIO_voidGetPinValue+0x1d8>
    1d2a:	28 85       	ldd	r18, Y+8	; 0x08
    1d2c:	39 85       	ldd	r19, Y+9	; 0x09
    1d2e:	24 30       	cpi	r18, 0x04	; 4
    1d30:	31 05       	cpc	r19, r1
    1d32:	7c f4       	brge	.+30     	; 0x1d52 <DIO_voidGetPinValue+0x184>
    1d34:	88 85       	ldd	r24, Y+8	; 0x08
    1d36:	99 85       	ldd	r25, Y+9	; 0x09
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	29 f1       	breq	.+74     	; 0x1d88 <DIO_voidGetPinValue+0x1ba>
    1d3e:	28 85       	ldd	r18, Y+8	; 0x08
    1d40:	39 85       	ldd	r19, Y+9	; 0x09
    1d42:	22 30       	cpi	r18, 0x02	; 2
    1d44:	31 05       	cpc	r19, r1
    1d46:	3c f5       	brge	.+78     	; 0x1d96 <DIO_voidGetPinValue+0x1c8>
    1d48:	88 85       	ldd	r24, Y+8	; 0x08
    1d4a:	99 85       	ldd	r25, Y+9	; 0x09
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	b1 f0       	breq	.+44     	; 0x1d7c <DIO_voidGetPinValue+0x1ae>
    1d50:	3f c1       	rjmp	.+638    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
    1d52:	28 85       	ldd	r18, Y+8	; 0x08
    1d54:	39 85       	ldd	r19, Y+9	; 0x09
    1d56:	25 30       	cpi	r18, 0x05	; 5
    1d58:	31 05       	cpc	r19, r1
    1d5a:	b1 f1       	breq	.+108    	; 0x1dc8 <DIO_voidGetPinValue+0x1fa>
    1d5c:	88 85       	ldd	r24, Y+8	; 0x08
    1d5e:	99 85       	ldd	r25, Y+9	; 0x09
    1d60:	85 30       	cpi	r24, 0x05	; 5
    1d62:	91 05       	cpc	r25, r1
    1d64:	4c f1       	brlt	.+82     	; 0x1db8 <DIO_voidGetPinValue+0x1ea>
    1d66:	28 85       	ldd	r18, Y+8	; 0x08
    1d68:	39 85       	ldd	r19, Y+9	; 0x09
    1d6a:	26 30       	cpi	r18, 0x06	; 6
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	a9 f1       	breq	.+106    	; 0x1dda <DIO_voidGetPinValue+0x20c>
    1d70:	88 85       	ldd	r24, Y+8	; 0x08
    1d72:	99 85       	ldd	r25, Y+9	; 0x09
    1d74:	87 30       	cpi	r24, 0x07	; 7
    1d76:	91 05       	cpc	r25, r1
    1d78:	d1 f1       	breq	.+116    	; 0x1dee <DIO_voidGetPinValue+0x220>
    1d7a:	2a c1       	rjmp	.+596    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PINB.Bit.B0;
    1d7c:	e0 e3       	ldi	r30, 0x30	; 48
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	86 81       	ldd	r24, Z+6	; 0x06
    1d82:	81 70       	andi	r24, 0x01	; 1
    1d84:	89 83       	std	Y+1, r24	; 0x01
    1d86:	24 c1       	rjmp	.+584    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PINB.Bit.B1;
    1d88:	e0 e3       	ldi	r30, 0x30	; 48
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	86 81       	ldd	r24, Z+6	; 0x06
    1d8e:	86 95       	lsr	r24
    1d90:	81 70       	andi	r24, 0x01	; 1
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	1d c1       	rjmp	.+570    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PINB.Bit.B2;
    1d96:	e0 e3       	ldi	r30, 0x30	; 48
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	86 81       	ldd	r24, Z+6	; 0x06
    1d9c:	86 95       	lsr	r24
    1d9e:	86 95       	lsr	r24
    1da0:	81 70       	andi	r24, 0x01	; 1
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	15 c1       	rjmp	.+554    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PINB.Bit.B3;
    1da6:	e0 e3       	ldi	r30, 0x30	; 48
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	86 81       	ldd	r24, Z+6	; 0x06
    1dac:	86 95       	lsr	r24
    1dae:	86 95       	lsr	r24
    1db0:	86 95       	lsr	r24
    1db2:	81 70       	andi	r24, 0x01	; 1
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	0c c1       	rjmp	.+536    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PINB.Bit.B4;
    1db8:	e0 e3       	ldi	r30, 0x30	; 48
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	86 81       	ldd	r24, Z+6	; 0x06
    1dbe:	82 95       	swap	r24
    1dc0:	8f 70       	andi	r24, 0x0F	; 15
    1dc2:	81 70       	andi	r24, 0x01	; 1
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	04 c1       	rjmp	.+520    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PINB.Bit.B5;
    1dc8:	e0 e3       	ldi	r30, 0x30	; 48
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	86 81       	ldd	r24, Z+6	; 0x06
    1dce:	82 95       	swap	r24
    1dd0:	86 95       	lsr	r24
    1dd2:	87 70       	andi	r24, 0x07	; 7
    1dd4:	81 70       	andi	r24, 0x01	; 1
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	fb c0       	rjmp	.+502    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PINB.Bit.B6;
    1dda:	e0 e3       	ldi	r30, 0x30	; 48
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	86 81       	ldd	r24, Z+6	; 0x06
    1de0:	82 95       	swap	r24
    1de2:	86 95       	lsr	r24
    1de4:	86 95       	lsr	r24
    1de6:	83 70       	andi	r24, 0x03	; 3
    1de8:	81 70       	andi	r24, 0x01	; 1
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	f1 c0       	rjmp	.+482    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PINB.Bit.B7;
    1dee:	e0 e3       	ldi	r30, 0x30	; 48
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	86 81       	ldd	r24, Z+6	; 0x06
    1df4:	88 1f       	adc	r24, r24
    1df6:	88 27       	eor	r24, r24
    1df8:	88 1f       	adc	r24, r24
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	e9 c0       	rjmp	.+466    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
			}
			break;


		case PORT_C:
			switch(Copy_PinId)
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	3f 83       	std	Y+7, r19	; 0x07
    1e06:	2e 83       	std	Y+6, r18	; 0x06
    1e08:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e0c:	83 30       	cpi	r24, 0x03	; 3
    1e0e:	91 05       	cpc	r25, r1
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <DIO_voidGetPinValue+0x246>
    1e12:	3e c0       	rjmp	.+124    	; 0x1e90 <DIO_voidGetPinValue+0x2c2>
    1e14:	2e 81       	ldd	r18, Y+6	; 0x06
    1e16:	3f 81       	ldd	r19, Y+7	; 0x07
    1e18:	24 30       	cpi	r18, 0x04	; 4
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	7c f4       	brge	.+30     	; 0x1e3c <DIO_voidGetPinValue+0x26e>
    1e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e20:	9f 81       	ldd	r25, Y+7	; 0x07
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	91 05       	cpc	r25, r1
    1e26:	29 f1       	breq	.+74     	; 0x1e72 <DIO_voidGetPinValue+0x2a4>
    1e28:	2e 81       	ldd	r18, Y+6	; 0x06
    1e2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e2c:	22 30       	cpi	r18, 0x02	; 2
    1e2e:	31 05       	cpc	r19, r1
    1e30:	3c f5       	brge	.+78     	; 0x1e80 <DIO_voidGetPinValue+0x2b2>
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	9f 81       	ldd	r25, Y+7	; 0x07
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	b1 f0       	breq	.+44     	; 0x1e66 <DIO_voidGetPinValue+0x298>
    1e3a:	ca c0       	rjmp	.+404    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
    1e3c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e3e:	3f 81       	ldd	r19, Y+7	; 0x07
    1e40:	25 30       	cpi	r18, 0x05	; 5
    1e42:	31 05       	cpc	r19, r1
    1e44:	b1 f1       	breq	.+108    	; 0x1eb2 <DIO_voidGetPinValue+0x2e4>
    1e46:	8e 81       	ldd	r24, Y+6	; 0x06
    1e48:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4a:	85 30       	cpi	r24, 0x05	; 5
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	4c f1       	brlt	.+82     	; 0x1ea2 <DIO_voidGetPinValue+0x2d4>
    1e50:	2e 81       	ldd	r18, Y+6	; 0x06
    1e52:	3f 81       	ldd	r19, Y+7	; 0x07
    1e54:	26 30       	cpi	r18, 0x06	; 6
    1e56:	31 05       	cpc	r19, r1
    1e58:	a9 f1       	breq	.+106    	; 0x1ec4 <DIO_voidGetPinValue+0x2f6>
    1e5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5e:	87 30       	cpi	r24, 0x07	; 7
    1e60:	91 05       	cpc	r25, r1
    1e62:	d1 f1       	breq	.+116    	; 0x1ed8 <DIO_voidGetPinValue+0x30a>
    1e64:	b5 c0       	rjmp	.+362    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PINC.Bit.B0;
    1e66:	e0 e3       	ldi	r30, 0x30	; 48
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	83 81       	ldd	r24, Z+3	; 0x03
    1e6c:	81 70       	andi	r24, 0x01	; 1
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	af c0       	rjmp	.+350    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PINC.Bit.B1;
    1e72:	e0 e3       	ldi	r30, 0x30	; 48
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	83 81       	ldd	r24, Z+3	; 0x03
    1e78:	86 95       	lsr	r24
    1e7a:	81 70       	andi	r24, 0x01	; 1
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	a8 c0       	rjmp	.+336    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PINC.Bit.B2;
    1e80:	e0 e3       	ldi	r30, 0x30	; 48
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	83 81       	ldd	r24, Z+3	; 0x03
    1e86:	86 95       	lsr	r24
    1e88:	86 95       	lsr	r24
    1e8a:	81 70       	andi	r24, 0x01	; 1
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	a0 c0       	rjmp	.+320    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PINC.Bit.B3;
    1e90:	e0 e3       	ldi	r30, 0x30	; 48
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	83 81       	ldd	r24, Z+3	; 0x03
    1e96:	86 95       	lsr	r24
    1e98:	86 95       	lsr	r24
    1e9a:	86 95       	lsr	r24
    1e9c:	81 70       	andi	r24, 0x01	; 1
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	97 c0       	rjmp	.+302    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PINC.Bit.B4;
    1ea2:	e0 e3       	ldi	r30, 0x30	; 48
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	83 81       	ldd	r24, Z+3	; 0x03
    1ea8:	82 95       	swap	r24
    1eaa:	8f 70       	andi	r24, 0x0F	; 15
    1eac:	81 70       	andi	r24, 0x01	; 1
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	8f c0       	rjmp	.+286    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PINC.Bit.B5;
    1eb2:	e0 e3       	ldi	r30, 0x30	; 48
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	83 81       	ldd	r24, Z+3	; 0x03
    1eb8:	82 95       	swap	r24
    1eba:	86 95       	lsr	r24
    1ebc:	87 70       	andi	r24, 0x07	; 7
    1ebe:	81 70       	andi	r24, 0x01	; 1
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	86 c0       	rjmp	.+268    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PINC.Bit.B6;
    1ec4:	e0 e3       	ldi	r30, 0x30	; 48
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	83 81       	ldd	r24, Z+3	; 0x03
    1eca:	82 95       	swap	r24
    1ecc:	86 95       	lsr	r24
    1ece:	86 95       	lsr	r24
    1ed0:	83 70       	andi	r24, 0x03	; 3
    1ed2:	81 70       	andi	r24, 0x01	; 1
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    1ed6:	7c c0       	rjmp	.+248    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PINC.Bit.B7;
    1ed8:	e0 e3       	ldi	r30, 0x30	; 48
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	83 81       	ldd	r24, Z+3	; 0x03
    1ede:	88 1f       	adc	r24, r24
    1ee0:	88 27       	eor	r24, r24
    1ee2:	88 1f       	adc	r24, r24
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	74 c0       	rjmp	.+232    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
				default: break;
			}
			break;

		case PORT_D:
			switch(Copy_PinId)
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	3d 83       	std	Y+5, r19	; 0x05
    1ef0:	2c 83       	std	Y+4, r18	; 0x04
    1ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef6:	83 30       	cpi	r24, 0x03	; 3
    1ef8:	91 05       	cpc	r25, r1
    1efa:	09 f4       	brne	.+2      	; 0x1efe <DIO_voidGetPinValue+0x330>
    1efc:	3e c0       	rjmp	.+124    	; 0x1f7a <DIO_voidGetPinValue+0x3ac>
    1efe:	2c 81       	ldd	r18, Y+4	; 0x04
    1f00:	3d 81       	ldd	r19, Y+5	; 0x05
    1f02:	24 30       	cpi	r18, 0x04	; 4
    1f04:	31 05       	cpc	r19, r1
    1f06:	7c f4       	brge	.+30     	; 0x1f26 <DIO_voidGetPinValue+0x358>
    1f08:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	91 05       	cpc	r25, r1
    1f10:	29 f1       	breq	.+74     	; 0x1f5c <DIO_voidGetPinValue+0x38e>
    1f12:	2c 81       	ldd	r18, Y+4	; 0x04
    1f14:	3d 81       	ldd	r19, Y+5	; 0x05
    1f16:	22 30       	cpi	r18, 0x02	; 2
    1f18:	31 05       	cpc	r19, r1
    1f1a:	3c f5       	brge	.+78     	; 0x1f6a <DIO_voidGetPinValue+0x39c>
    1f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	b1 f0       	breq	.+44     	; 0x1f50 <DIO_voidGetPinValue+0x382>
    1f24:	55 c0       	rjmp	.+170    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
    1f26:	2c 81       	ldd	r18, Y+4	; 0x04
    1f28:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2a:	25 30       	cpi	r18, 0x05	; 5
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	b1 f1       	breq	.+108    	; 0x1f9c <DIO_voidGetPinValue+0x3ce>
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	9d 81       	ldd	r25, Y+5	; 0x05
    1f34:	85 30       	cpi	r24, 0x05	; 5
    1f36:	91 05       	cpc	r25, r1
    1f38:	4c f1       	brlt	.+82     	; 0x1f8c <DIO_voidGetPinValue+0x3be>
    1f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3e:	26 30       	cpi	r18, 0x06	; 6
    1f40:	31 05       	cpc	r19, r1
    1f42:	a9 f1       	breq	.+106    	; 0x1fae <DIO_voidGetPinValue+0x3e0>
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	9d 81       	ldd	r25, Y+5	; 0x05
    1f48:	87 30       	cpi	r24, 0x07	; 7
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	d1 f1       	breq	.+116    	; 0x1fc2 <DIO_voidGetPinValue+0x3f4>
    1f4e:	40 c0       	rjmp	.+128    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PIND.Bit.B0;
    1f50:	e0 e3       	ldi	r30, 0x30	; 48
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	81 70       	andi	r24, 0x01	; 1
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	3a c0       	rjmp	.+116    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PIND.Bit.B1;
    1f5c:	e0 e3       	ldi	r30, 0x30	; 48
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	86 95       	lsr	r24
    1f64:	81 70       	andi	r24, 0x01	; 1
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	33 c0       	rjmp	.+102    	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PIND.Bit.B2;
    1f6a:	e0 e3       	ldi	r30, 0x30	; 48
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	86 95       	lsr	r24
    1f72:	86 95       	lsr	r24
    1f74:	81 70       	andi	r24, 0x01	; 1
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	2b c0       	rjmp	.+86     	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PIND.Bit.B3;
    1f7a:	e0 e3       	ldi	r30, 0x30	; 48
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	86 95       	lsr	r24
    1f82:	86 95       	lsr	r24
    1f84:	86 95       	lsr	r24
    1f86:	81 70       	andi	r24, 0x01	; 1
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	22 c0       	rjmp	.+68     	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PIND.Bit.B4;
    1f8c:	e0 e3       	ldi	r30, 0x30	; 48
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	82 95       	swap	r24
    1f94:	8f 70       	andi	r24, 0x0F	; 15
    1f96:	81 70       	andi	r24, 0x01	; 1
    1f98:	89 83       	std	Y+1, r24	; 0x01
    1f9a:	1a c0       	rjmp	.+52     	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PIND.Bit.B5;
    1f9c:	e0 e3       	ldi	r30, 0x30	; 48
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	82 95       	swap	r24
    1fa4:	86 95       	lsr	r24
    1fa6:	87 70       	andi	r24, 0x07	; 7
    1fa8:	81 70       	andi	r24, 0x01	; 1
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	11 c0       	rjmp	.+34     	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PIND.Bit.B6;
    1fae:	e0 e3       	ldi	r30, 0x30	; 48
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	82 95       	swap	r24
    1fb6:	86 95       	lsr	r24
    1fb8:	86 95       	lsr	r24
    1fba:	83 70       	andi	r24, 0x03	; 3
    1fbc:	81 70       	andi	r24, 0x01	; 1
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	07 c0       	rjmp	.+14     	; 0x1fd0 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PIND.Bit.B7;
    1fc2:	e0 e3       	ldi	r30, 0x30	; 48
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	88 1f       	adc	r24, r24
    1fca:	88 27       	eor	r24, r24
    1fcc:	88 1f       	adc	r24, r24
    1fce:	89 83       	std	Y+1, r24	; 0x01
						break;
				default: break;
			}
			break;
	}
	return Local_u8Pin;
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd2:	2d 96       	adiw	r28, 0x0d	; 13
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <DIO_voidSetPortirection>:

void DIO_voidSetPortirection(PORT_t Copy_PortId,DIRECTION_t Copy_Direction)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <DIO_voidSetPortirection+0x6>
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <DIO_voidSetPortirection+0x8>
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PortId)
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	3c 83       	std	Y+4, r19	; 0x04
    1ffc:	2b 83       	std	Y+3, r18	; 0x03
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	91 05       	cpc	r25, r1
    2006:	21 f1       	breq	.+72     	; 0x2050 <DIO_voidSetPortirection+0x6c>
    2008:	2b 81       	ldd	r18, Y+3	; 0x03
    200a:	3c 81       	ldd	r19, Y+4	; 0x04
    200c:	22 30       	cpi	r18, 0x02	; 2
    200e:	31 05       	cpc	r19, r1
    2010:	2c f4       	brge	.+10     	; 0x201c <DIO_voidSetPortirection+0x38>
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	61 f0       	breq	.+24     	; 0x2032 <DIO_voidSetPortirection+0x4e>
    201a:	46 c0       	rjmp	.+140    	; 0x20a8 <DIO_voidSetPortirection+0xc4>
    201c:	2b 81       	ldd	r18, Y+3	; 0x03
    201e:	3c 81       	ldd	r19, Y+4	; 0x04
    2020:	22 30       	cpi	r18, 0x02	; 2
    2022:	31 05       	cpc	r19, r1
    2024:	21 f1       	breq	.+72     	; 0x206e <DIO_voidSetPortirection+0x8a>
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	83 30       	cpi	r24, 0x03	; 3
    202c:	91 05       	cpc	r25, r1
    202e:	71 f1       	breq	.+92     	; 0x208c <DIO_voidSetPortirection+0xa8>
    2030:	3b c0       	rjmp	.+118    	; 0x20a8 <DIO_voidSetPortirection+0xc4>
		{
			case PORT_A:
				if(Copy_Direction == INPUT)
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	88 23       	and	r24, r24
    2036:	21 f4       	brne	.+8      	; 0x2040 <DIO_voidSetPortirection+0x5c>
				{
					DIO->DDRA.All_Bits = 0;
    2038:	e0 e3       	ldi	r30, 0x30	; 48
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	12 86       	std	Z+10, r1	; 0x0a
    203e:	34 c0       	rjmp	.+104    	; 0x20a8 <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	81 30       	cpi	r24, 0x01	; 1
    2044:	89 f5       	brne	.+98     	; 0x20a8 <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRA.All_Bits = 0xFF;
    2046:	e0 e3       	ldi	r30, 0x30	; 48
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	8f ef       	ldi	r24, 0xFF	; 255
    204c:	82 87       	std	Z+10, r24	; 0x0a
    204e:	2c c0       	rjmp	.+88     	; 0x20a8 <DIO_voidSetPortirection+0xc4>

				}
				break;

			case PORT_B:
				if(Copy_Direction == INPUT)
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	88 23       	and	r24, r24
    2054:	21 f4       	brne	.+8      	; 0x205e <DIO_voidSetPortirection+0x7a>
				{
					DIO->DDRB.All_Bits = 0;
    2056:	e0 e3       	ldi	r30, 0x30	; 48
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	17 82       	std	Z+7, r1	; 0x07
    205c:	25 c0       	rjmp	.+74     	; 0x20a8 <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	11 f5       	brne	.+68     	; 0x20a8 <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRB.All_Bits = 0xFF;
    2064:	e0 e3       	ldi	r30, 0x30	; 48
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	8f ef       	ldi	r24, 0xFF	; 255
    206a:	87 83       	std	Z+7, r24	; 0x07
    206c:	1d c0       	rjmp	.+58     	; 0x20a8 <DIO_voidSetPortirection+0xc4>
				}
				break;


			case PORT_C:
				if(Copy_Direction == INPUT)
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	88 23       	and	r24, r24
    2072:	21 f4       	brne	.+8      	; 0x207c <DIO_voidSetPortirection+0x98>
				{
					DIO->DDRC.All_Bits = 0;
    2074:	e0 e3       	ldi	r30, 0x30	; 48
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	14 82       	std	Z+4, r1	; 0x04
    207a:	16 c0       	rjmp	.+44     	; 0x20a8 <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	99 f4       	brne	.+38     	; 0x20a8 <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRC.All_Bits = 0xFF;
    2082:	e0 e3       	ldi	r30, 0x30	; 48
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	8f ef       	ldi	r24, 0xFF	; 255
    2088:	84 83       	std	Z+4, r24	; 0x04
    208a:	0e c0       	rjmp	.+28     	; 0x20a8 <DIO_voidSetPortirection+0xc4>

				}
				break;

			case PORT_D:
				if(Copy_Direction == INPUT)
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	88 23       	and	r24, r24
    2090:	21 f4       	brne	.+8      	; 0x209a <DIO_voidSetPortirection+0xb6>
				{
					DIO->DDRD.All_Bits = 0;
    2092:	e0 e3       	ldi	r30, 0x30	; 48
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	11 82       	std	Z+1, r1	; 0x01
    2098:	07 c0       	rjmp	.+14     	; 0x20a8 <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	21 f4       	brne	.+8      	; 0x20a8 <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRD.All_Bits = 0xFF;
    20a0:	e0 e3       	ldi	r30, 0x30	; 48
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	8f ef       	ldi	r24, 0xFF	; 255
    20a6:	81 83       	std	Z+1, r24	; 0x01

				}
				break;
		}
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(PORT_t Copy_PortId,VALUE_t Copy_Value)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <DIO_voidSetPortValue+0x6>
    20bc:	00 d0       	rcall	.+0      	; 0x20be <DIO_voidSetPortValue+0x8>
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PortId)
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	3c 83       	std	Y+4, r19	; 0x04
    20ce:	2b 83       	std	Y+3, r18	; 0x03
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	91 05       	cpc	r25, r1
    20d8:	21 f1       	breq	.+72     	; 0x2122 <DIO_voidSetPortValue+0x6c>
    20da:	2b 81       	ldd	r18, Y+3	; 0x03
    20dc:	3c 81       	ldd	r19, Y+4	; 0x04
    20de:	22 30       	cpi	r18, 0x02	; 2
    20e0:	31 05       	cpc	r19, r1
    20e2:	2c f4       	brge	.+10     	; 0x20ee <DIO_voidSetPortValue+0x38>
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	61 f0       	breq	.+24     	; 0x2104 <DIO_voidSetPortValue+0x4e>
    20ec:	46 c0       	rjmp	.+140    	; 0x217a <DIO_voidSetPortValue+0xc4>
    20ee:	2b 81       	ldd	r18, Y+3	; 0x03
    20f0:	3c 81       	ldd	r19, Y+4	; 0x04
    20f2:	22 30       	cpi	r18, 0x02	; 2
    20f4:	31 05       	cpc	r19, r1
    20f6:	21 f1       	breq	.+72     	; 0x2140 <DIO_voidSetPortValue+0x8a>
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	83 30       	cpi	r24, 0x03	; 3
    20fe:	91 05       	cpc	r25, r1
    2100:	71 f1       	breq	.+92     	; 0x215e <DIO_voidSetPortValue+0xa8>
    2102:	3b c0       	rjmp	.+118    	; 0x217a <DIO_voidSetPortValue+0xc4>
		{
			case PORT_A:
				if(Copy_Value == HIGH)
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	81 30       	cpi	r24, 0x01	; 1
    2108:	29 f4       	brne	.+10     	; 0x2114 <DIO_voidSetPortValue+0x5e>
				{
					DIO->PORTA.All_Bits = 0xFF;
    210a:	e0 e3       	ldi	r30, 0x30	; 48
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	8f ef       	ldi	r24, 0xFF	; 255
    2110:	83 87       	std	Z+11, r24	; 0x0b
    2112:	33 c0       	rjmp	.+102    	; 0x217a <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	88 23       	and	r24, r24
    2118:	81 f5       	brne	.+96     	; 0x217a <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTA.All_Bits = 0;
    211a:	e0 e3       	ldi	r30, 0x30	; 48
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	13 86       	std	Z+11, r1	; 0x0b
    2120:	2c c0       	rjmp	.+88     	; 0x217a <DIO_voidSetPortValue+0xc4>

				}
				break;

			case PORT_B:
				if(Copy_Value == HIGH)
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	81 30       	cpi	r24, 0x01	; 1
    2126:	29 f4       	brne	.+10     	; 0x2132 <DIO_voidSetPortValue+0x7c>
				{
					DIO->PORTB.All_Bits = 0xFF;
    2128:	e0 e3       	ldi	r30, 0x30	; 48
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	8f ef       	ldi	r24, 0xFF	; 255
    212e:	80 87       	std	Z+8, r24	; 0x08
    2130:	24 c0       	rjmp	.+72     	; 0x217a <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	88 23       	and	r24, r24
    2136:	09 f5       	brne	.+66     	; 0x217a <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTB.All_Bits = 0;
    2138:	e0 e3       	ldi	r30, 0x30	; 48
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	10 86       	std	Z+8, r1	; 0x08
    213e:	1d c0       	rjmp	.+58     	; 0x217a <DIO_voidSetPortValue+0xc4>
				}
				break;


			case PORT_C:
				if(Copy_Value == HIGH)
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	29 f4       	brne	.+10     	; 0x2150 <DIO_voidSetPortValue+0x9a>
				{
					DIO->PORTC.All_Bits = 0xFF;
    2146:	e0 e3       	ldi	r30, 0x30	; 48
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	8f ef       	ldi	r24, 0xFF	; 255
    214c:	85 83       	std	Z+5, r24	; 0x05
    214e:	15 c0       	rjmp	.+42     	; 0x217a <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	88 23       	and	r24, r24
    2154:	91 f4       	brne	.+36     	; 0x217a <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTC.All_Bits = 0;
    2156:	e0 e3       	ldi	r30, 0x30	; 48
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	15 82       	std	Z+5, r1	; 0x05
    215c:	0e c0       	rjmp	.+28     	; 0x217a <DIO_voidSetPortValue+0xc4>

				}
				break;

			case PORT_D:
				if(Copy_Value == HIGH)
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	29 f4       	brne	.+10     	; 0x216e <DIO_voidSetPortValue+0xb8>
				{
					DIO->PORTD.All_Bits = 0xFF;
    2164:	e0 e3       	ldi	r30, 0x30	; 48
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	82 83       	std	Z+2, r24	; 0x02
    216c:	06 c0       	rjmp	.+12     	; 0x217a <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	88 23       	and	r24, r24
    2172:	19 f4       	brne	.+6      	; 0x217a <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTD.All_Bits = 0;
    2174:	e0 e3       	ldi	r30, 0x30	; 48
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	12 82       	std	Z+2, r1	; 0x02

				}
				break;
		}
}
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <DIO_voidGetPortValue>:
u8 DIO_voidGetPortValue(PORT_t Copy_PortId)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <DIO_voidGetPortValue+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <DIO_voidGetPortValue+0x8>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Pin;
	switch(Copy_PortId)
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	3c 83       	std	Y+4, r19	; 0x04
    219e:	2b 83       	std	Y+3, r18	; 0x03
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	9c 81       	ldd	r25, Y+4	; 0x04
    21a4:	81 30       	cpi	r24, 0x01	; 1
    21a6:	91 05       	cpc	r25, r1
    21a8:	d1 f0       	breq	.+52     	; 0x21de <DIO_voidGetPortValue+0x56>
    21aa:	2b 81       	ldd	r18, Y+3	; 0x03
    21ac:	3c 81       	ldd	r19, Y+4	; 0x04
    21ae:	22 30       	cpi	r18, 0x02	; 2
    21b0:	31 05       	cpc	r19, r1
    21b2:	2c f4       	brge	.+10     	; 0x21be <DIO_voidGetPortValue+0x36>
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	9c 81       	ldd	r25, Y+4	; 0x04
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	61 f0       	breq	.+24     	; 0x21d4 <DIO_voidGetPortValue+0x4c>
    21bc:	1e c0       	rjmp	.+60     	; 0x21fa <DIO_voidGetPortValue+0x72>
    21be:	2b 81       	ldd	r18, Y+3	; 0x03
    21c0:	3c 81       	ldd	r19, Y+4	; 0x04
    21c2:	22 30       	cpi	r18, 0x02	; 2
    21c4:	31 05       	cpc	r19, r1
    21c6:	81 f0       	breq	.+32     	; 0x21e8 <DIO_voidGetPortValue+0x60>
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	83 30       	cpi	r24, 0x03	; 3
    21ce:	91 05       	cpc	r25, r1
    21d0:	81 f0       	breq	.+32     	; 0x21f2 <DIO_voidGetPortValue+0x6a>
    21d2:	13 c0       	rjmp	.+38     	; 0x21fa <DIO_voidGetPortValue+0x72>
	{
		case PORT_A:
			Local_u8Pin = DIO->PINA.All_Bits;
    21d4:	e0 e3       	ldi	r30, 0x30	; 48
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	81 85       	ldd	r24, Z+9	; 0x09
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	0e c0       	rjmp	.+28     	; 0x21fa <DIO_voidGetPortValue+0x72>
		break;
		case PORT_B:
			Local_u8Pin = DIO->PINB.All_Bits;
    21de:	e0 e3       	ldi	r30, 0x30	; 48
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	86 81       	ldd	r24, Z+6	; 0x06
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	09 c0       	rjmp	.+18     	; 0x21fa <DIO_voidGetPortValue+0x72>
		break;
		case PORT_C:
			Local_u8Pin = DIO->PINC.All_Bits;
    21e8:	e0 e3       	ldi	r30, 0x30	; 48
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	83 81       	ldd	r24, Z+3	; 0x03
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	04 c0       	rjmp	.+8      	; 0x21fa <DIO_voidGetPortValue+0x72>

		break;
		case PORT_D:
			Local_u8Pin = DIO->PIND.All_Bits;
    21f2:	e0 e3       	ldi	r30, 0x30	; 48
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: break;
	}
	return Local_u8Pin;
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <MGIE_voidEnable>:
#include "../inc/GIE_config.h"



void MGIE_voidEnable(void)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
	asm("SEI");
    2212:	78 94       	sei
}
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <MGIE_voidDisable>:




void MGIE_voidDisable(void)
{	
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
 	asm("CLI");
    2222:	f8 94       	cli
}
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <H_LCD_void_Init>:
				};
				
 
 
void H_LCD_void_Init(void)
 {
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	6e 97       	sbiw	r28, 0x1e	; 30
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
	/* SET Direction as OUTPUT for RS,RW,EN */
	for(u8 i = 0; i< 6 ; i+=2)
    223e:	1e 8e       	std	Y+30, r1	; 0x1e
    2240:	17 c0       	rjmp	.+46     	; 0x2270 <H_LCD_void_Init+0x46>
	{
		DIO_voidSetPinDirection(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],OUTPUT);
    2242:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	fc 01       	movw	r30, r24
    224a:	ec 54       	subi	r30, 0x4C	; 76
    224c:	fe 4f       	sbci	r31, 0xFE	; 254
    224e:	20 81       	ld	r18, Z
    2250:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	01 96       	adiw	r24, 0x01	; 1
    2258:	fc 01       	movw	r30, r24
    225a:	ec 54       	subi	r30, 0x4C	; 76
    225c:	fe 4f       	sbci	r31, 0xFE	; 254
    225e:	90 81       	ld	r25, Z
    2260:	82 2f       	mov	r24, r18
    2262:	69 2f       	mov	r22, r25
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DIO_voidSetPinDirection>
 
 
void H_LCD_void_Init(void)
 {
	/* SET Direction as OUTPUT for RS,RW,EN */
	for(u8 i = 0; i< 6 ; i+=2)
    226a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    226c:	8e 5f       	subi	r24, 0xFE	; 254
    226e:	8e 8f       	std	Y+30, r24	; 0x1e
    2270:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2272:	86 30       	cpi	r24, 0x06	; 6
    2274:	30 f3       	brcs	.-52     	; 0x2242 <H_LCD_void_Init+0x18>
		H_LCD_void_sendCommand(0b00000110);



	#elif LCD_MODE == MODE_4BIT
	 	for(u8 i = 14; i<22;i+=2)
    2276:	8e e0       	ldi	r24, 0x0E	; 14
    2278:	8d 8f       	std	Y+29, r24	; 0x1d
    227a:	17 c0       	rjmp	.+46     	; 0x22aa <H_LCD_void_Init+0x80>
		{
			DIO_voidSetPinDirection(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],OUTPUT);
    227c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	fc 01       	movw	r30, r24
    2284:	ec 54       	subi	r30, 0x4C	; 76
    2286:	fe 4f       	sbci	r31, 0xFE	; 254
    2288:	20 81       	ld	r18, Z
    228a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	01 96       	adiw	r24, 0x01	; 1
    2292:	fc 01       	movw	r30, r24
    2294:	ec 54       	subi	r30, 0x4C	; 76
    2296:	fe 4f       	sbci	r31, 0xFE	; 254
    2298:	90 81       	ld	r25, Z
    229a:	82 2f       	mov	r24, r18
    229c:	69 2f       	mov	r22, r25
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DIO_voidSetPinDirection>
		H_LCD_void_sendCommand(0b00000110);



	#elif LCD_MODE == MODE_4BIT
	 	for(u8 i = 14; i<22;i+=2)
    22a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22a6:	8e 5f       	subi	r24, 0xFE	; 254
    22a8:	8d 8f       	std	Y+29, r24	; 0x1d
    22aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ac:	86 31       	cpi	r24, 0x16	; 22
    22ae:	30 f3       	brcs	.-52     	; 0x227c <H_LCD_void_Init+0x52>
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a8 e4       	ldi	r26, 0x48	; 72
    22b6:	b2 e4       	ldi	r27, 0x42	; 66
    22b8:	89 8f       	std	Y+25, r24	; 0x19
    22ba:	9a 8f       	std	Y+26, r25	; 0x1a
    22bc:	ab 8f       	std	Y+27, r26	; 0x1b
    22be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	69 8d       	ldd	r22, Y+25	; 0x19
    22c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a e7       	ldi	r20, 0x7A	; 122
    22ce:	55 e4       	ldi	r21, 0x45	; 69
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	8d 8b       	std	Y+21, r24	; 0x15
    22da:	9e 8b       	std	Y+22, r25	; 0x16
    22dc:	af 8b       	std	Y+23, r26	; 0x17
    22de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22e0:	6d 89       	ldd	r22, Y+21	; 0x15
    22e2:	7e 89       	ldd	r23, Y+22	; 0x16
    22e4:	8f 89       	ldd	r24, Y+23	; 0x17
    22e6:	98 8d       	ldd	r25, Y+24	; 0x18
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <H_LCD_void_Init+0xd8>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9c 8b       	std	Y+20, r25	; 0x14
    22fe:	8b 8b       	std	Y+19, r24	; 0x13
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <H_LCD_void_Init+0x156>
	else if (__tmp > 65535)
    2302:	6d 89       	ldd	r22, Y+21	; 0x15
    2304:	7e 89       	ldd	r23, Y+22	; 0x16
    2306:	8f 89       	ldd	r24, Y+23	; 0x17
    2308:	98 8d       	ldd	r25, Y+24	; 0x18
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	4c f5       	brge	.+82     	; 0x236c <H_LCD_void_Init+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	69 8d       	ldd	r22, Y+25	; 0x19
    231c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    231e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9c 8b       	std	Y+20, r25	; 0x14
    2340:	8b 8b       	std	Y+19, r24	; 0x13
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <H_LCD_void_Init+0x138>
    2344:	80 e9       	ldi	r24, 0x90	; 144
    2346:	91 e0       	ldi	r25, 0x01	; 1
    2348:	9a 8b       	std	Y+18, r25	; 0x12
    234a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    234c:	89 89       	ldd	r24, Y+17	; 0x11
    234e:	9a 89       	ldd	r25, Y+18	; 0x12
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <H_LCD_void_Init+0x126>
    2354:	9a 8b       	std	Y+18, r25	; 0x12
    2356:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	8b 89       	ldd	r24, Y+19	; 0x13
    235a:	9c 89       	ldd	r25, Y+20	; 0x14
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9c 8b       	std	Y+20, r25	; 0x14
    2360:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	8b 89       	ldd	r24, Y+19	; 0x13
    2364:	9c 89       	ldd	r25, Y+20	; 0x14
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f7       	brne	.-38     	; 0x2344 <H_LCD_void_Init+0x11a>
    236a:	14 c0       	rjmp	.+40     	; 0x2394 <H_LCD_void_Init+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236c:	6d 89       	ldd	r22, Y+21	; 0x15
    236e:	7e 89       	ldd	r23, Y+22	; 0x16
    2370:	8f 89       	ldd	r24, Y+23	; 0x17
    2372:	98 8d       	ldd	r25, Y+24	; 0x18
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9c 8b       	std	Y+20, r25	; 0x14
    237e:	8b 8b       	std	Y+19, r24	; 0x13
    2380:	8b 89       	ldd	r24, Y+19	; 0x13
    2382:	9c 89       	ldd	r25, Y+20	; 0x14
    2384:	98 8b       	std	Y+16, r25	; 0x10
    2386:	8f 87       	std	Y+15, r24	; 0x0f
    2388:	8f 85       	ldd	r24, Y+15	; 0x0f
    238a:	98 89       	ldd	r25, Y+16	; 0x10
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <H_LCD_void_Init+0x162>
    2390:	98 8b       	std	Y+16, r25	; 0x10
    2392:	8f 87       	std	Y+15, r24	; 0x0f
		
		// LCD Initialization
		_delay_ms(50);

		// Function Set
		H_LCD_void_sendCommand(0b00110011);
    2394:	83 e3       	ldi	r24, 0x33	; 51
    2396:	0e 94 69 12 	call	0x24d2	; 0x24d2 <H_LCD_void_sendCommand>
		H_LCD_void_sendCommand(0b00110010);
    239a:	82 e3       	ldi	r24, 0x32	; 50
    239c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <H_LCD_void_sendCommand>
			#if   LCD_LINE == ONE_LINE
				H_LCD_void_sendCommand(0b00100011);
			#elif LCD_LINE == TWO_LINE
				H_LCD_void_sendCommand(0b00101011);
			#elif LCD_LINE == FOUR_LINE
				H_LCD_void_sendCommand(0b00101011);
    23a0:	8b e2       	ldi	r24, 0x2B	; 43
    23a2:	0e 94 69 12 	call	0x24d2	; 0x24d2 <H_LCD_void_sendCommand>
		#elif LCD_FONT == FONT_5X10
			H_LCD_void_sendCommand(0b00100111);
		#endif

		// Display ON-OFF Controll => ON
		H_LCD_void_sendCommand(0b00001100);
    23a6:	8c e0       	ldi	r24, 0x0C	; 12
    23a8:	0e 94 69 12 	call	0x24d2	; 0x24d2 <H_LCD_void_sendCommand>

		//Display Clear
		H_LCD_void_sendCommand(0b00000001);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	0e 94 69 12 	call	0x24d2	; 0x24d2 <H_LCD_void_sendCommand>
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	a0 e8       	ldi	r26, 0x80	; 128
    23b8:	bf e3       	ldi	r27, 0x3F	; 63
    23ba:	8b 87       	std	Y+11, r24	; 0x0b
    23bc:	9c 87       	std	Y+12, r25	; 0x0c
    23be:	ad 87       	std	Y+13, r26	; 0x0d
    23c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	4a e7       	ldi	r20, 0x7A	; 122
    23d0:	55 e4       	ldi	r21, 0x45	; 69
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	8f 83       	std	Y+7, r24	; 0x07
    23dc:	98 87       	std	Y+8, r25	; 0x08
    23de:	a9 87       	std	Y+9, r26	; 0x09
    23e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e2:	6f 81       	ldd	r22, Y+7	; 0x07
    23e4:	78 85       	ldd	r23, Y+8	; 0x08
    23e6:	89 85       	ldd	r24, Y+9	; 0x09
    23e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e8       	ldi	r20, 0x80	; 128
    23f0:	5f e3       	ldi	r21, 0x3F	; 63
    23f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f6:	88 23       	and	r24, r24
    23f8:	2c f4       	brge	.+10     	; 0x2404 <H_LCD_void_Init+0x1da>
		__ticks = 1;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	9e 83       	std	Y+6, r25	; 0x06
    2400:	8d 83       	std	Y+5, r24	; 0x05
    2402:	3f c0       	rjmp	.+126    	; 0x2482 <H_LCD_void_Init+0x258>
	else if (__tmp > 65535)
    2404:	6f 81       	ldd	r22, Y+7	; 0x07
    2406:	78 85       	ldd	r23, Y+8	; 0x08
    2408:	89 85       	ldd	r24, Y+9	; 0x09
    240a:	9a 85       	ldd	r25, Y+10	; 0x0a
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	3f ef       	ldi	r19, 0xFF	; 255
    2410:	4f e7       	ldi	r20, 0x7F	; 127
    2412:	57 e4       	ldi	r21, 0x47	; 71
    2414:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2418:	18 16       	cp	r1, r24
    241a:	4c f5       	brge	.+82     	; 0x246e <H_LCD_void_Init+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241c:	6b 85       	ldd	r22, Y+11	; 0x0b
    241e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2420:	8d 85       	ldd	r24, Y+13	; 0x0d
    2422:	9e 85       	ldd	r25, Y+14	; 0x0e
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e2       	ldi	r20, 0x20	; 32
    242a:	51 e4       	ldi	r21, 0x41	; 65
    242c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	0f c0       	rjmp	.+30     	; 0x2464 <H_LCD_void_Init+0x23a>
    2446:	80 e9       	ldi	r24, 0x90	; 144
    2448:	91 e0       	ldi	r25, 0x01	; 1
    244a:	9c 83       	std	Y+4, r25	; 0x04
    244c:	8b 83       	std	Y+3, r24	; 0x03
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <H_LCD_void_Init+0x228>
    2456:	9c 83       	std	Y+4, r25	; 0x04
    2458:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245a:	8d 81       	ldd	r24, Y+5	; 0x05
    245c:	9e 81       	ldd	r25, Y+6	; 0x06
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	9e 83       	std	Y+6, r25	; 0x06
    2462:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	69 f7       	brne	.-38     	; 0x2446 <H_LCD_void_Init+0x21c>
    246c:	14 c0       	rjmp	.+40     	; 0x2496 <H_LCD_void_Init+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246e:	6f 81       	ldd	r22, Y+7	; 0x07
    2470:	78 85       	ldd	r23, Y+8	; 0x08
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	9a 85       	ldd	r25, Y+10	; 0x0a
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	9e 83       	std	Y+6, r25	; 0x06
    2480:	8d 83       	std	Y+5, r24	; 0x05
    2482:	8d 81       	ldd	r24, Y+5	; 0x05
    2484:	9e 81       	ldd	r25, Y+6	; 0x06
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	9a 81       	ldd	r25, Y+2	; 0x02
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <H_LCD_void_Init+0x264>
    2492:	9a 83       	std	Y+2, r25	; 0x02
    2494:	89 83       	std	Y+1, r24	; 0x01
		
		_delay_ms(1);
		
		//Entry Mode Set  >> I/D=1 & S=0
		H_LCD_void_sendCommand(0b00000110);
    2496:	86 e0       	ldi	r24, 0x06	; 6
    2498:	0e 94 69 12 	call	0x24d2	; 0x24d2 <H_LCD_void_sendCommand>
		_delay_ms(1);
		H_LCD_void_sendCommand(0X06);
*/
	#endif
	
 }
    249c:	6e 96       	adiw	r28, 0x1e	; 30
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <H_LCD_void_sendData>:
	 
	 

	 
void H_LCD_void_sendData(u8 copy_u8data )
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	0f 92       	push	r0
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	89 83       	std	Y+1, r24	; 0x01
	// Write Data => RS = 1
	DIO_voidSetPinValue(LCD_RS_PORT_PIN,HIGH);
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	63 e0       	ldi	r22, 0x03	; 3
    24be:	41 e0       	ldi	r20, 0x01	; 1
    24c0:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_voidSetPinValue>


	// Send Data to Latch Function
	H_LCD_void_latchByte(copy_u8data);
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	0e 94 41 15 	call	0x2a82	; 0x2a82 <H_LCD_void_latchByte>

}
    24ca:	0f 90       	pop	r0
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <H_LCD_void_sendCommand>:

void H_LCD_void_sendCommand(u8 copy_u8command)
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	0f 92       	push	r0
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	89 83       	std	Y+1, r24	; 0x01
	// Write Instruction => RS = 0
	DIO_voidSetPinValue(LCD_RS_PORT_PIN,LOW);
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	63 e0       	ldi	r22, 0x03	; 3
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_voidSetPinValue>
	

	// Send Data to Latch Function
	H_LCD_void_latchByte(copy_u8command);
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	0e 94 41 15 	call	0x2a82	; 0x2a82 <H_LCD_void_latchByte>

}
    24ee:	0f 90       	pop	r0
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <H_LCD_void_sendString>:


void H_LCD_void_sendString(const s8 *pstr) {
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	62 97       	sbiw	r28, 0x12	; 18
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	9a 8b       	std	Y+18, r25	; 0x12
    250c:	89 8b       	std	Y+17, r24	; 0x11
    u8 i = 0;
    250e:	18 8a       	std	Y+16, r1	; 0x10
    u8 line = 0;
    2510:	1f 86       	std	Y+15, r1	; 0x0f
    2512:	90 c0       	rjmp	.+288    	; 0x2634 <H_LCD_void_sendString+0x13e>

    while (pstr[i] != '\0')
    {
        H_LCD_void_sendData(pstr[i]);
    2514:	88 89       	ldd	r24, Y+16	; 0x10
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	89 89       	ldd	r24, Y+17	; 0x11
    251c:	9a 89       	ldd	r25, Y+18	; 0x12
    251e:	fc 01       	movw	r30, r24
    2520:	e2 0f       	add	r30, r18
    2522:	f3 1f       	adc	r31, r19
    2524:	80 81       	ld	r24, Z
    2526:	0e 94 57 12 	call	0x24ae	; 0x24ae <H_LCD_void_sendData>
        i++;
    252a:	88 89       	ldd	r24, Y+16	; 0x10
    252c:	8f 5f       	subi	r24, 0xFF	; 255
    252e:	88 8b       	std	Y+16, r24	; 0x10

        if (i % (LCD_COLUMNS) == 0)
    2530:	88 89       	ldd	r24, Y+16	; 0x10
    2532:	94 e1       	ldi	r25, 0x14	; 20
    2534:	69 2f       	mov	r22, r25
    2536:	0e 94 39 19 	call	0x3272	; 0x3272 <__udivmodqi4>
    253a:	89 2f       	mov	r24, r25
    253c:	88 23       	and	r24, r24
    253e:	09 f0       	breq	.+2      	; 0x2542 <H_LCD_void_sendString+0x4c>
    2540:	79 c0       	rjmp	.+242    	; 0x2634 <H_LCD_void_sendString+0x13e>
        {
            // New line after every `LCD_COLUMNS` characters
        	H_LCD_void_gotoXY(++line,0);
    2542:	8f 85       	ldd	r24, Y+15	; 0x0f
    2544:	8f 5f       	subi	r24, 0xFF	; 255
    2546:	8f 87       	std	Y+15, r24	; 0x0f
    2548:	8f 85       	ldd	r24, Y+15	; 0x0f
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	a0 e8       	ldi	r26, 0x80	; 128
    2556:	bf e3       	ldi	r27, 0x3F	; 63
    2558:	8b 87       	std	Y+11, r24	; 0x0b
    255a:	9c 87       	std	Y+12, r25	; 0x0c
    255c:	ad 87       	std	Y+13, r26	; 0x0d
    255e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2560:	6b 85       	ldd	r22, Y+11	; 0x0b
    2562:	7c 85       	ldd	r23, Y+12	; 0x0c
    2564:	8d 85       	ldd	r24, Y+13	; 0x0d
    2566:	9e 85       	ldd	r25, Y+14	; 0x0e
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	4a e7       	ldi	r20, 0x7A	; 122
    256e:	55 e4       	ldi	r21, 0x45	; 69
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	8f 83       	std	Y+7, r24	; 0x07
    257a:	98 87       	std	Y+8, r25	; 0x08
    257c:	a9 87       	std	Y+9, r26	; 0x09
    257e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2594:	88 23       	and	r24, r24
    2596:	2c f4       	brge	.+10     	; 0x25a2 <H_LCD_void_sendString+0xac>
		__ticks = 1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	9e 83       	std	Y+6, r25	; 0x06
    259e:	8d 83       	std	Y+5, r24	; 0x05
    25a0:	3f c0       	rjmp	.+126    	; 0x2620 <H_LCD_void_sendString+0x12a>
	else if (__tmp > 65535)
    25a2:	6f 81       	ldd	r22, Y+7	; 0x07
    25a4:	78 85       	ldd	r23, Y+8	; 0x08
    25a6:	89 85       	ldd	r24, Y+9	; 0x09
    25a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	3f ef       	ldi	r19, 0xFF	; 255
    25ae:	4f e7       	ldi	r20, 0x7F	; 127
    25b0:	57 e4       	ldi	r21, 0x47	; 71
    25b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b6:	18 16       	cp	r1, r24
    25b8:	4c f5       	brge	.+82     	; 0x260c <H_LCD_void_sendString+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    25bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25be:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e2       	ldi	r20, 0x20	; 32
    25c8:	51 e4       	ldi	r21, 0x41	; 65
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
    25e2:	0f c0       	rjmp	.+30     	; 0x2602 <H_LCD_void_sendString+0x10c>
    25e4:	80 e9       	ldi	r24, 0x90	; 144
    25e6:	91 e0       	ldi	r25, 0x01	; 1
    25e8:	9c 83       	std	Y+4, r25	; 0x04
    25ea:	8b 83       	std	Y+3, r24	; 0x03
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	9c 81       	ldd	r25, Y+4	; 0x04
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <H_LCD_void_sendString+0xfa>
    25f4:	9c 83       	std	Y+4, r25	; 0x04
    25f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f8:	8d 81       	ldd	r24, Y+5	; 0x05
    25fa:	9e 81       	ldd	r25, Y+6	; 0x06
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	9e 83       	std	Y+6, r25	; 0x06
    2600:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	9e 81       	ldd	r25, Y+6	; 0x06
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	69 f7       	brne	.-38     	; 0x25e4 <H_LCD_void_sendString+0xee>
    260a:	14 c0       	rjmp	.+40     	; 0x2634 <H_LCD_void_sendString+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260c:	6f 81       	ldd	r22, Y+7	; 0x07
    260e:	78 85       	ldd	r23, Y+8	; 0x08
    2610:	89 85       	ldd	r24, Y+9	; 0x09
    2612:	9a 85       	ldd	r25, Y+10	; 0x0a
    2614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	9a 83       	std	Y+2, r25	; 0x02
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	9a 81       	ldd	r25, Y+2	; 0x02
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <H_LCD_void_sendString+0x136>
    2630:	9a 83       	std	Y+2, r25	; 0x02
    2632:	89 83       	std	Y+1, r24	; 0x01

void H_LCD_void_sendString(const s8 *pstr) {
    u8 i = 0;
    u8 line = 0;

    while (pstr[i] != '\0')
    2634:	88 89       	ldd	r24, Y+16	; 0x10
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	89 89       	ldd	r24, Y+17	; 0x11
    263c:	9a 89       	ldd	r25, Y+18	; 0x12
    263e:	fc 01       	movw	r30, r24
    2640:	e2 0f       	add	r30, r18
    2642:	f3 1f       	adc	r31, r19
    2644:	80 81       	ld	r24, Z
    2646:	88 23       	and	r24, r24
    2648:	09 f0       	breq	.+2      	; 0x264c <H_LCD_void_sendString+0x156>
    264a:	64 cf       	rjmp	.-312    	; 0x2514 <H_LCD_void_sendString+0x1e>
        	H_LCD_void_gotoXY(++line,0);
			_delay_ms(1);
        }

    }
}
    264c:	62 96       	adiw	r28, 0x12	; 18
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <H_LCD_void_ShiftString>:


void H_LCD_void_ShiftString(const s8 *pstr, u8 copy_u8lineNumber)
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	00 d0       	rcall	.+0      	; 0x2664 <H_LCD_void_ShiftString+0x6>
    2664:	00 d0       	rcall	.+0      	; 0x2666 <H_LCD_void_ShiftString+0x8>
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	9b 83       	std	Y+3, r25	; 0x03
    266c:	8a 83       	std	Y+2, r24	; 0x02
    266e:	6c 83       	std	Y+4, r22	; 0x04
	static u8 i = 0 ;
	static u8 j = 0 ;

    if (copy_u8lineNumber < LCD_ROW)
    2670:	8c 81       	ldd	r24, Y+4	; 0x04
    2672:	84 30       	cpi	r24, 0x04	; 4
    2674:	08 f0       	brcs	.+2      	; 0x2678 <H_LCD_void_ShiftString+0x1a>
    2676:	4c c0       	rjmp	.+152    	; 0x2710 <H_LCD_void_ShiftString+0xb2>
    {
         u8 strLen = 0;
    2678:	19 82       	std	Y+1, r1	; 0x01
    267a:	03 c0       	rjmp	.+6      	; 0x2682 <H_LCD_void_ShiftString+0x24>
         // Calculate the string length manually
         while (pstr[strLen] != '\0')
         {
             strLen++;
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	8f 5f       	subi	r24, 0xFF	; 255
    2680:	89 83       	std	Y+1, r24	; 0x01

    if (copy_u8lineNumber < LCD_ROW)
    {
         u8 strLen = 0;
         // Calculate the string length manually
         while (pstr[strLen] != '\0')
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	9b 81       	ldd	r25, Y+3	; 0x03
    268c:	fc 01       	movw	r30, r24
    268e:	e2 0f       	add	r30, r18
    2690:	f3 1f       	adc	r31, r19
    2692:	80 81       	ld	r24, Z
    2694:	88 23       	and	r24, r24
    2696:	91 f7       	brne	.-28     	; 0x267c <H_LCD_void_ShiftString+0x1e>
         {
             strLen++;
         }

        if (i >= (LCD_COLUMNS-strLen-j))
    2698:	80 91 0d 02 	lds	r24, 0x020D
    269c:	48 2f       	mov	r20, r24
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	28 2f       	mov	r18, r24
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	84 e1       	ldi	r24, 0x14	; 20
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	bc 01       	movw	r22, r24
    26ac:	62 1b       	sub	r22, r18
    26ae:	73 0b       	sbc	r23, r19
    26b0:	9b 01       	movw	r18, r22
    26b2:	80 91 0c 02 	lds	r24, 0x020C
    26b6:	88 2f       	mov	r24, r24
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	b9 01       	movw	r22, r18
    26bc:	68 1b       	sub	r22, r24
    26be:	79 0b       	sbc	r23, r25
    26c0:	cb 01       	movw	r24, r22
    26c2:	48 17       	cp	r20, r24
    26c4:	59 07       	cpc	r21, r25
    26c6:	2c f0       	brlt	.+10     	; 0x26d2 <H_LCD_void_ShiftString+0x74>
        {
            i = 0;  // Start from the beginning when reaching the end
    26c8:	10 92 0d 02 	sts	0x020D, r1
            H_LCD_void_clearLine(copy_u8lineNumber);
    26cc:	8c 81       	ldd	r24, Y+4	; 0x04
    26ce:	0e 94 8f 13 	call	0x271e	; 0x271e <H_LCD_void_clearLine>
        }
        H_LCD_void_gotoXY(copy_u8lineNumber,i++);
    26d2:	80 91 0d 02 	lds	r24, 0x020D
    26d6:	98 2f       	mov	r25, r24
    26d8:	8f 5f       	subi	r24, 0xFF	; 255
    26da:	80 93 0d 02 	sts	0x020D, r24
    26de:	8c 81       	ldd	r24, Y+4	; 0x04
    26e0:	69 2f       	mov	r22, r25
    26e2:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
        for(j = 0 ; j < i ;j++)
    26e6:	10 92 0c 02 	sts	0x020C, r1
    26ea:	08 c0       	rjmp	.+16     	; 0x26fc <H_LCD_void_ShiftString+0x9e>
        {
        	H_LCD_void_sendData(' ');
    26ec:	80 e2       	ldi	r24, 0x20	; 32
    26ee:	0e 94 57 12 	call	0x24ae	; 0x24ae <H_LCD_void_sendData>
        {
            i = 0;  // Start from the beginning when reaching the end
            H_LCD_void_clearLine(copy_u8lineNumber);
        }
        H_LCD_void_gotoXY(copy_u8lineNumber,i++);
        for(j = 0 ; j < i ;j++)
    26f2:	80 91 0c 02 	lds	r24, 0x020C
    26f6:	8f 5f       	subi	r24, 0xFF	; 255
    26f8:	80 93 0c 02 	sts	0x020C, r24
    26fc:	90 91 0c 02 	lds	r25, 0x020C
    2700:	80 91 0d 02 	lds	r24, 0x020D
    2704:	98 17       	cp	r25, r24
    2706:	90 f3       	brcs	.-28     	; 0x26ec <H_LCD_void_ShiftString+0x8e>
        {
        	H_LCD_void_sendData(' ');
        }
        H_LCD_void_sendString(pstr);
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	9b 81       	ldd	r25, Y+3	; 0x03
    270c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <H_LCD_void_sendString>
    }
}
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	08 95       	ret

0000271e <H_LCD_void_clearLine>:




void H_LCD_void_clearLine(u8 copy_u8lineNumber)
{
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	00 d0       	rcall	.+0      	; 0x2724 <H_LCD_void_clearLine+0x6>
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	8a 83       	std	Y+2, r24	; 0x02
    if (copy_u8lineNumber < LCD_ROW)
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	84 30       	cpi	r24, 0x04	; 4
    272e:	98 f4       	brcc	.+38     	; 0x2756 <H_LCD_void_clearLine+0x38>
    {
        H_LCD_void_gotoXY(copy_u8lineNumber, 0);  // Move to the beginning of the line
    2730:	8a 81       	ldd	r24, Y+2	; 0x02
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
        for (u8 i = 0; i < LCD_COLUMNS; i++)
    2738:	19 82       	std	Y+1, r1	; 0x01
    273a:	06 c0       	rjmp	.+12     	; 0x2748 <H_LCD_void_clearLine+0x2a>
        {
            H_LCD_void_sendData(' ');  // Send space character to clear the line
    273c:	80 e2       	ldi	r24, 0x20	; 32
    273e:	0e 94 57 12 	call	0x24ae	; 0x24ae <H_LCD_void_sendData>
void H_LCD_void_clearLine(u8 copy_u8lineNumber)
{
    if (copy_u8lineNumber < LCD_ROW)
    {
        H_LCD_void_gotoXY(copy_u8lineNumber, 0);  // Move to the beginning of the line
        for (u8 i = 0; i < LCD_COLUMNS; i++)
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	8f 5f       	subi	r24, 0xFF	; 255
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	84 31       	cpi	r24, 0x14	; 20
    274c:	b8 f3       	brcs	.-18     	; 0x273c <H_LCD_void_clearLine+0x1e>
        {
            H_LCD_void_sendData(' ');  // Send space character to clear the line
        }
        H_LCD_void_gotoXY(copy_u8lineNumber, 0);  // Move to the beginning of the line
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
    }
}
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <H_LCD_void_gotoXY>:



void H_LCD_void_gotoXY(u8 copy_u8Row, u8 copy_u8Col)
{
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	00 d0       	rcall	.+0      	; 0x2766 <H_LCD_void_gotoXY+0x6>
    2766:	00 d0       	rcall	.+0      	; 0x2768 <H_LCD_void_gotoXY+0x8>
    2768:	00 d0       	rcall	.+0      	; 0x276a <H_LCD_void_gotoXY+0xa>
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	8d 83       	std	Y+5, r24	; 0x05
    2770:	6e 83       	std	Y+6, r22	; 0x06
	// Row offsets for a 4x20 LCD
    u8 row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    2772:	19 82       	std	Y+1, r1	; 0x01
    2774:	80 e4       	ldi	r24, 0x40	; 64
    2776:	8a 83       	std	Y+2, r24	; 0x02
    2778:	84 e1       	ldi	r24, 0x14	; 20
    277a:	8b 83       	std	Y+3, r24	; 0x03
    277c:	84 e5       	ldi	r24, 0x54	; 84
    277e:	8c 83       	std	Y+4, r24	; 0x04
    H_LCD_void_sendCommand(0x80 | (row_offsets[copy_u8Row] + copy_u8Col));
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	ce 01       	movw	r24, r28
    2788:	01 96       	adiw	r24, 0x01	; 1
    278a:	fc 01       	movw	r30, r24
    278c:	e2 0f       	add	r30, r18
    278e:	f3 1f       	adc	r31, r19
    2790:	90 81       	ld	r25, Z
    2792:	8e 81       	ldd	r24, Y+6	; 0x06
    2794:	89 0f       	add	r24, r25
    2796:	80 68       	ori	r24, 0x80	; 128
    2798:	0e 94 69 12 	call	0x24d2	; 0x24d2 <H_LCD_void_sendCommand>
}
    279c:	26 96       	adiw	r28, 0x06	; 6
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	08 95       	ret

000027ae <H_LCD_void_sendIntNum>:


void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	62 97       	sbiw	r28, 0x12	; 18
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	6f 87       	std	Y+15, r22	; 0x0f
    27c8:	78 8b       	std	Y+16, r23	; 0x10
    27ca:	89 8b       	std	Y+17, r24	; 0x11
    27cc:	9a 8b       	std	Y+18, r25	; 0x12
		// Buffer to store the digits as characters
	    s8 buffer[12];  // Assuming a 32-bit number, which can have up to 11 digits

	    // Check for negative numbers
	    if (copy_s32Num < 0)
    27ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d0:	98 89       	ldd	r25, Y+16	; 0x10
    27d2:	a9 89       	ldd	r26, Y+17	; 0x11
    27d4:	ba 89       	ldd	r27, Y+18	; 0x12
    27d6:	bb 23       	and	r27, r27
    27d8:	94 f4       	brge	.+36     	; 0x27fe <H_LCD_void_sendIntNum+0x50>
	    {
	        H_LCD_void_sendData('-');  // Display a minus sign for negative numbers
    27da:	8d e2       	ldi	r24, 0x2D	; 45
    27dc:	0e 94 57 12 	call	0x24ae	; 0x24ae <H_LCD_void_sendData>
	        copy_s32Num = -copy_s32Num;  // Make the number positive for processing
    27e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e2:	98 89       	ldd	r25, Y+16	; 0x10
    27e4:	a9 89       	ldd	r26, Y+17	; 0x11
    27e6:	ba 89       	ldd	r27, Y+18	; 0x12
    27e8:	b0 95       	com	r27
    27ea:	a0 95       	com	r26
    27ec:	90 95       	com	r25
    27ee:	81 95       	neg	r24
    27f0:	9f 4f       	sbci	r25, 0xFF	; 255
    27f2:	af 4f       	sbci	r26, 0xFF	; 255
    27f4:	bf 4f       	sbci	r27, 0xFF	; 255
    27f6:	8f 87       	std	Y+15, r24	; 0x0f
    27f8:	98 8b       	std	Y+16, r25	; 0x10
    27fa:	a9 8b       	std	Y+17, r26	; 0x11
    27fc:	ba 8b       	std	Y+18, r27	; 0x12
	    }

	    // Handle the case of a number being zero
	    if (copy_s32Num == 0) {
    27fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2800:	98 89       	ldd	r25, Y+16	; 0x10
    2802:	a9 89       	ldd	r26, Y+17	; 0x11
    2804:	ba 89       	ldd	r27, Y+18	; 0x12
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	a1 05       	cpc	r26, r1
    280a:	b1 05       	cpc	r27, r1
    280c:	21 f4       	brne	.+8      	; 0x2816 <H_LCD_void_sendIntNum+0x68>
	        H_LCD_void_sendData('0');
    280e:	80 e3       	ldi	r24, 0x30	; 48
    2810:	0e 94 57 12 	call	0x24ae	; 0x24ae <H_LCD_void_sendData>
    2814:	50 c0       	rjmp	.+160    	; 0x28b6 <H_LCD_void_sendIntNum+0x108>
	        return;
	    }

	    // Convert the number to a string in reverse order
	    u8 index = 0;
    2816:	1a 82       	std	Y+2, r1	; 0x02
    2818:	2e c0       	rjmp	.+92     	; 0x2876 <H_LCD_void_sendIntNum+0xc8>
	    while (copy_s32Num > 0)
	    {
	        buffer[index++] = '0' + (copy_s32Num % 10);  // Convert the digit to a character
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	08 2f       	mov	r16, r24
    281e:	10 e0       	ldi	r17, 0x00	; 0
    2820:	8f 85       	ldd	r24, Y+15	; 0x0f
    2822:	98 89       	ldd	r25, Y+16	; 0x10
    2824:	a9 89       	ldd	r26, Y+17	; 0x11
    2826:	ba 89       	ldd	r27, Y+18	; 0x12
    2828:	2a e0       	ldi	r18, 0x0A	; 10
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e0       	ldi	r20, 0x00	; 0
    282e:	50 e0       	ldi	r21, 0x00	; 0
    2830:	bc 01       	movw	r22, r24
    2832:	cd 01       	movw	r24, r26
    2834:	0e 94 45 19 	call	0x328a	; 0x328a <__divmodsi4>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	80 5d       	subi	r24, 0xD0	; 208
    283e:	28 2f       	mov	r18, r24
    2840:	ce 01       	movw	r24, r28
    2842:	03 96       	adiw	r24, 0x03	; 3
    2844:	fc 01       	movw	r30, r24
    2846:	e0 0f       	add	r30, r16
    2848:	f1 1f       	adc	r31, r17
    284a:	20 83       	st	Z, r18
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	8f 5f       	subi	r24, 0xFF	; 255
    2850:	8a 83       	std	Y+2, r24	; 0x02
	        copy_s32Num /= 10;  // Remove the last digit
    2852:	8f 85       	ldd	r24, Y+15	; 0x0f
    2854:	98 89       	ldd	r25, Y+16	; 0x10
    2856:	a9 89       	ldd	r26, Y+17	; 0x11
    2858:	ba 89       	ldd	r27, Y+18	; 0x12
    285a:	2a e0       	ldi	r18, 0x0A	; 10
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	50 e0       	ldi	r21, 0x00	; 0
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 45 19 	call	0x328a	; 0x328a <__divmodsi4>
    286a:	da 01       	movw	r26, r20
    286c:	c9 01       	movw	r24, r18
    286e:	8f 87       	std	Y+15, r24	; 0x0f
    2870:	98 8b       	std	Y+16, r25	; 0x10
    2872:	a9 8b       	std	Y+17, r26	; 0x11
    2874:	ba 8b       	std	Y+18, r27	; 0x12
	        return;
	    }

	    // Convert the number to a string in reverse order
	    u8 index = 0;
	    while (copy_s32Num > 0)
    2876:	8f 85       	ldd	r24, Y+15	; 0x0f
    2878:	98 89       	ldd	r25, Y+16	; 0x10
    287a:	a9 89       	ldd	r26, Y+17	; 0x11
    287c:	ba 89       	ldd	r27, Y+18	; 0x12
    287e:	18 16       	cp	r1, r24
    2880:	19 06       	cpc	r1, r25
    2882:	1a 06       	cpc	r1, r26
    2884:	1b 06       	cpc	r1, r27
    2886:	4c f2       	brlt	.-110    	; 0x281a <H_LCD_void_sendIntNum+0x6c>
	        buffer[index++] = '0' + (copy_s32Num % 10);  // Convert the digit to a character
	        copy_s32Num /= 10;  // Remove the last digit
	    }

	    // Send the string to the LCD in reverse order
	    for (s8 i = index - 1; i >= 0; i--)
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	81 50       	subi	r24, 0x01	; 1
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	10 c0       	rjmp	.+32     	; 0x28b0 <H_LCD_void_sendIntNum+0x102>
	    {
	        H_LCD_void_sendData(buffer[i]);
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	28 2f       	mov	r18, r24
    2894:	33 27       	eor	r19, r19
    2896:	27 fd       	sbrc	r18, 7
    2898:	30 95       	com	r19
    289a:	ce 01       	movw	r24, r28
    289c:	03 96       	adiw	r24, 0x03	; 3
    289e:	fc 01       	movw	r30, r24
    28a0:	e2 0f       	add	r30, r18
    28a2:	f3 1f       	adc	r31, r19
    28a4:	80 81       	ld	r24, Z
    28a6:	0e 94 57 12 	call	0x24ae	; 0x24ae <H_LCD_void_sendData>
	        buffer[index++] = '0' + (copy_s32Num % 10);  // Convert the digit to a character
	        copy_s32Num /= 10;  // Remove the last digit
	    }

	    // Send the string to the LCD in reverse order
	    for (s8 i = index - 1; i >= 0; i--)
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	81 50       	subi	r24, 0x01	; 1
    28ae:	89 83       	std	Y+1, r24	; 0x01
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	88 23       	and	r24, r24
    28b4:	6c f7       	brge	.-38     	; 0x2890 <H_LCD_void_sendIntNum+0xe2>
	    {
	        H_LCD_void_sendData(buffer[i]);
	    }
	}
    28b6:	62 96       	adiw	r28, 0x12	; 18
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	1f 91       	pop	r17
    28c8:	0f 91       	pop	r16
    28ca:	08 95       	ret

000028cc <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 *ArrPattern, u8 copy_u8charCode)
{
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <H_LCD_void_creatCustomChar+0x6>
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <H_LCD_void_creatCustomChar+0x8>
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	9b 83       	std	Y+3, r25	; 0x03
    28da:	8a 83       	std	Y+2, r24	; 0x02
    28dc:	6c 83       	std	Y+4, r22	; 0x04
    // Set CGRAM address to write the custom character (0 to 7)
    H_LCD_void_sendCommand(0x40 | (copy_u8charCode << 3));
    28de:	8c 81       	ldd	r24, Y+4	; 0x04
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	88 0f       	add	r24, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	88 0f       	add	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	80 64       	ori	r24, 0x40	; 64
    28f2:	0e 94 69 12 	call	0x24d2	; 0x24d2 <H_LCD_void_sendCommand>

    // Send the custom character pattern data
    for (u8 i = 0; i < 8; i++)
    28f6:	19 82       	std	Y+1, r1	; 0x01
    28f8:	0e c0       	rjmp	.+28     	; 0x2916 <H_LCD_void_creatCustomChar+0x4a>
    {
        H_LCD_void_sendData(ArrPattern[i]);
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	9b 81       	ldd	r25, Y+3	; 0x03
    2904:	fc 01       	movw	r30, r24
    2906:	e2 0f       	add	r30, r18
    2908:	f3 1f       	adc	r31, r19
    290a:	80 81       	ld	r24, Z
    290c:	0e 94 57 12 	call	0x24ae	; 0x24ae <H_LCD_void_sendData>
{
    // Set CGRAM address to write the custom character (0 to 7)
    H_LCD_void_sendCommand(0x40 | (copy_u8charCode << 3));

    // Send the custom character pattern data
    for (u8 i = 0; i < 8; i++)
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	8f 5f       	subi	r24, 0xFF	; 255
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	88 30       	cpi	r24, 0x08	; 8
    291a:	78 f3       	brcs	.-34     	; 0x28fa <H_LCD_void_creatCustomChar+0x2e>
    {
        H_LCD_void_sendData(ArrPattern[i]);
    }
    // Return to the DDRAM address
    H_LCD_void_sendCommand(0x80);
    291c:	80 e8       	ldi	r24, 0x80	; 128
    291e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <H_LCD_void_sendCommand>
}
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <H_LCD_void_displayCustomChar>:

void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	0f 92       	push	r0
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	89 83       	std	Y+1, r24	; 0x01
    // Send the custom character using its character code (0 to 7)
    H_LCD_void_sendData(copy_u8charCode);
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	0e 94 57 12 	call	0x24ae	; 0x24ae <H_LCD_void_sendData>
}
    2942:	0f 90       	pop	r0
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <H_LCD_void_sendFloat>:


void H_LCD_void_sendFloat(f32 number, u8 decimalPlaces)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	2b 97       	sbiw	r28, 0x0b	; 11
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	6f 83       	std	Y+7, r22	; 0x07
    2960:	78 87       	std	Y+8, r23	; 0x08
    2962:	89 87       	std	Y+9, r24	; 0x09
    2964:	9a 87       	std	Y+10, r25	; 0x0a
    2966:	4b 87       	std	Y+11, r20	; 0x0b
    // Handle negative numbers
    if (number < 0.0)
    2968:	6f 81       	ldd	r22, Y+7	; 0x07
    296a:	78 85       	ldd	r23, Y+8	; 0x08
    296c:	89 85       	ldd	r24, Y+9	; 0x09
    296e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e0       	ldi	r20, 0x00	; 0
    2976:	50 e0       	ldi	r21, 0x00	; 0
    2978:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    297c:	88 23       	and	r24, r24
    297e:	64 f4       	brge	.+24     	; 0x2998 <H_LCD_void_sendFloat+0x4e>
    {
        H_LCD_void_sendData('-');
    2980:	8d e2       	ldi	r24, 0x2D	; 45
    2982:	0e 94 57 12 	call	0x24ae	; 0x24ae <H_LCD_void_sendData>
        number = -number;
    2986:	8f 81       	ldd	r24, Y+7	; 0x07
    2988:	98 85       	ldd	r25, Y+8	; 0x08
    298a:	a9 85       	ldd	r26, Y+9	; 0x09
    298c:	ba 85       	ldd	r27, Y+10	; 0x0a
    298e:	b0 58       	subi	r27, 0x80	; 128
    2990:	8f 83       	std	Y+7, r24	; 0x07
    2992:	98 87       	std	Y+8, r25	; 0x08
    2994:	a9 87       	std	Y+9, r26	; 0x09
    2996:	ba 87       	std	Y+10, r27	; 0x0a
    }

    // Extract the integer part
    u32 integerPart = (u32)number;
    2998:	6f 81       	ldd	r22, Y+7	; 0x07
    299a:	78 85       	ldd	r23, Y+8	; 0x08
    299c:	89 85       	ldd	r24, Y+9	; 0x09
    299e:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	8b 83       	std	Y+3, r24	; 0x03
    29aa:	9c 83       	std	Y+4, r25	; 0x04
    29ac:	ad 83       	std	Y+5, r26	; 0x05
    29ae:	be 83       	std	Y+6, r27	; 0x06

    // Convert the integer part to a string
    H_LCD_void_sendIntNum(integerPart);
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	ad 81       	ldd	r26, Y+5	; 0x05
    29b6:	be 81       	ldd	r27, Y+6	; 0x06
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 d7 13 	call	0x27ae	; 0x27ae <H_LCD_void_sendIntNum>

    // Handle decimal point
    if (decimalPlaces > 0)
    29c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    29c2:	88 23       	and	r24, r24
    29c4:	09 f4       	brne	.+2      	; 0x29c8 <H_LCD_void_sendFloat+0x7e>
    29c6:	54 c0       	rjmp	.+168    	; 0x2a70 <H_LCD_void_sendFloat+0x126>
    {
        H_LCD_void_sendData('.');
    29c8:	8e e2       	ldi	r24, 0x2E	; 46
    29ca:	0e 94 57 12 	call	0x24ae	; 0x24ae <H_LCD_void_sendData>
        number -= (f32)integerPart; // Get the fractional part
    29ce:	6b 81       	ldd	r22, Y+3	; 0x03
    29d0:	7c 81       	ldd	r23, Y+4	; 0x04
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    29da:	9b 01       	movw	r18, r22
    29dc:	ac 01       	movw	r20, r24
    29de:	6f 81       	ldd	r22, Y+7	; 0x07
    29e0:	78 85       	ldd	r23, Y+8	; 0x08
    29e2:	89 85       	ldd	r24, Y+9	; 0x09
    29e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	8f 83       	std	Y+7, r24	; 0x07
    29f0:	98 87       	std	Y+8, r25	; 0x08
    29f2:	a9 87       	std	Y+9, r26	; 0x09
    29f4:	ba 87       	std	Y+10, r27	; 0x0a

        // Print decimal digits
        for (u8 i = 0; i < decimalPlaces; i++)
    29f6:	1a 82       	std	Y+2, r1	; 0x02
    29f8:	37 c0       	rjmp	.+110    	; 0x2a68 <H_LCD_void_sendFloat+0x11e>
        {
            number *= 10.0;
    29fa:	6f 81       	ldd	r22, Y+7	; 0x07
    29fc:	78 85       	ldd	r23, Y+8	; 0x08
    29fe:	89 85       	ldd	r24, Y+9	; 0x09
    2a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e2       	ldi	r20, 0x20	; 32
    2a08:	51 e4       	ldi	r21, 0x41	; 65
    2a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	8f 83       	std	Y+7, r24	; 0x07
    2a14:	98 87       	std	Y+8, r25	; 0x08
    2a16:	a9 87       	std	Y+9, r26	; 0x09
    2a18:	ba 87       	std	Y+10, r27	; 0x0a
            u8 digit = (u8)number;
    2a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1c:	78 85       	ldd	r23, Y+8	; 0x08
    2a1e:	89 85       	ldd	r24, Y+9	; 0x09
    2a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	89 83       	std	Y+1, r24	; 0x01
            H_LCD_void_sendData('0' + digit);
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	80 5d       	subi	r24, 0xD0	; 208
    2a30:	0e 94 57 12 	call	0x24ae	; 0x24ae <H_LCD_void_sendData>
            number -= (f32)digit;
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	88 2f       	mov	r24, r24
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a0 e0       	ldi	r26, 0x00	; 0
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a46:	9b 01       	movw	r18, r22
    2a48:	ac 01       	movw	r20, r24
    2a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4c:	78 85       	ldd	r23, Y+8	; 0x08
    2a4e:	89 85       	ldd	r24, Y+9	; 0x09
    2a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a52:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	8f 83       	std	Y+7, r24	; 0x07
    2a5c:	98 87       	std	Y+8, r25	; 0x08
    2a5e:	a9 87       	std	Y+9, r26	; 0x09
    2a60:	ba 87       	std	Y+10, r27	; 0x0a
    {
        H_LCD_void_sendData('.');
        number -= (f32)integerPart; // Get the fractional part

        // Print decimal digits
        for (u8 i = 0; i < decimalPlaces; i++)
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	8f 5f       	subi	r24, 0xFF	; 255
    2a66:	8a 83       	std	Y+2, r24	; 0x02
    2a68:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a6c:	98 17       	cp	r25, r24
    2a6e:	28 f2       	brcs	.-118    	; 0x29fa <H_LCD_void_sendFloat+0xb0>
            u8 digit = (u8)number;
            H_LCD_void_sendData('0' + digit);
            number -= (f32)digit;
        }
    }
}
    2a70:	2b 96       	adiw	r28, 0x0b	; 11
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <H_LCD_void_latchByte>:
/*******************************************************************************/
/*************************    Private Function      ****************************/
/*******************************************************************************/

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{	 
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	c7 54       	subi	r28, 0x47	; 71
    2a8c:	d0 40       	sbci	r29, 0x00	; 0
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	8b af       	std	Y+59, r24	; 0x3b
	DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	62 e0       	ldi	r22, 0x02	; 2
    2a9e:	40 e0       	ldi	r20, 0x00	; 0
    2aa0:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
		_delay_ms(5);

	#elif LCD_MODE == MODE_4BIT

		for(u8 i = 20; i>12;i-=2)
    2aa4:	84 e1       	ldi	r24, 0x14	; 20
    2aa6:	8a af       	std	Y+58, r24	; 0x3a
    2aa8:	52 c0       	rjmp	.+164    	; 0x2b4e <H_LCD_void_latchByte+0xcc>
		{
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-6)/2)));
    2aaa:	8a ad       	ldd	r24, Y+58	; 0x3a
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	ec 54       	subi	r30, 0x4C	; 76
    2ab4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab6:	20 81       	ld	r18, Z
    2ab8:	24 96       	adiw	r28, 0x04	; 4
    2aba:	2f af       	std	Y+63, r18	; 0x3f
    2abc:	24 97       	sbiw	r28, 0x04	; 4
    2abe:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ac0:	88 2f       	mov	r24, r24
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	01 96       	adiw	r24, 0x01	; 1
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	ec 54       	subi	r30, 0x4C	; 76
    2aca:	fe 4f       	sbci	r31, 0xFE	; 254
    2acc:	30 81       	ld	r19, Z
    2ace:	23 96       	adiw	r28, 0x03	; 3
    2ad0:	3f af       	std	Y+63, r19	; 0x3f
    2ad2:	23 97       	sbiw	r28, 0x03	; 3
    2ad4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	22 96       	adiw	r28, 0x02	; 2
    2adc:	3f af       	std	Y+63, r19	; 0x3f
    2ade:	2e af       	std	Y+62, r18	; 0x3e
    2ae0:	22 97       	sbiw	r28, 0x02	; 2
    2ae2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ae4:	88 2f       	mov	r24, r24
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	06 97       	sbiw	r24, 0x06	; 6
    2aea:	26 96       	adiw	r28, 0x06	; 6
    2aec:	9f af       	std	Y+63, r25	; 0x3f
    2aee:	8e af       	std	Y+62, r24	; 0x3e
    2af0:	26 97       	sbiw	r28, 0x06	; 6
    2af2:	26 96       	adiw	r28, 0x06	; 6
    2af4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2af6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2af8:	26 97       	sbiw	r28, 0x06	; 6
    2afa:	99 23       	and	r25, r25
    2afc:	54 f4       	brge	.+20     	; 0x2b12 <H_LCD_void_latchByte+0x90>
    2afe:	26 96       	adiw	r28, 0x06	; 6
    2b00:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b02:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b04:	26 97       	sbiw	r28, 0x06	; 6
    2b06:	2f 5f       	subi	r18, 0xFF	; 255
    2b08:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0a:	26 96       	adiw	r28, 0x06	; 6
    2b0c:	3f af       	std	Y+63, r19	; 0x3f
    2b0e:	2e af       	std	Y+62, r18	; 0x3e
    2b10:	26 97       	sbiw	r28, 0x06	; 6
    2b12:	26 96       	adiw	r28, 0x06	; 6
    2b14:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b16:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b18:	26 97       	sbiw	r28, 0x06	; 6
    2b1a:	95 95       	asr	r25
    2b1c:	87 95       	ror	r24
    2b1e:	22 96       	adiw	r28, 0x02	; 2
    2b20:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b22:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b24:	22 97       	sbiw	r28, 0x02	; 2
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <H_LCD_void_latchByte+0xaa>
    2b28:	35 95       	asr	r19
    2b2a:	27 95       	ror	r18
    2b2c:	8a 95       	dec	r24
    2b2e:	e2 f7       	brpl	.-8      	; 0x2b28 <H_LCD_void_latchByte+0xa6>
    2b30:	c9 01       	movw	r24, r18
    2b32:	98 2f       	mov	r25, r24
    2b34:	91 70       	andi	r25, 0x01	; 1
    2b36:	24 96       	adiw	r28, 0x04	; 4
    2b38:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b3a:	24 97       	sbiw	r28, 0x04	; 4
    2b3c:	23 96       	adiw	r28, 0x03	; 3
    2b3e:	6f ad       	ldd	r22, Y+63	; 0x3f
    2b40:	23 97       	sbiw	r28, 0x03	; 3
    2b42:	49 2f       	mov	r20, r25
    2b44:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
		_delay_ms(5);

	#elif LCD_MODE == MODE_4BIT

		for(u8 i = 20; i>12;i-=2)
    2b48:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b4a:	82 50       	subi	r24, 0x02	; 2
    2b4c:	8a af       	std	Y+58, r24	; 0x3a
    2b4e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b50:	8d 30       	cpi	r24, 0x0D	; 13
    2b52:	08 f0       	brcs	.+2      	; 0x2b56 <H_LCD_void_latchByte+0xd4>
    2b54:	aa cf       	rjmp	.-172    	; 0x2aaa <H_LCD_void_latchByte+0x28>
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-6)/2)));
		}

		// Falling Edge
		// Set Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,HIGH);
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	62 e0       	ldi	r22, 0x02	; 2
    2b5a:	41 e0       	ldi	r20, 0x01	; 1
    2b5c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_voidSetPinValue>
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	a0 e8       	ldi	r26, 0x80	; 128
    2b66:	bf e3       	ldi	r27, 0x3F	; 63
    2b68:	8d ab       	std	Y+53, r24	; 0x35
    2b6a:	9e ab       	std	Y+54, r25	; 0x36
    2b6c:	af ab       	std	Y+55, r26	; 0x37
    2b6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b70:	6d a9       	ldd	r22, Y+53	; 0x35
    2b72:	7e a9       	ldd	r23, Y+54	; 0x36
    2b74:	8f a9       	ldd	r24, Y+55	; 0x37
    2b76:	98 ad       	ldd	r25, Y+56	; 0x38
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	4a e7       	ldi	r20, 0x7A	; 122
    2b7e:	55 e4       	ldi	r21, 0x45	; 69
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	89 ab       	std	Y+49, r24	; 0x31
    2b8a:	9a ab       	std	Y+50, r25	; 0x32
    2b8c:	ab ab       	std	Y+51, r26	; 0x33
    2b8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b90:	69 a9       	ldd	r22, Y+49	; 0x31
    2b92:	7a a9       	ldd	r23, Y+50	; 0x32
    2b94:	8b a9       	ldd	r24, Y+51	; 0x33
    2b96:	9c a9       	ldd	r25, Y+52	; 0x34
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e8       	ldi	r20, 0x80	; 128
    2b9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ba0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ba4:	88 23       	and	r24, r24
    2ba6:	2c f4       	brge	.+10     	; 0x2bb2 <H_LCD_void_latchByte+0x130>
		__ticks = 1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	98 ab       	std	Y+48, r25	; 0x30
    2bae:	8f a7       	std	Y+47, r24	; 0x2f
    2bb0:	3f c0       	rjmp	.+126    	; 0x2c30 <H_LCD_void_latchByte+0x1ae>
	else if (__tmp > 65535)
    2bb2:	69 a9       	ldd	r22, Y+49	; 0x31
    2bb4:	7a a9       	ldd	r23, Y+50	; 0x32
    2bb6:	8b a9       	ldd	r24, Y+51	; 0x33
    2bb8:	9c a9       	ldd	r25, Y+52	; 0x34
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	3f ef       	ldi	r19, 0xFF	; 255
    2bbe:	4f e7       	ldi	r20, 0x7F	; 127
    2bc0:	57 e4       	ldi	r21, 0x47	; 71
    2bc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bc6:	18 16       	cp	r1, r24
    2bc8:	4c f5       	brge	.+82     	; 0x2c1c <H_LCD_void_latchByte+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bca:	6d a9       	ldd	r22, Y+53	; 0x35
    2bcc:	7e a9       	ldd	r23, Y+54	; 0x36
    2bce:	8f a9       	ldd	r24, Y+55	; 0x37
    2bd0:	98 ad       	ldd	r25, Y+56	; 0x38
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e2       	ldi	r20, 0x20	; 32
    2bd8:	51 e4       	ldi	r21, 0x41	; 65
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	bc 01       	movw	r22, r24
    2be4:	cd 01       	movw	r24, r26
    2be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	98 ab       	std	Y+48, r25	; 0x30
    2bf0:	8f a7       	std	Y+47, r24	; 0x2f
    2bf2:	0f c0       	rjmp	.+30     	; 0x2c12 <H_LCD_void_latchByte+0x190>
    2bf4:	80 e9       	ldi	r24, 0x90	; 144
    2bf6:	91 e0       	ldi	r25, 0x01	; 1
    2bf8:	9e a7       	std	Y+46, r25	; 0x2e
    2bfa:	8d a7       	std	Y+45, r24	; 0x2d
    2bfc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bfe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	f1 f7       	brne	.-4      	; 0x2c00 <H_LCD_void_latchByte+0x17e>
    2c04:	9e a7       	std	Y+46, r25	; 0x2e
    2c06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	98 ab       	std	Y+48, r25	; 0x30
    2c10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c14:	98 a9       	ldd	r25, Y+48	; 0x30
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	69 f7       	brne	.-38     	; 0x2bf4 <H_LCD_void_latchByte+0x172>
    2c1a:	14 c0       	rjmp	.+40     	; 0x2c44 <H_LCD_void_latchByte+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c1e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c20:	8b a9       	ldd	r24, Y+51	; 0x33
    2c22:	9c a9       	ldd	r25, Y+52	; 0x34
    2c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	98 ab       	std	Y+48, r25	; 0x30
    2c2e:	8f a7       	std	Y+47, r24	; 0x2f
    2c30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c32:	98 a9       	ldd	r25, Y+48	; 0x30
    2c34:	9c a7       	std	Y+44, r25	; 0x2c
    2c36:	8b a7       	std	Y+43, r24	; 0x2b
    2c38:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	f1 f7       	brne	.-4      	; 0x2c3c <H_LCD_void_latchByte+0x1ba>
    2c40:	9c a7       	std	Y+44, r25	; 0x2c
    2c42:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		// Reset Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	62 e0       	ldi	r22, 0x02	; 2
    2c48:	40 e0       	ldi	r20, 0x00	; 0
    2c4a:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_voidSetPinValue>
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	a0 ea       	ldi	r26, 0xA0	; 160
    2c54:	b0 e4       	ldi	r27, 0x40	; 64
    2c56:	8f a3       	std	Y+39, r24	; 0x27
    2c58:	98 a7       	std	Y+40, r25	; 0x28
    2c5a:	a9 a7       	std	Y+41, r26	; 0x29
    2c5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c60:	78 a5       	ldd	r23, Y+40	; 0x28
    2c62:	89 a5       	ldd	r24, Y+41	; 0x29
    2c64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	4a e7       	ldi	r20, 0x7A	; 122
    2c6c:	55 e4       	ldi	r21, 0x45	; 69
    2c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	8b a3       	std	Y+35, r24	; 0x23
    2c78:	9c a3       	std	Y+36, r25	; 0x24
    2c7a:	ad a3       	std	Y+37, r26	; 0x25
    2c7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c80:	7c a1       	ldd	r23, Y+36	; 0x24
    2c82:	8d a1       	ldd	r24, Y+37	; 0x25
    2c84:	9e a1       	ldd	r25, Y+38	; 0x26
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e8       	ldi	r20, 0x80	; 128
    2c8c:	5f e3       	ldi	r21, 0x3F	; 63
    2c8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c92:	88 23       	and	r24, r24
    2c94:	2c f4       	brge	.+10     	; 0x2ca0 <H_LCD_void_latchByte+0x21e>
		__ticks = 1;
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9a a3       	std	Y+34, r25	; 0x22
    2c9c:	89 a3       	std	Y+33, r24	; 0x21
    2c9e:	3f c0       	rjmp	.+126    	; 0x2d1e <H_LCD_void_latchByte+0x29c>
	else if (__tmp > 65535)
    2ca0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ca2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ca4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ca6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	3f ef       	ldi	r19, 0xFF	; 255
    2cac:	4f e7       	ldi	r20, 0x7F	; 127
    2cae:	57 e4       	ldi	r21, 0x47	; 71
    2cb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb4:	18 16       	cp	r1, r24
    2cb6:	4c f5       	brge	.+82     	; 0x2d0a <H_LCD_void_latchByte+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb8:	6f a1       	ldd	r22, Y+39	; 0x27
    2cba:	78 a5       	ldd	r23, Y+40	; 0x28
    2cbc:	89 a5       	ldd	r24, Y+41	; 0x29
    2cbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e2       	ldi	r20, 0x20	; 32
    2cc6:	51 e4       	ldi	r21, 0x41	; 65
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	cd 01       	movw	r24, r26
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	9a a3       	std	Y+34, r25	; 0x22
    2cde:	89 a3       	std	Y+33, r24	; 0x21
    2ce0:	0f c0       	rjmp	.+30     	; 0x2d00 <H_LCD_void_latchByte+0x27e>
    2ce2:	80 e9       	ldi	r24, 0x90	; 144
    2ce4:	91 e0       	ldi	r25, 0x01	; 1
    2ce6:	98 a3       	std	Y+32, r25	; 0x20
    2ce8:	8f 8f       	std	Y+31, r24	; 0x1f
    2cea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cec:	98 a1       	ldd	r25, Y+32	; 0x20
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <H_LCD_void_latchByte+0x26c>
    2cf2:	98 a3       	std	Y+32, r25	; 0x20
    2cf4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf6:	89 a1       	ldd	r24, Y+33	; 0x21
    2cf8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	9a a3       	std	Y+34, r25	; 0x22
    2cfe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d00:	89 a1       	ldd	r24, Y+33	; 0x21
    2d02:	9a a1       	ldd	r25, Y+34	; 0x22
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	69 f7       	brne	.-38     	; 0x2ce2 <H_LCD_void_latchByte+0x260>
    2d08:	14 c0       	rjmp	.+40     	; 0x2d32 <H_LCD_void_latchByte+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d10:	9e a1       	ldd	r25, Y+38	; 0x26
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9a a3       	std	Y+34, r25	; 0x22
    2d1c:	89 a3       	std	Y+33, r24	; 0x21
    2d1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d20:	9a a1       	ldd	r25, Y+34	; 0x22
    2d22:	9e 8f       	std	Y+30, r25	; 0x1e
    2d24:	8d 8f       	std	Y+29, r24	; 0x1d
    2d26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	f1 f7       	brne	.-4      	; 0x2d2a <H_LCD_void_latchByte+0x2a8>
    2d2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d30:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);


		for(u8 i = 20; i>12;i-=2)
    2d32:	84 e1       	ldi	r24, 0x14	; 20
    2d34:	89 af       	std	Y+57, r24	; 0x39
    2d36:	46 c0       	rjmp	.+140    	; 0x2dc4 <H_LCD_void_latchByte+0x342>
		{
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-14)/2)));
    2d38:	89 ad       	ldd	r24, Y+57	; 0x39
    2d3a:	88 2f       	mov	r24, r24
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	fc 01       	movw	r30, r24
    2d40:	ec 54       	subi	r30, 0x4C	; 76
    2d42:	fe 4f       	sbci	r31, 0xFE	; 254
    2d44:	30 81       	ld	r19, Z
    2d46:	3f af       	std	Y+63, r19	; 0x3f
    2d48:	89 ad       	ldd	r24, Y+57	; 0x39
    2d4a:	88 2f       	mov	r24, r24
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	01 96       	adiw	r24, 0x01	; 1
    2d50:	fc 01       	movw	r30, r24
    2d52:	ec 54       	subi	r30, 0x4C	; 76
    2d54:	fe 4f       	sbci	r31, 0xFE	; 254
    2d56:	80 81       	ld	r24, Z
    2d58:	8e af       	std	Y+62, r24	; 0x3e
    2d5a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	3d af       	std	Y+61, r19	; 0x3d
    2d62:	2c af       	std	Y+60, r18	; 0x3c
    2d64:	89 ad       	ldd	r24, Y+57	; 0x39
    2d66:	88 2f       	mov	r24, r24
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	0e 97       	sbiw	r24, 0x0e	; 14
    2d6c:	28 96       	adiw	r28, 0x08	; 8
    2d6e:	9f af       	std	Y+63, r25	; 0x3f
    2d70:	8e af       	std	Y+62, r24	; 0x3e
    2d72:	28 97       	sbiw	r28, 0x08	; 8
    2d74:	28 96       	adiw	r28, 0x08	; 8
    2d76:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d78:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d7a:	28 97       	sbiw	r28, 0x08	; 8
    2d7c:	99 23       	and	r25, r25
    2d7e:	54 f4       	brge	.+20     	; 0x2d94 <H_LCD_void_latchByte+0x312>
    2d80:	28 96       	adiw	r28, 0x08	; 8
    2d82:	2e ad       	ldd	r18, Y+62	; 0x3e
    2d84:	3f ad       	ldd	r19, Y+63	; 0x3f
    2d86:	28 97       	sbiw	r28, 0x08	; 8
    2d88:	2f 5f       	subi	r18, 0xFF	; 255
    2d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8c:	28 96       	adiw	r28, 0x08	; 8
    2d8e:	3f af       	std	Y+63, r19	; 0x3f
    2d90:	2e af       	std	Y+62, r18	; 0x3e
    2d92:	28 97       	sbiw	r28, 0x08	; 8
    2d94:	28 96       	adiw	r28, 0x08	; 8
    2d96:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d98:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d9a:	28 97       	sbiw	r28, 0x08	; 8
    2d9c:	95 95       	asr	r25
    2d9e:	87 95       	ror	r24
    2da0:	2c ad       	ldd	r18, Y+60	; 0x3c
    2da2:	3d ad       	ldd	r19, Y+61	; 0x3d
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <H_LCD_void_latchByte+0x328>
    2da6:	35 95       	asr	r19
    2da8:	27 95       	ror	r18
    2daa:	8a 95       	dec	r24
    2dac:	e2 f7       	brpl	.-8      	; 0x2da6 <H_LCD_void_latchByte+0x324>
    2dae:	c9 01       	movw	r24, r18
    2db0:	98 2f       	mov	r25, r24
    2db2:	91 70       	andi	r25, 0x01	; 1
    2db4:	8f ad       	ldd	r24, Y+63	; 0x3f
    2db6:	6e ad       	ldd	r22, Y+62	; 0x3e
    2db8:	49 2f       	mov	r20, r25
    2dba:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_voidSetPinValue>
		// Reset Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
		_delay_ms(5);


		for(u8 i = 20; i>12;i-=2)
    2dbe:	89 ad       	ldd	r24, Y+57	; 0x39
    2dc0:	82 50       	subi	r24, 0x02	; 2
    2dc2:	89 af       	std	Y+57, r24	; 0x39
    2dc4:	89 ad       	ldd	r24, Y+57	; 0x39
    2dc6:	8d 30       	cpi	r24, 0x0D	; 13
    2dc8:	08 f0       	brcs	.+2      	; 0x2dcc <H_LCD_void_latchByte+0x34a>
    2dca:	b6 cf       	rjmp	.-148    	; 0x2d38 <H_LCD_void_latchByte+0x2b6>
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-14)/2)));
		}

		// Falling Edge
		// Set Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,HIGH);
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	62 e0       	ldi	r22, 0x02	; 2
    2dd0:	41 e0       	ldi	r20, 0x01	; 1
    2dd2:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_voidSetPinValue>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	a0 e8       	ldi	r26, 0x80	; 128
    2ddc:	bf e3       	ldi	r27, 0x3F	; 63
    2dde:	89 8f       	std	Y+25, r24	; 0x19
    2de0:	9a 8f       	std	Y+26, r25	; 0x1a
    2de2:	ab 8f       	std	Y+27, r26	; 0x1b
    2de4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de6:	69 8d       	ldd	r22, Y+25	; 0x19
    2de8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	4a e7       	ldi	r20, 0x7A	; 122
    2df4:	55 e4       	ldi	r21, 0x45	; 69
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	8d 8b       	std	Y+21, r24	; 0x15
    2e00:	9e 8b       	std	Y+22, r25	; 0x16
    2e02:	af 8b       	std	Y+23, r26	; 0x17
    2e04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e06:	6d 89       	ldd	r22, Y+21	; 0x15
    2e08:	7e 89       	ldd	r23, Y+22	; 0x16
    2e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e8       	ldi	r20, 0x80	; 128
    2e14:	5f e3       	ldi	r21, 0x3F	; 63
    2e16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e1a:	88 23       	and	r24, r24
    2e1c:	2c f4       	brge	.+10     	; 0x2e28 <H_LCD_void_latchByte+0x3a6>
		__ticks = 1;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	9c 8b       	std	Y+20, r25	; 0x14
    2e24:	8b 8b       	std	Y+19, r24	; 0x13
    2e26:	3f c0       	rjmp	.+126    	; 0x2ea6 <H_LCD_void_latchByte+0x424>
	else if (__tmp > 65535)
    2e28:	6d 89       	ldd	r22, Y+21	; 0x15
    2e2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	3f ef       	ldi	r19, 0xFF	; 255
    2e34:	4f e7       	ldi	r20, 0x7F	; 127
    2e36:	57 e4       	ldi	r21, 0x47	; 71
    2e38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e3c:	18 16       	cp	r1, r24
    2e3e:	4c f5       	brge	.+82     	; 0x2e92 <H_LCD_void_latchByte+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e40:	69 8d       	ldd	r22, Y+25	; 0x19
    2e42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e2       	ldi	r20, 0x20	; 32
    2e4e:	51 e4       	ldi	r21, 0x41	; 65
    2e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	9c 8b       	std	Y+20, r25	; 0x14
    2e66:	8b 8b       	std	Y+19, r24	; 0x13
    2e68:	0f c0       	rjmp	.+30     	; 0x2e88 <H_LCD_void_latchByte+0x406>
    2e6a:	80 e9       	ldi	r24, 0x90	; 144
    2e6c:	91 e0       	ldi	r25, 0x01	; 1
    2e6e:	9a 8b       	std	Y+18, r25	; 0x12
    2e70:	89 8b       	std	Y+17, r24	; 0x11
    2e72:	89 89       	ldd	r24, Y+17	; 0x11
    2e74:	9a 89       	ldd	r25, Y+18	; 0x12
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <H_LCD_void_latchByte+0x3f4>
    2e7a:	9a 8b       	std	Y+18, r25	; 0x12
    2e7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e80:	9c 89       	ldd	r25, Y+20	; 0x14
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	9c 8b       	std	Y+20, r25	; 0x14
    2e86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e88:	8b 89       	ldd	r24, Y+19	; 0x13
    2e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e8c:	00 97       	sbiw	r24, 0x00	; 0
    2e8e:	69 f7       	brne	.-38     	; 0x2e6a <H_LCD_void_latchByte+0x3e8>
    2e90:	14 c0       	rjmp	.+40     	; 0x2eba <H_LCD_void_latchByte+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e92:	6d 89       	ldd	r22, Y+21	; 0x15
    2e94:	7e 89       	ldd	r23, Y+22	; 0x16
    2e96:	8f 89       	ldd	r24, Y+23	; 0x17
    2e98:	98 8d       	ldd	r25, Y+24	; 0x18
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	9c 8b       	std	Y+20, r25	; 0x14
    2ea4:	8b 8b       	std	Y+19, r24	; 0x13
    2ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eaa:	98 8b       	std	Y+16, r25	; 0x10
    2eac:	8f 87       	std	Y+15, r24	; 0x0f
    2eae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eb0:	98 89       	ldd	r25, Y+16	; 0x10
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <H_LCD_void_latchByte+0x430>
    2eb6:	98 8b       	std	Y+16, r25	; 0x10
    2eb8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		// Reset Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	62 e0       	ldi	r22, 0x02	; 2
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_voidSetPinValue>
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	a0 ea       	ldi	r26, 0xA0	; 160
    2eca:	b0 e4       	ldi	r27, 0x40	; 64
    2ecc:	8b 87       	std	Y+11, r24	; 0x0b
    2ece:	9c 87       	std	Y+12, r25	; 0x0c
    2ed0:	ad 87       	std	Y+13, r26	; 0x0d
    2ed2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	4a e7       	ldi	r20, 0x7A	; 122
    2ee2:	55 e4       	ldi	r21, 0x45	; 69
    2ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	8f 83       	std	Y+7, r24	; 0x07
    2eee:	98 87       	std	Y+8, r25	; 0x08
    2ef0:	a9 87       	std	Y+9, r26	; 0x09
    2ef2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef6:	78 85       	ldd	r23, Y+8	; 0x08
    2ef8:	89 85       	ldd	r24, Y+9	; 0x09
    2efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e8       	ldi	r20, 0x80	; 128
    2f02:	5f e3       	ldi	r21, 0x3F	; 63
    2f04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f08:	88 23       	and	r24, r24
    2f0a:	2c f4       	brge	.+10     	; 0x2f16 <H_LCD_void_latchByte+0x494>
		__ticks = 1;
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	3f c0       	rjmp	.+126    	; 0x2f94 <H_LCD_void_latchByte+0x512>
	else if (__tmp > 65535)
    2f16:	6f 81       	ldd	r22, Y+7	; 0x07
    2f18:	78 85       	ldd	r23, Y+8	; 0x08
    2f1a:	89 85       	ldd	r24, Y+9	; 0x09
    2f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	3f ef       	ldi	r19, 0xFF	; 255
    2f22:	4f e7       	ldi	r20, 0x7F	; 127
    2f24:	57 e4       	ldi	r21, 0x47	; 71
    2f26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f2a:	18 16       	cp	r1, r24
    2f2c:	4c f5       	brge	.+82     	; 0x2f80 <H_LCD_void_latchByte+0x4fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e2       	ldi	r20, 0x20	; 32
    2f3c:	51 e4       	ldi	r21, 0x41	; 65
    2f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	9e 83       	std	Y+6, r25	; 0x06
    2f54:	8d 83       	std	Y+5, r24	; 0x05
    2f56:	0f c0       	rjmp	.+30     	; 0x2f76 <H_LCD_void_latchByte+0x4f4>
    2f58:	80 e9       	ldi	r24, 0x90	; 144
    2f5a:	91 e0       	ldi	r25, 0x01	; 1
    2f5c:	9c 83       	std	Y+4, r25	; 0x04
    2f5e:	8b 83       	std	Y+3, r24	; 0x03
    2f60:	8b 81       	ldd	r24, Y+3	; 0x03
    2f62:	9c 81       	ldd	r25, Y+4	; 0x04
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <H_LCD_void_latchByte+0x4e2>
    2f68:	9c 83       	std	Y+4, r25	; 0x04
    2f6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	9e 83       	std	Y+6, r25	; 0x06
    2f74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f76:	8d 81       	ldd	r24, Y+5	; 0x05
    2f78:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	69 f7       	brne	.-38     	; 0x2f58 <H_LCD_void_latchByte+0x4d6>
    2f7e:	14 c0       	rjmp	.+40     	; 0x2fa8 <H_LCD_void_latchByte+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f80:	6f 81       	ldd	r22, Y+7	; 0x07
    2f82:	78 85       	ldd	r23, Y+8	; 0x08
    2f84:	89 85       	ldd	r24, Y+9	; 0x09
    2f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	8d 83       	std	Y+5, r24	; 0x05
    2f94:	8d 81       	ldd	r24, Y+5	; 0x05
    2f96:	9e 81       	ldd	r25, Y+6	; 0x06
    2f98:	9a 83       	std	Y+2, r25	; 0x02
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <H_LCD_void_latchByte+0x51e>
    2fa4:	9a 83       	std	Y+2, r25	; 0x02
    2fa6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);

	#endif

}	
    2fa8:	c9 5b       	subi	r28, 0xB9	; 185
    2faa:	df 4f       	sbci	r29, 0xFF	; 255
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <main>:
 {0b00000000,0b00000000,0b00000000,0b000001100,0b00000010,0b00011111,0b00000000,0b00000000},
 {0b00000000,0b00000000,0b00000000,0b00000111,0b00000101,0b00011111,0b00000000,0b00000000}
};
/****************************************************************************/
int main()
{
    2fbc:	0f 93       	push	r16
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	66 97       	sbiw	r28, 0x16	; 22
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	cd bf       	out	0x3d, r28	; 61
	f32 ADC_Volatge;
	u16 ADC_DATA;
	/****************************************************************************/
	DIO_voidSetPinDirection(PORT_A,PIN_5,OUTPUT);
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	65 e0       	ldi	r22, 0x05	; 5
    2fd6:	41 e0       	ldi	r20, 0x01	; 1
    2fd8:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_A,PIN_4,INPUT);
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	64 e0       	ldi	r22, 0x04	; 4
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
    2fe2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DIO_voidSetPinDirection>

	H_LCD_void_Init();
    2fe6:	0e 94 15 11 	call	0x222a	; 0x222a <H_LCD_void_Init>
	MADC_Init(ADC_AVCC		                  ,
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	61 e0       	ldi	r22, 0x01	; 1
    2fee:	47 e0       	ldi	r20, 0x07	; 7
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	00 e0       	ldi	r16, 0x00	; 0
    2ff4:	0e 94 17 07 	call	0xe2e	; 0xe2e <MADC_Init>
			  ADC_FREE_RUNNING
			  );

	/****************************************************************************/
	// Create the custom Arabic Name at position k in CGRAM
	for(u8 k = 0; k<8 ;k++)
    2ff8:	18 8a       	std	Y+16, r1	; 0x10
    2ffa:	13 c0       	rjmp	.+38     	; 0x3022 <main+0x66>
	{
	     H_LCD_void_creatCustomChar(Arabic_Name[k], k);
    2ffc:	2a ec       	ldi	r18, 0xCA	; 202
    2ffe:	31 e0       	ldi	r19, 0x01	; 1
    3000:	88 89       	ldd	r24, Y+16	; 0x10
    3002:	88 2f       	mov	r24, r24
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	82 0f       	add	r24, r18
    3014:	93 1f       	adc	r25, r19
    3016:	68 89       	ldd	r22, Y+16	; 0x10
    3018:	0e 94 66 14 	call	0x28cc	; 0x28cc <H_LCD_void_creatCustomChar>
			  ADC_FREE_RUNNING
			  );

	/****************************************************************************/
	// Create the custom Arabic Name at position k in CGRAM
	for(u8 k = 0; k<8 ;k++)
    301c:	88 89       	ldd	r24, Y+16	; 0x10
    301e:	8f 5f       	subi	r24, 0xFF	; 255
    3020:	88 8b       	std	Y+16, r24	; 0x10
    3022:	88 89       	ldd	r24, Y+16	; 0x10
    3024:	88 30       	cpi	r24, 0x08	; 8
    3026:	50 f3       	brcs	.-44     	; 0x2ffc <main+0x40>
	{
	     H_LCD_void_creatCustomChar(Arabic_Name[k], k);
	}
	/****************************************************************************/

	H_LCD_void_sendString("  <<< ");
    3028:	80 e6       	ldi	r24, 0x60	; 96
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <H_LCD_void_sendString>

	for(u8 k = 0; k<8 ;k++)
    3030:	1f 86       	std	Y+15, r1	; 0x0f
    3032:	0c c0       	rjmp	.+24     	; 0x304c <main+0x90>
	{
		if(k == 4)
    3034:	8f 85       	ldd	r24, Y+15	; 0x0f
    3036:	84 30       	cpi	r24, 0x04	; 4
    3038:	19 f4       	brne	.+6      	; 0x3040 <main+0x84>
		{
			H_LCD_void_sendData(' ');
    303a:	80 e2       	ldi	r24, 0x20	; 32
    303c:	0e 94 57 12 	call	0x24ae	; 0x24ae <H_LCD_void_sendData>
		}
	    // Display the custom character
		H_LCD_void_displayCustomChar(k);
    3040:	8f 85       	ldd	r24, Y+15	; 0x0f
    3042:	0e 94 98 14 	call	0x2930	; 0x2930 <H_LCD_void_displayCustomChar>
	}
	/****************************************************************************/

	H_LCD_void_sendString("  <<< ");

	for(u8 k = 0; k<8 ;k++)
    3046:	8f 85       	ldd	r24, Y+15	; 0x0f
    3048:	8f 5f       	subi	r24, 0xFF	; 255
    304a:	8f 87       	std	Y+15, r24	; 0x0f
    304c:	8f 85       	ldd	r24, Y+15	; 0x0f
    304e:	88 30       	cpi	r24, 0x08	; 8
    3050:	88 f3       	brcs	.-30     	; 0x3034 <main+0x78>
		}
	    // Display the custom character
		H_LCD_void_displayCustomChar(k);
	}

	H_LCD_void_sendString(" >>>");
    3052:	87 e6       	ldi	r24, 0x67	; 103
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <H_LCD_void_sendString>

	/****************************************************************************/
	H_LCD_void_gotoXY(1,0);
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Testing ADC [ LDR ]");
    3062:	8c e6       	ldi	r24, 0x6C	; 108
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2,0);
    306a:	82 e0       	ldi	r24, 0x02	; 2
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("VREF = 2V");
    3072:	80 e8       	ldi	r24, 0x80	; 128
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <H_LCD_void_sendString>
	H_LCD_void_gotoXY(3,0);
    307a:	83 e0       	ldi	r24, 0x03	; 3
    307c:	60 e0       	ldi	r22, 0x00	; 0
    307e:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("DIG:");
    3082:	8a e8       	ldi	r24, 0x8A	; 138
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <H_LCD_void_sendString>
	H_LCD_void_gotoXY(3,9);
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	69 e0       	ldi	r22, 0x09	; 9
    308e:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Analog:");
    3092:	8f e8       	ldi	r24, 0x8F	; 143
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <H_LCD_void_sendString>
	while(1)
	{
		MADC_getDigitalValueSynchNonBlocking(ADC_CHANNEL_4,&ADC_DATA);
    309a:	9e 01       	movw	r18, r28
    309c:	2b 5e       	subi	r18, 0xEB	; 235
    309e:	3f 4f       	sbci	r19, 0xFF	; 255
    30a0:	84 e0       	ldi	r24, 0x04	; 4
    30a2:	b9 01       	movw	r22, r18
    30a4:	0e 94 b1 07 	call	0xf62	; 0xf62 <MADC_getDigitalValueSynchNonBlocking>
		ADC_Volatge = ((f32)ADC_DATA / 1023.0) * 2.0 ;
    30a8:	8d 89       	ldd	r24, Y+21	; 0x15
    30aa:	9e 89       	ldd	r25, Y+22	; 0x16
    30ac:	cc 01       	movw	r24, r24
    30ae:	a0 e0       	ldi	r26, 0x00	; 0
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	bc 01       	movw	r22, r24
    30b4:	cd 01       	movw	r24, r26
    30b6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	bc 01       	movw	r22, r24
    30c0:	cd 01       	movw	r24, r26
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 ec       	ldi	r19, 0xC0	; 192
    30c6:	4f e7       	ldi	r20, 0x7F	; 127
    30c8:	54 e4       	ldi	r21, 0x44	; 68
    30ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9c 01       	movw	r18, r24
    30d4:	ad 01       	movw	r20, r26
    30d6:	ca 01       	movw	r24, r20
    30d8:	b9 01       	movw	r22, r18
    30da:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	89 8b       	std	Y+17, r24	; 0x11
    30e4:	9a 8b       	std	Y+18, r25	; 0x12
    30e6:	ab 8b       	std	Y+19, r26	; 0x13
    30e8:	bc 8b       	std	Y+20, r27	; 0x14
		H_LCD_void_gotoXY(3,4);
    30ea:	83 e0       	ldi	r24, 0x03	; 3
    30ec:	64 e0       	ldi	r22, 0x04	; 4
    30ee:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
		H_LCD_void_sendIntNum(ADC_DATA);
    30f2:	8d 89       	ldd	r24, Y+21	; 0x15
    30f4:	9e 89       	ldd	r25, Y+22	; 0x16
    30f6:	cc 01       	movw	r24, r24
    30f8:	a0 e0       	ldi	r26, 0x00	; 0
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	bc 01       	movw	r22, r24
    30fe:	cd 01       	movw	r24, r26
    3100:	0e 94 d7 13 	call	0x27ae	; 0x27ae <H_LCD_void_sendIntNum>
		H_LCD_void_gotoXY(3,16);
    3104:	83 e0       	ldi	r24, 0x03	; 3
    3106:	60 e1       	ldi	r22, 0x10	; 16
    3108:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
		H_LCD_void_sendFloat(ADC_Volatge,2);
    310c:	89 89       	ldd	r24, Y+17	; 0x11
    310e:	9a 89       	ldd	r25, Y+18	; 0x12
    3110:	ab 89       	ldd	r26, Y+19	; 0x13
    3112:	bc 89       	ldd	r27, Y+20	; 0x14
    3114:	bc 01       	movw	r22, r24
    3116:	cd 01       	movw	r24, r26
    3118:	42 e0       	ldi	r20, 0x02	; 2
    311a:	0e 94 a5 14 	call	0x294a	; 0x294a <H_LCD_void_sendFloat>

		if(ADC_DATA > 600)
    311e:	8d 89       	ldd	r24, Y+21	; 0x15
    3120:	9e 89       	ldd	r25, Y+22	; 0x16
    3122:	22 e0       	ldi	r18, 0x02	; 2
    3124:	89 35       	cpi	r24, 0x59	; 89
    3126:	92 07       	cpc	r25, r18
    3128:	70 f0       	brcs	.+28     	; 0x3146 <main+0x18a>
		{
			DIO_voidSetPinValue(PORT_A,PIN_5,HIGH);
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	65 e0       	ldi	r22, 0x05	; 5
    312e:	41 e0       	ldi	r20, 0x01	; 1
    3130:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_voidSetPinValue>
			H_LCD_void_gotoXY(2,12);
    3134:	82 e0       	ldi	r24, 0x02	; 2
    3136:	6c e0       	ldi	r22, 0x0C	; 12
    3138:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("LED ON ");
    313c:	87 e9       	ldi	r24, 0x97	; 151
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <H_LCD_void_sendString>
    3144:	13 c0       	rjmp	.+38     	; 0x316c <main+0x1b0>
		}
		else if(ADC_DATA < 600)
    3146:	8d 89       	ldd	r24, Y+21	; 0x15
    3148:	9e 89       	ldd	r25, Y+22	; 0x16
    314a:	22 e0       	ldi	r18, 0x02	; 2
    314c:	88 35       	cpi	r24, 0x58	; 88
    314e:	92 07       	cpc	r25, r18
    3150:	68 f4       	brcc	.+26     	; 0x316c <main+0x1b0>
		{
			DIO_voidSetPinValue(PORT_A,PIN_5,LOW);
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	65 e0       	ldi	r22, 0x05	; 5
    3156:	40 e0       	ldi	r20, 0x00	; 0
    3158:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_voidSetPinValue>
			H_LCD_void_gotoXY(2,12);
    315c:	82 e0       	ldi	r24, 0x02	; 2
    315e:	6c e0       	ldi	r22, 0x0C	; 12
    3160:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("LED OFF");
    3164:	8f e9       	ldi	r24, 0x9F	; 159
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <H_LCD_void_sendString>
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	a8 e4       	ldi	r26, 0x48	; 72
    3172:	b4 e4       	ldi	r27, 0x44	; 68
    3174:	8b 87       	std	Y+11, r24	; 0x0b
    3176:	9c 87       	std	Y+12, r25	; 0x0c
    3178:	ad 87       	std	Y+13, r26	; 0x0d
    317a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317c:	6b 85       	ldd	r22, Y+11	; 0x0b
    317e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3180:	8d 85       	ldd	r24, Y+13	; 0x0d
    3182:	9e 85       	ldd	r25, Y+14	; 0x0e
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	4a e7       	ldi	r20, 0x7A	; 122
    318a:	55 e4       	ldi	r21, 0x45	; 69
    318c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	8f 83       	std	Y+7, r24	; 0x07
    3196:	98 87       	std	Y+8, r25	; 0x08
    3198:	a9 87       	std	Y+9, r26	; 0x09
    319a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    319c:	6f 81       	ldd	r22, Y+7	; 0x07
    319e:	78 85       	ldd	r23, Y+8	; 0x08
    31a0:	89 85       	ldd	r24, Y+9	; 0x09
    31a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e8       	ldi	r20, 0x80	; 128
    31aa:	5f e3       	ldi	r21, 0x3F	; 63
    31ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b0:	88 23       	and	r24, r24
    31b2:	2c f4       	brge	.+10     	; 0x31be <main+0x202>
		__ticks = 1;
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	9e 83       	std	Y+6, r25	; 0x06
    31ba:	8d 83       	std	Y+5, r24	; 0x05
    31bc:	3f c0       	rjmp	.+126    	; 0x323c <main+0x280>
	else if (__tmp > 65535)
    31be:	6f 81       	ldd	r22, Y+7	; 0x07
    31c0:	78 85       	ldd	r23, Y+8	; 0x08
    31c2:	89 85       	ldd	r24, Y+9	; 0x09
    31c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	3f ef       	ldi	r19, 0xFF	; 255
    31ca:	4f e7       	ldi	r20, 0x7F	; 127
    31cc:	57 e4       	ldi	r21, 0x47	; 71
    31ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d2:	18 16       	cp	r1, r24
    31d4:	4c f5       	brge	.+82     	; 0x3228 <main+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31da:	8d 85       	ldd	r24, Y+13	; 0x0d
    31dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e2       	ldi	r20, 0x20	; 32
    31e4:	51 e4       	ldi	r21, 0x41	; 65
    31e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	9e 83       	std	Y+6, r25	; 0x06
    31fc:	8d 83       	std	Y+5, r24	; 0x05
    31fe:	0f c0       	rjmp	.+30     	; 0x321e <main+0x262>
    3200:	80 e9       	ldi	r24, 0x90	; 144
    3202:	91 e0       	ldi	r25, 0x01	; 1
    3204:	9c 83       	std	Y+4, r25	; 0x04
    3206:	8b 83       	std	Y+3, r24	; 0x03
    3208:	8b 81       	ldd	r24, Y+3	; 0x03
    320a:	9c 81       	ldd	r25, Y+4	; 0x04
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <main+0x250>
    3210:	9c 83       	std	Y+4, r25	; 0x04
    3212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	9e 83       	std	Y+6, r25	; 0x06
    321c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321e:	8d 81       	ldd	r24, Y+5	; 0x05
    3220:	9e 81       	ldd	r25, Y+6	; 0x06
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	69 f7       	brne	.-38     	; 0x3200 <main+0x244>
    3226:	14 c0       	rjmp	.+40     	; 0x3250 <main+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3228:	6f 81       	ldd	r22, Y+7	; 0x07
    322a:	78 85       	ldd	r23, Y+8	; 0x08
    322c:	89 85       	ldd	r24, Y+9	; 0x09
    322e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	9e 83       	std	Y+6, r25	; 0x06
    323a:	8d 83       	std	Y+5, r24	; 0x05
    323c:	8d 81       	ldd	r24, Y+5	; 0x05
    323e:	9e 81       	ldd	r25, Y+6	; 0x06
    3240:	9a 83       	std	Y+2, r25	; 0x02
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	89 81       	ldd	r24, Y+1	; 0x01
    3246:	9a 81       	ldd	r25, Y+2	; 0x02
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <main+0x28c>
    324c:	9a 83       	std	Y+2, r25	; 0x02
    324e:	89 83       	std	Y+1, r24	; 0x01

		}

		_delay_ms(800);
		H_LCD_void_gotoXY(3,4);
    3250:	83 e0       	ldi	r24, 0x03	; 3
    3252:	64 e0       	ldi	r22, 0x04	; 4
    3254:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("    ");
    3258:	87 ea       	ldi	r24, 0xA7	; 167
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <H_LCD_void_sendString>
		H_LCD_void_gotoXY(3,16);
    3260:	83 e0       	ldi	r24, 0x03	; 3
    3262:	60 e1       	ldi	r22, 0x10	; 16
    3264:	0e 94 b0 13 	call	0x2760	; 0x2760 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("    ");
    3268:	87 ea       	ldi	r24, 0xA7	; 167
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <H_LCD_void_sendString>
    3270:	14 cf       	rjmp	.-472    	; 0x309a <main+0xde>

00003272 <__udivmodqi4>:
    3272:	99 1b       	sub	r25, r25
    3274:	79 e0       	ldi	r23, 0x09	; 9
    3276:	04 c0       	rjmp	.+8      	; 0x3280 <__udivmodqi4_ep>

00003278 <__udivmodqi4_loop>:
    3278:	99 1f       	adc	r25, r25
    327a:	96 17       	cp	r25, r22
    327c:	08 f0       	brcs	.+2      	; 0x3280 <__udivmodqi4_ep>
    327e:	96 1b       	sub	r25, r22

00003280 <__udivmodqi4_ep>:
    3280:	88 1f       	adc	r24, r24
    3282:	7a 95       	dec	r23
    3284:	c9 f7       	brne	.-14     	; 0x3278 <__udivmodqi4_loop>
    3286:	80 95       	com	r24
    3288:	08 95       	ret

0000328a <__divmodsi4>:
    328a:	97 fb       	bst	r25, 7
    328c:	09 2e       	mov	r0, r25
    328e:	05 26       	eor	r0, r21
    3290:	0e d0       	rcall	.+28     	; 0x32ae <__divmodsi4_neg1>
    3292:	57 fd       	sbrc	r21, 7
    3294:	04 d0       	rcall	.+8      	; 0x329e <__divmodsi4_neg2>
    3296:	14 d0       	rcall	.+40     	; 0x32c0 <__udivmodsi4>
    3298:	0a d0       	rcall	.+20     	; 0x32ae <__divmodsi4_neg1>
    329a:	00 1c       	adc	r0, r0
    329c:	38 f4       	brcc	.+14     	; 0x32ac <__divmodsi4_exit>

0000329e <__divmodsi4_neg2>:
    329e:	50 95       	com	r21
    32a0:	40 95       	com	r20
    32a2:	30 95       	com	r19
    32a4:	21 95       	neg	r18
    32a6:	3f 4f       	sbci	r19, 0xFF	; 255
    32a8:	4f 4f       	sbci	r20, 0xFF	; 255
    32aa:	5f 4f       	sbci	r21, 0xFF	; 255

000032ac <__divmodsi4_exit>:
    32ac:	08 95       	ret

000032ae <__divmodsi4_neg1>:
    32ae:	f6 f7       	brtc	.-4      	; 0x32ac <__divmodsi4_exit>
    32b0:	90 95       	com	r25
    32b2:	80 95       	com	r24
    32b4:	70 95       	com	r23
    32b6:	61 95       	neg	r22
    32b8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ba:	8f 4f       	sbci	r24, 0xFF	; 255
    32bc:	9f 4f       	sbci	r25, 0xFF	; 255
    32be:	08 95       	ret

000032c0 <__udivmodsi4>:
    32c0:	a1 e2       	ldi	r26, 0x21	; 33
    32c2:	1a 2e       	mov	r1, r26
    32c4:	aa 1b       	sub	r26, r26
    32c6:	bb 1b       	sub	r27, r27
    32c8:	fd 01       	movw	r30, r26
    32ca:	0d c0       	rjmp	.+26     	; 0x32e6 <__udivmodsi4_ep>

000032cc <__udivmodsi4_loop>:
    32cc:	aa 1f       	adc	r26, r26
    32ce:	bb 1f       	adc	r27, r27
    32d0:	ee 1f       	adc	r30, r30
    32d2:	ff 1f       	adc	r31, r31
    32d4:	a2 17       	cp	r26, r18
    32d6:	b3 07       	cpc	r27, r19
    32d8:	e4 07       	cpc	r30, r20
    32da:	f5 07       	cpc	r31, r21
    32dc:	20 f0       	brcs	.+8      	; 0x32e6 <__udivmodsi4_ep>
    32de:	a2 1b       	sub	r26, r18
    32e0:	b3 0b       	sbc	r27, r19
    32e2:	e4 0b       	sbc	r30, r20
    32e4:	f5 0b       	sbc	r31, r21

000032e6 <__udivmodsi4_ep>:
    32e6:	66 1f       	adc	r22, r22
    32e8:	77 1f       	adc	r23, r23
    32ea:	88 1f       	adc	r24, r24
    32ec:	99 1f       	adc	r25, r25
    32ee:	1a 94       	dec	r1
    32f0:	69 f7       	brne	.-38     	; 0x32cc <__udivmodsi4_loop>
    32f2:	60 95       	com	r22
    32f4:	70 95       	com	r23
    32f6:	80 95       	com	r24
    32f8:	90 95       	com	r25
    32fa:	9b 01       	movw	r18, r22
    32fc:	ac 01       	movw	r20, r24
    32fe:	bd 01       	movw	r22, r26
    3300:	cf 01       	movw	r24, r30
    3302:	08 95       	ret

00003304 <__prologue_saves__>:
    3304:	2f 92       	push	r2
    3306:	3f 92       	push	r3
    3308:	4f 92       	push	r4
    330a:	5f 92       	push	r5
    330c:	6f 92       	push	r6
    330e:	7f 92       	push	r7
    3310:	8f 92       	push	r8
    3312:	9f 92       	push	r9
    3314:	af 92       	push	r10
    3316:	bf 92       	push	r11
    3318:	cf 92       	push	r12
    331a:	df 92       	push	r13
    331c:	ef 92       	push	r14
    331e:	ff 92       	push	r15
    3320:	0f 93       	push	r16
    3322:	1f 93       	push	r17
    3324:	cf 93       	push	r28
    3326:	df 93       	push	r29
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	ca 1b       	sub	r28, r26
    332e:	db 0b       	sbc	r29, r27
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	f8 94       	cli
    3334:	de bf       	out	0x3e, r29	; 62
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	cd bf       	out	0x3d, r28	; 61
    333a:	09 94       	ijmp

0000333c <__epilogue_restores__>:
    333c:	2a 88       	ldd	r2, Y+18	; 0x12
    333e:	39 88       	ldd	r3, Y+17	; 0x11
    3340:	48 88       	ldd	r4, Y+16	; 0x10
    3342:	5f 84       	ldd	r5, Y+15	; 0x0f
    3344:	6e 84       	ldd	r6, Y+14	; 0x0e
    3346:	7d 84       	ldd	r7, Y+13	; 0x0d
    3348:	8c 84       	ldd	r8, Y+12	; 0x0c
    334a:	9b 84       	ldd	r9, Y+11	; 0x0b
    334c:	aa 84       	ldd	r10, Y+10	; 0x0a
    334e:	b9 84       	ldd	r11, Y+9	; 0x09
    3350:	c8 84       	ldd	r12, Y+8	; 0x08
    3352:	df 80       	ldd	r13, Y+7	; 0x07
    3354:	ee 80       	ldd	r14, Y+6	; 0x06
    3356:	fd 80       	ldd	r15, Y+5	; 0x05
    3358:	0c 81       	ldd	r16, Y+4	; 0x04
    335a:	1b 81       	ldd	r17, Y+3	; 0x03
    335c:	aa 81       	ldd	r26, Y+2	; 0x02
    335e:	b9 81       	ldd	r27, Y+1	; 0x01
    3360:	ce 0f       	add	r28, r30
    3362:	d1 1d       	adc	r29, r1
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
    336e:	ed 01       	movw	r28, r26
    3370:	08 95       	ret

00003372 <_exit>:
    3372:	f8 94       	cli

00003374 <__stop_program>:
    3374:	ff cf       	rjmp	.-2      	; 0x3374 <__stop_program>
