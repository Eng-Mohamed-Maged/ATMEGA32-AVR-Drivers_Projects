
NTI_LCD_AVR_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000280c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  0000280c  00002880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000019d4  00000000  00000000  000028b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000101a  00000000  00000000  00004284  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000529e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000053de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000554e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007197  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008082  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000921d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000099eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6f 13 	call	0x26de	; 0x26de <main>
      7a:	0c 94 04 14 	jmp	0x2808	; 0x2808 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e6       	ldi	r26, 0x6E	; 110
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e6       	ldi	r24, 0x6E	; 110
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidSetPinDirection>:
#include "../inc/DIO_config.h"
#include "../inc/DIO_interface.h"
#include "../inc/DIO_private.h"

void DIO_voidSetPinDirection(PORT_t Copy_PortId,PIN_t Copy_PinId,DIRECTION_t Copy_Direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2d 97       	sbiw	r28, 0x0d	; 13
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_PortId)
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	3d 87       	std	Y+13, r19	; 0x0d
     b58:	2c 87       	std	Y+12, r18	; 0x0c
     b5a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b5c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	91 05       	cpc	r25, r1
     b62:	09 f4       	brne	.+2      	; 0xb66 <DIO_voidSetPinDirection+0x30>
     b64:	b8 c0       	rjmp	.+368    	; 0xcd6 <DIO_voidSetPinDirection+0x1a0>
     b66:	2c 85       	ldd	r18, Y+12	; 0x0c
     b68:	3d 85       	ldd	r19, Y+13	; 0x0d
     b6a:	22 30       	cpi	r18, 0x02	; 2
     b6c:	31 05       	cpc	r19, r1
     b6e:	2c f4       	brge	.+10     	; 0xb7a <DIO_voidSetPinDirection+0x44>
     b70:	8c 85       	ldd	r24, Y+12	; 0x0c
     b72:	9d 85       	ldd	r25, Y+13	; 0x0d
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	71 f0       	breq	.+28     	; 0xb94 <DIO_voidSetPinDirection+0x5e>
     b78:	90 c2       	rjmp	.+1312   	; 0x109a <DIO_voidSetPinDirection+0x564>
     b7a:	2c 85       	ldd	r18, Y+12	; 0x0c
     b7c:	3d 85       	ldd	r19, Y+13	; 0x0d
     b7e:	22 30       	cpi	r18, 0x02	; 2
     b80:	31 05       	cpc	r19, r1
     b82:	09 f4       	brne	.+2      	; 0xb86 <DIO_voidSetPinDirection+0x50>
     b84:	49 c1       	rjmp	.+658    	; 0xe18 <DIO_voidSetPinDirection+0x2e2>
     b86:	8c 85       	ldd	r24, Y+12	; 0x0c
     b88:	9d 85       	ldd	r25, Y+13	; 0x0d
     b8a:	83 30       	cpi	r24, 0x03	; 3
     b8c:	91 05       	cpc	r25, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_voidSetPinDirection+0x5c>
     b90:	e4 c1       	rjmp	.+968    	; 0xf5a <DIO_voidSetPinDirection+0x424>
     b92:	83 c2       	rjmp	.+1286   	; 0x109a <DIO_voidSetPinDirection+0x564>
	{
		case PORT_A:
			switch(Copy_PinId)
     b94:	8a 81       	ldd	r24, Y+2	; 0x02
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3b 87       	std	Y+11, r19	; 0x0b
     b9c:	2a 87       	std	Y+10, r18	; 0x0a
     b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <DIO_voidSetPinDirection+0x74>
     ba8:	51 c0       	rjmp	.+162    	; 0xc4c <DIO_voidSetPinDirection+0x116>
     baa:	2a 85       	ldd	r18, Y+10	; 0x0a
     bac:	3b 85       	ldd	r19, Y+11	; 0x0b
     bae:	24 30       	cpi	r18, 0x04	; 4
     bb0:	31 05       	cpc	r19, r1
     bb2:	7c f4       	brge	.+30     	; 0xbd2 <DIO_voidSetPinDirection+0x9c>
     bb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     bb6:	9b 85       	ldd	r25, Y+11	; 0x0b
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	91 05       	cpc	r25, r1
     bbc:	71 f1       	breq	.+92     	; 0xc1a <DIO_voidSetPinDirection+0xe4>
     bbe:	2a 85       	ldd	r18, Y+10	; 0x0a
     bc0:	3b 85       	ldd	r19, Y+11	; 0x0b
     bc2:	22 30       	cpi	r18, 0x02	; 2
     bc4:	31 05       	cpc	r19, r1
     bc6:	ac f5       	brge	.+106    	; 0xc32 <DIO_voidSetPinDirection+0xfc>
     bc8:	8a 85       	ldd	r24, Y+10	; 0x0a
     bca:	9b 85       	ldd	r25, Y+11	; 0x0b
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	d1 f0       	breq	.+52     	; 0xc04 <DIO_voidSetPinDirection+0xce>
     bd0:	64 c2       	rjmp	.+1224   	; 0x109a <DIO_voidSetPinDirection+0x564>
     bd2:	2a 85       	ldd	r18, Y+10	; 0x0a
     bd4:	3b 85       	ldd	r19, Y+11	; 0x0b
     bd6:	25 30       	cpi	r18, 0x05	; 5
     bd8:	31 05       	cpc	r19, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <DIO_voidSetPinDirection+0xa8>
     bdc:	52 c0       	rjmp	.+164    	; 0xc82 <DIO_voidSetPinDirection+0x14c>
     bde:	8a 85       	ldd	r24, Y+10	; 0x0a
     be0:	9b 85       	ldd	r25, Y+11	; 0x0b
     be2:	85 30       	cpi	r24, 0x05	; 5
     be4:	91 05       	cpc	r25, r1
     be6:	0c f4       	brge	.+2      	; 0xbea <DIO_voidSetPinDirection+0xb4>
     be8:	3f c0       	rjmp	.+126    	; 0xc68 <DIO_voidSetPinDirection+0x132>
     bea:	2a 85       	ldd	r18, Y+10	; 0x0a
     bec:	3b 85       	ldd	r19, Y+11	; 0x0b
     bee:	26 30       	cpi	r18, 0x06	; 6
     bf0:	31 05       	cpc	r19, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <DIO_voidSetPinDirection+0xc0>
     bf4:	54 c0       	rjmp	.+168    	; 0xc9e <DIO_voidSetPinDirection+0x168>
     bf6:	8a 85       	ldd	r24, Y+10	; 0x0a
     bf8:	9b 85       	ldd	r25, Y+11	; 0x0b
     bfa:	87 30       	cpi	r24, 0x07	; 7
     bfc:	91 05       	cpc	r25, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <DIO_voidSetPinDirection+0xcc>
     c00:	5d c0       	rjmp	.+186    	; 0xcbc <DIO_voidSetPinDirection+0x186>
     c02:	4b c2       	rjmp	.+1174   	; 0x109a <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRA.Bit.B0 = Copy_Direction;
     c04:	e0 e3       	ldi	r30, 0x30	; 48
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	81 70       	andi	r24, 0x01	; 1
     c0c:	98 2f       	mov	r25, r24
     c0e:	91 70       	andi	r25, 0x01	; 1
     c10:	82 85       	ldd	r24, Z+10	; 0x0a
     c12:	8e 7f       	andi	r24, 0xFE	; 254
     c14:	89 2b       	or	r24, r25
     c16:	82 87       	std	Z+10, r24	; 0x0a
     c18:	40 c2       	rjmp	.+1152   	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRA.Bit.B1 = Copy_Direction;
     c1a:	e0 e3       	ldi	r30, 0x30	; 48
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	81 70       	andi	r24, 0x01	; 1
     c22:	81 70       	andi	r24, 0x01	; 1
     c24:	98 2f       	mov	r25, r24
     c26:	99 0f       	add	r25, r25
     c28:	82 85       	ldd	r24, Z+10	; 0x0a
     c2a:	8d 7f       	andi	r24, 0xFD	; 253
     c2c:	89 2b       	or	r24, r25
     c2e:	82 87       	std	Z+10, r24	; 0x0a
     c30:	34 c2       	rjmp	.+1128   	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRA.Bit.B2 = Copy_Direction;
     c32:	e0 e3       	ldi	r30, 0x30	; 48
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	81 70       	andi	r24, 0x01	; 1
     c3a:	81 70       	andi	r24, 0x01	; 1
     c3c:	98 2f       	mov	r25, r24
     c3e:	99 0f       	add	r25, r25
     c40:	99 0f       	add	r25, r25
     c42:	82 85       	ldd	r24, Z+10	; 0x0a
     c44:	8b 7f       	andi	r24, 0xFB	; 251
     c46:	89 2b       	or	r24, r25
     c48:	82 87       	std	Z+10, r24	; 0x0a
     c4a:	27 c2       	rjmp	.+1102   	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRA.Bit.B3 = Copy_Direction;
     c4c:	e0 e3       	ldi	r30, 0x30	; 48
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 70       	andi	r24, 0x01	; 1
     c54:	81 70       	andi	r24, 0x01	; 1
     c56:	98 2f       	mov	r25, r24
     c58:	99 0f       	add	r25, r25
     c5a:	99 0f       	add	r25, r25
     c5c:	99 0f       	add	r25, r25
     c5e:	82 85       	ldd	r24, Z+10	; 0x0a
     c60:	87 7f       	andi	r24, 0xF7	; 247
     c62:	89 2b       	or	r24, r25
     c64:	82 87       	std	Z+10, r24	; 0x0a
     c66:	19 c2       	rjmp	.+1074   	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRA.Bit.B4 = Copy_Direction;
     c68:	e0 e3       	ldi	r30, 0x30	; 48
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	81 70       	andi	r24, 0x01	; 1
     c70:	81 70       	andi	r24, 0x01	; 1
     c72:	98 2f       	mov	r25, r24
     c74:	92 95       	swap	r25
     c76:	90 7f       	andi	r25, 0xF0	; 240
     c78:	82 85       	ldd	r24, Z+10	; 0x0a
     c7a:	8f 7e       	andi	r24, 0xEF	; 239
     c7c:	89 2b       	or	r24, r25
     c7e:	82 87       	std	Z+10, r24	; 0x0a
     c80:	0c c2       	rjmp	.+1048   	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRA.Bit.B5 = Copy_Direction;
     c82:	e0 e3       	ldi	r30, 0x30	; 48
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	81 70       	andi	r24, 0x01	; 1
     c8a:	81 70       	andi	r24, 0x01	; 1
     c8c:	98 2f       	mov	r25, r24
     c8e:	92 95       	swap	r25
     c90:	99 0f       	add	r25, r25
     c92:	90 7e       	andi	r25, 0xE0	; 224
     c94:	82 85       	ldd	r24, Z+10	; 0x0a
     c96:	8f 7d       	andi	r24, 0xDF	; 223
     c98:	89 2b       	or	r24, r25
     c9a:	82 87       	std	Z+10, r24	; 0x0a
     c9c:	fe c1       	rjmp	.+1020   	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRA.Bit.B6 = Copy_Direction;
     c9e:	e0 e3       	ldi	r30, 0x30	; 48
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	81 70       	andi	r24, 0x01	; 1
     ca6:	81 70       	andi	r24, 0x01	; 1
     ca8:	98 2f       	mov	r25, r24
     caa:	92 95       	swap	r25
     cac:	99 0f       	add	r25, r25
     cae:	99 0f       	add	r25, r25
     cb0:	90 7c       	andi	r25, 0xC0	; 192
     cb2:	82 85       	ldd	r24, Z+10	; 0x0a
     cb4:	8f 7b       	andi	r24, 0xBF	; 191
     cb6:	89 2b       	or	r24, r25
     cb8:	82 87       	std	Z+10, r24	; 0x0a
     cba:	ef c1       	rjmp	.+990    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRA.Bit.B7 = Copy_Direction;
     cbc:	e0 e3       	ldi	r30, 0x30	; 48
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	81 70       	andi	r24, 0x01	; 1
     cc4:	98 2f       	mov	r25, r24
     cc6:	97 95       	ror	r25
     cc8:	99 27       	eor	r25, r25
     cca:	97 95       	ror	r25
     ccc:	82 85       	ldd	r24, Z+10	; 0x0a
     cce:	8f 77       	andi	r24, 0x7F	; 127
     cd0:	89 2b       	or	r24, r25
     cd2:	82 87       	std	Z+10, r24	; 0x0a
     cd4:	e2 c1       	rjmp	.+964    	; 0x109a <DIO_voidSetPinDirection+0x564>
				default: break;
			}
			break;

		case PORT_B:
			switch(Copy_PinId)
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	39 87       	std	Y+9, r19	; 0x09
     cde:	28 87       	std	Y+8, r18	; 0x08
     ce0:	88 85       	ldd	r24, Y+8	; 0x08
     ce2:	99 85       	ldd	r25, Y+9	; 0x09
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	91 05       	cpc	r25, r1
     ce8:	09 f4       	brne	.+2      	; 0xcec <DIO_voidSetPinDirection+0x1b6>
     cea:	51 c0       	rjmp	.+162    	; 0xd8e <DIO_voidSetPinDirection+0x258>
     cec:	28 85       	ldd	r18, Y+8	; 0x08
     cee:	39 85       	ldd	r19, Y+9	; 0x09
     cf0:	24 30       	cpi	r18, 0x04	; 4
     cf2:	31 05       	cpc	r19, r1
     cf4:	7c f4       	brge	.+30     	; 0xd14 <DIO_voidSetPinDirection+0x1de>
     cf6:	88 85       	ldd	r24, Y+8	; 0x08
     cf8:	99 85       	ldd	r25, Y+9	; 0x09
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	91 05       	cpc	r25, r1
     cfe:	71 f1       	breq	.+92     	; 0xd5c <DIO_voidSetPinDirection+0x226>
     d00:	28 85       	ldd	r18, Y+8	; 0x08
     d02:	39 85       	ldd	r19, Y+9	; 0x09
     d04:	22 30       	cpi	r18, 0x02	; 2
     d06:	31 05       	cpc	r19, r1
     d08:	ac f5       	brge	.+106    	; 0xd74 <DIO_voidSetPinDirection+0x23e>
     d0a:	88 85       	ldd	r24, Y+8	; 0x08
     d0c:	99 85       	ldd	r25, Y+9	; 0x09
     d0e:	00 97       	sbiw	r24, 0x00	; 0
     d10:	d1 f0       	breq	.+52     	; 0xd46 <DIO_voidSetPinDirection+0x210>
     d12:	c3 c1       	rjmp	.+902    	; 0x109a <DIO_voidSetPinDirection+0x564>
     d14:	28 85       	ldd	r18, Y+8	; 0x08
     d16:	39 85       	ldd	r19, Y+9	; 0x09
     d18:	25 30       	cpi	r18, 0x05	; 5
     d1a:	31 05       	cpc	r19, r1
     d1c:	09 f4       	brne	.+2      	; 0xd20 <DIO_voidSetPinDirection+0x1ea>
     d1e:	52 c0       	rjmp	.+164    	; 0xdc4 <DIO_voidSetPinDirection+0x28e>
     d20:	88 85       	ldd	r24, Y+8	; 0x08
     d22:	99 85       	ldd	r25, Y+9	; 0x09
     d24:	85 30       	cpi	r24, 0x05	; 5
     d26:	91 05       	cpc	r25, r1
     d28:	0c f4       	brge	.+2      	; 0xd2c <DIO_voidSetPinDirection+0x1f6>
     d2a:	3f c0       	rjmp	.+126    	; 0xdaa <DIO_voidSetPinDirection+0x274>
     d2c:	28 85       	ldd	r18, Y+8	; 0x08
     d2e:	39 85       	ldd	r19, Y+9	; 0x09
     d30:	26 30       	cpi	r18, 0x06	; 6
     d32:	31 05       	cpc	r19, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_voidSetPinDirection+0x202>
     d36:	54 c0       	rjmp	.+168    	; 0xde0 <DIO_voidSetPinDirection+0x2aa>
     d38:	88 85       	ldd	r24, Y+8	; 0x08
     d3a:	99 85       	ldd	r25, Y+9	; 0x09
     d3c:	87 30       	cpi	r24, 0x07	; 7
     d3e:	91 05       	cpc	r25, r1
     d40:	09 f4       	brne	.+2      	; 0xd44 <DIO_voidSetPinDirection+0x20e>
     d42:	5d c0       	rjmp	.+186    	; 0xdfe <DIO_voidSetPinDirection+0x2c8>
     d44:	aa c1       	rjmp	.+852    	; 0x109a <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRB.Bit.B0 = Copy_Direction;
     d46:	e0 e3       	ldi	r30, 0x30	; 48
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	81 70       	andi	r24, 0x01	; 1
     d4e:	98 2f       	mov	r25, r24
     d50:	91 70       	andi	r25, 0x01	; 1
     d52:	87 81       	ldd	r24, Z+7	; 0x07
     d54:	8e 7f       	andi	r24, 0xFE	; 254
     d56:	89 2b       	or	r24, r25
     d58:	87 83       	std	Z+7, r24	; 0x07
     d5a:	9f c1       	rjmp	.+830    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRB.Bit.B1 = Copy_Direction;
     d5c:	e0 e3       	ldi	r30, 0x30	; 48
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 70       	andi	r24, 0x01	; 1
     d64:	81 70       	andi	r24, 0x01	; 1
     d66:	98 2f       	mov	r25, r24
     d68:	99 0f       	add	r25, r25
     d6a:	87 81       	ldd	r24, Z+7	; 0x07
     d6c:	8d 7f       	andi	r24, 0xFD	; 253
     d6e:	89 2b       	or	r24, r25
     d70:	87 83       	std	Z+7, r24	; 0x07
     d72:	93 c1       	rjmp	.+806    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRB.Bit.B2 = Copy_Direction;
     d74:	e0 e3       	ldi	r30, 0x30	; 48
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	81 70       	andi	r24, 0x01	; 1
     d7c:	81 70       	andi	r24, 0x01	; 1
     d7e:	98 2f       	mov	r25, r24
     d80:	99 0f       	add	r25, r25
     d82:	99 0f       	add	r25, r25
     d84:	87 81       	ldd	r24, Z+7	; 0x07
     d86:	8b 7f       	andi	r24, 0xFB	; 251
     d88:	89 2b       	or	r24, r25
     d8a:	87 83       	std	Z+7, r24	; 0x07
     d8c:	86 c1       	rjmp	.+780    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRB.Bit.B3 = Copy_Direction;
     d8e:	e0 e3       	ldi	r30, 0x30	; 48
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	81 70       	andi	r24, 0x01	; 1
     d96:	81 70       	andi	r24, 0x01	; 1
     d98:	98 2f       	mov	r25, r24
     d9a:	99 0f       	add	r25, r25
     d9c:	99 0f       	add	r25, r25
     d9e:	99 0f       	add	r25, r25
     da0:	87 81       	ldd	r24, Z+7	; 0x07
     da2:	87 7f       	andi	r24, 0xF7	; 247
     da4:	89 2b       	or	r24, r25
     da6:	87 83       	std	Z+7, r24	; 0x07
     da8:	78 c1       	rjmp	.+752    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRB.Bit.B4 = Copy_Direction;
     daa:	e0 e3       	ldi	r30, 0x30	; 48
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	81 70       	andi	r24, 0x01	; 1
     db2:	81 70       	andi	r24, 0x01	; 1
     db4:	98 2f       	mov	r25, r24
     db6:	92 95       	swap	r25
     db8:	90 7f       	andi	r25, 0xF0	; 240
     dba:	87 81       	ldd	r24, Z+7	; 0x07
     dbc:	8f 7e       	andi	r24, 0xEF	; 239
     dbe:	89 2b       	or	r24, r25
     dc0:	87 83       	std	Z+7, r24	; 0x07
     dc2:	6b c1       	rjmp	.+726    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRB.Bit.B5 = Copy_Direction;
     dc4:	e0 e3       	ldi	r30, 0x30	; 48
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	81 70       	andi	r24, 0x01	; 1
     dcc:	81 70       	andi	r24, 0x01	; 1
     dce:	98 2f       	mov	r25, r24
     dd0:	92 95       	swap	r25
     dd2:	99 0f       	add	r25, r25
     dd4:	90 7e       	andi	r25, 0xE0	; 224
     dd6:	87 81       	ldd	r24, Z+7	; 0x07
     dd8:	8f 7d       	andi	r24, 0xDF	; 223
     dda:	89 2b       	or	r24, r25
     ddc:	87 83       	std	Z+7, r24	; 0x07
     dde:	5d c1       	rjmp	.+698    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRB.Bit.B6 = Copy_Direction;
     de0:	e0 e3       	ldi	r30, 0x30	; 48
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	81 70       	andi	r24, 0x01	; 1
     de8:	81 70       	andi	r24, 0x01	; 1
     dea:	98 2f       	mov	r25, r24
     dec:	92 95       	swap	r25
     dee:	99 0f       	add	r25, r25
     df0:	99 0f       	add	r25, r25
     df2:	90 7c       	andi	r25, 0xC0	; 192
     df4:	87 81       	ldd	r24, Z+7	; 0x07
     df6:	8f 7b       	andi	r24, 0xBF	; 191
     df8:	89 2b       	or	r24, r25
     dfa:	87 83       	std	Z+7, r24	; 0x07
     dfc:	4e c1       	rjmp	.+668    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRB.Bit.B7 = Copy_Direction;
     dfe:	e0 e3       	ldi	r30, 0x30	; 48
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	81 70       	andi	r24, 0x01	; 1
     e06:	98 2f       	mov	r25, r24
     e08:	97 95       	ror	r25
     e0a:	99 27       	eor	r25, r25
     e0c:	97 95       	ror	r25
     e0e:	87 81       	ldd	r24, Z+7	; 0x07
     e10:	8f 77       	andi	r24, 0x7F	; 127
     e12:	89 2b       	or	r24, r25
     e14:	87 83       	std	Z+7, r24	; 0x07
     e16:	41 c1       	rjmp	.+642    	; 0x109a <DIO_voidSetPinDirection+0x564>
			}
			break;


		case PORT_C:
			switch(Copy_PinId)
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	3f 83       	std	Y+7, r19	; 0x07
     e20:	2e 83       	std	Y+6, r18	; 0x06
     e22:	8e 81       	ldd	r24, Y+6	; 0x06
     e24:	9f 81       	ldd	r25, Y+7	; 0x07
     e26:	83 30       	cpi	r24, 0x03	; 3
     e28:	91 05       	cpc	r25, r1
     e2a:	09 f4       	brne	.+2      	; 0xe2e <DIO_voidSetPinDirection+0x2f8>
     e2c:	51 c0       	rjmp	.+162    	; 0xed0 <DIO_voidSetPinDirection+0x39a>
     e2e:	2e 81       	ldd	r18, Y+6	; 0x06
     e30:	3f 81       	ldd	r19, Y+7	; 0x07
     e32:	24 30       	cpi	r18, 0x04	; 4
     e34:	31 05       	cpc	r19, r1
     e36:	7c f4       	brge	.+30     	; 0xe56 <DIO_voidSetPinDirection+0x320>
     e38:	8e 81       	ldd	r24, Y+6	; 0x06
     e3a:	9f 81       	ldd	r25, Y+7	; 0x07
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	91 05       	cpc	r25, r1
     e40:	71 f1       	breq	.+92     	; 0xe9e <DIO_voidSetPinDirection+0x368>
     e42:	2e 81       	ldd	r18, Y+6	; 0x06
     e44:	3f 81       	ldd	r19, Y+7	; 0x07
     e46:	22 30       	cpi	r18, 0x02	; 2
     e48:	31 05       	cpc	r19, r1
     e4a:	ac f5       	brge	.+106    	; 0xeb6 <DIO_voidSetPinDirection+0x380>
     e4c:	8e 81       	ldd	r24, Y+6	; 0x06
     e4e:	9f 81       	ldd	r25, Y+7	; 0x07
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	d1 f0       	breq	.+52     	; 0xe88 <DIO_voidSetPinDirection+0x352>
     e54:	22 c1       	rjmp	.+580    	; 0x109a <DIO_voidSetPinDirection+0x564>
     e56:	2e 81       	ldd	r18, Y+6	; 0x06
     e58:	3f 81       	ldd	r19, Y+7	; 0x07
     e5a:	25 30       	cpi	r18, 0x05	; 5
     e5c:	31 05       	cpc	r19, r1
     e5e:	09 f4       	brne	.+2      	; 0xe62 <DIO_voidSetPinDirection+0x32c>
     e60:	52 c0       	rjmp	.+164    	; 0xf06 <DIO_voidSetPinDirection+0x3d0>
     e62:	8e 81       	ldd	r24, Y+6	; 0x06
     e64:	9f 81       	ldd	r25, Y+7	; 0x07
     e66:	85 30       	cpi	r24, 0x05	; 5
     e68:	91 05       	cpc	r25, r1
     e6a:	0c f4       	brge	.+2      	; 0xe6e <DIO_voidSetPinDirection+0x338>
     e6c:	3f c0       	rjmp	.+126    	; 0xeec <DIO_voidSetPinDirection+0x3b6>
     e6e:	2e 81       	ldd	r18, Y+6	; 0x06
     e70:	3f 81       	ldd	r19, Y+7	; 0x07
     e72:	26 30       	cpi	r18, 0x06	; 6
     e74:	31 05       	cpc	r19, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <DIO_voidSetPinDirection+0x344>
     e78:	54 c0       	rjmp	.+168    	; 0xf22 <DIO_voidSetPinDirection+0x3ec>
     e7a:	8e 81       	ldd	r24, Y+6	; 0x06
     e7c:	9f 81       	ldd	r25, Y+7	; 0x07
     e7e:	87 30       	cpi	r24, 0x07	; 7
     e80:	91 05       	cpc	r25, r1
     e82:	09 f4       	brne	.+2      	; 0xe86 <DIO_voidSetPinDirection+0x350>
     e84:	5d c0       	rjmp	.+186    	; 0xf40 <DIO_voidSetPinDirection+0x40a>
     e86:	09 c1       	rjmp	.+530    	; 0x109a <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRC.Bit.B0 = Copy_Direction;
     e88:	e0 e3       	ldi	r30, 0x30	; 48
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 70       	andi	r24, 0x01	; 1
     e90:	98 2f       	mov	r25, r24
     e92:	91 70       	andi	r25, 0x01	; 1
     e94:	84 81       	ldd	r24, Z+4	; 0x04
     e96:	8e 7f       	andi	r24, 0xFE	; 254
     e98:	89 2b       	or	r24, r25
     e9a:	84 83       	std	Z+4, r24	; 0x04
     e9c:	fe c0       	rjmp	.+508    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRC.Bit.B1 = Copy_Direction;
     e9e:	e0 e3       	ldi	r30, 0x30	; 48
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	81 70       	andi	r24, 0x01	; 1
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	98 2f       	mov	r25, r24
     eaa:	99 0f       	add	r25, r25
     eac:	84 81       	ldd	r24, Z+4	; 0x04
     eae:	8d 7f       	andi	r24, 0xFD	; 253
     eb0:	89 2b       	or	r24, r25
     eb2:	84 83       	std	Z+4, r24	; 0x04
     eb4:	f2 c0       	rjmp	.+484    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRC.Bit.B2 = Copy_Direction;
     eb6:	e0 e3       	ldi	r30, 0x30	; 48
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	81 70       	andi	r24, 0x01	; 1
     ebe:	81 70       	andi	r24, 0x01	; 1
     ec0:	98 2f       	mov	r25, r24
     ec2:	99 0f       	add	r25, r25
     ec4:	99 0f       	add	r25, r25
     ec6:	84 81       	ldd	r24, Z+4	; 0x04
     ec8:	8b 7f       	andi	r24, 0xFB	; 251
     eca:	89 2b       	or	r24, r25
     ecc:	84 83       	std	Z+4, r24	; 0x04
     ece:	e5 c0       	rjmp	.+458    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRC.Bit.B3 = Copy_Direction;
     ed0:	e0 e3       	ldi	r30, 0x30	; 48
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	81 70       	andi	r24, 0x01	; 1
     ed8:	81 70       	andi	r24, 0x01	; 1
     eda:	98 2f       	mov	r25, r24
     edc:	99 0f       	add	r25, r25
     ede:	99 0f       	add	r25, r25
     ee0:	99 0f       	add	r25, r25
     ee2:	84 81       	ldd	r24, Z+4	; 0x04
     ee4:	87 7f       	andi	r24, 0xF7	; 247
     ee6:	89 2b       	or	r24, r25
     ee8:	84 83       	std	Z+4, r24	; 0x04
     eea:	d7 c0       	rjmp	.+430    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRC.Bit.B4 = Copy_Direction;
     eec:	e0 e3       	ldi	r30, 0x30	; 48
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	81 70       	andi	r24, 0x01	; 1
     ef4:	81 70       	andi	r24, 0x01	; 1
     ef6:	98 2f       	mov	r25, r24
     ef8:	92 95       	swap	r25
     efa:	90 7f       	andi	r25, 0xF0	; 240
     efc:	84 81       	ldd	r24, Z+4	; 0x04
     efe:	8f 7e       	andi	r24, 0xEF	; 239
     f00:	89 2b       	or	r24, r25
     f02:	84 83       	std	Z+4, r24	; 0x04
     f04:	ca c0       	rjmp	.+404    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRC.Bit.B5 = Copy_Direction;
     f06:	e0 e3       	ldi	r30, 0x30	; 48
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	81 70       	andi	r24, 0x01	; 1
     f0e:	81 70       	andi	r24, 0x01	; 1
     f10:	98 2f       	mov	r25, r24
     f12:	92 95       	swap	r25
     f14:	99 0f       	add	r25, r25
     f16:	90 7e       	andi	r25, 0xE0	; 224
     f18:	84 81       	ldd	r24, Z+4	; 0x04
     f1a:	8f 7d       	andi	r24, 0xDF	; 223
     f1c:	89 2b       	or	r24, r25
     f1e:	84 83       	std	Z+4, r24	; 0x04
     f20:	bc c0       	rjmp	.+376    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRC.Bit.B6 = Copy_Direction;
     f22:	e0 e3       	ldi	r30, 0x30	; 48
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	81 70       	andi	r24, 0x01	; 1
     f2a:	81 70       	andi	r24, 0x01	; 1
     f2c:	98 2f       	mov	r25, r24
     f2e:	92 95       	swap	r25
     f30:	99 0f       	add	r25, r25
     f32:	99 0f       	add	r25, r25
     f34:	90 7c       	andi	r25, 0xC0	; 192
     f36:	84 81       	ldd	r24, Z+4	; 0x04
     f38:	8f 7b       	andi	r24, 0xBF	; 191
     f3a:	89 2b       	or	r24, r25
     f3c:	84 83       	std	Z+4, r24	; 0x04
     f3e:	ad c0       	rjmp	.+346    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRC.Bit.B7 = Copy_Direction;
     f40:	e0 e3       	ldi	r30, 0x30	; 48
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	98 2f       	mov	r25, r24
     f4a:	97 95       	ror	r25
     f4c:	99 27       	eor	r25, r25
     f4e:	97 95       	ror	r25
     f50:	84 81       	ldd	r24, Z+4	; 0x04
     f52:	8f 77       	andi	r24, 0x7F	; 127
     f54:	89 2b       	or	r24, r25
     f56:	84 83       	std	Z+4, r24	; 0x04
     f58:	a0 c0       	rjmp	.+320    	; 0x109a <DIO_voidSetPinDirection+0x564>
				default: break;
			}
			break;

		case PORT_D:
			switch(Copy_PinId)
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	91 05       	cpc	r25, r1
     f6c:	09 f4       	brne	.+2      	; 0xf70 <DIO_voidSetPinDirection+0x43a>
     f6e:	51 c0       	rjmp	.+162    	; 0x1012 <DIO_voidSetPinDirection+0x4dc>
     f70:	2c 81       	ldd	r18, Y+4	; 0x04
     f72:	3d 81       	ldd	r19, Y+5	; 0x05
     f74:	24 30       	cpi	r18, 0x04	; 4
     f76:	31 05       	cpc	r19, r1
     f78:	7c f4       	brge	.+30     	; 0xf98 <DIO_voidSetPinDirection+0x462>
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	91 05       	cpc	r25, r1
     f82:	71 f1       	breq	.+92     	; 0xfe0 <DIO_voidSetPinDirection+0x4aa>
     f84:	2c 81       	ldd	r18, Y+4	; 0x04
     f86:	3d 81       	ldd	r19, Y+5	; 0x05
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	ac f5       	brge	.+106    	; 0xff8 <DIO_voidSetPinDirection+0x4c2>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	d1 f0       	breq	.+52     	; 0xfca <DIO_voidSetPinDirection+0x494>
     f96:	81 c0       	rjmp	.+258    	; 0x109a <DIO_voidSetPinDirection+0x564>
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	25 30       	cpi	r18, 0x05	; 5
     f9e:	31 05       	cpc	r19, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_voidSetPinDirection+0x46e>
     fa2:	52 c0       	rjmp	.+164    	; 0x1048 <DIO_voidSetPinDirection+0x512>
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	85 30       	cpi	r24, 0x05	; 5
     faa:	91 05       	cpc	r25, r1
     fac:	0c f4       	brge	.+2      	; 0xfb0 <DIO_voidSetPinDirection+0x47a>
     fae:	3f c0       	rjmp	.+126    	; 0x102e <DIO_voidSetPinDirection+0x4f8>
     fb0:	2c 81       	ldd	r18, Y+4	; 0x04
     fb2:	3d 81       	ldd	r19, Y+5	; 0x05
     fb4:	26 30       	cpi	r18, 0x06	; 6
     fb6:	31 05       	cpc	r19, r1
     fb8:	09 f4       	brne	.+2      	; 0xfbc <DIO_voidSetPinDirection+0x486>
     fba:	54 c0       	rjmp	.+168    	; 0x1064 <DIO_voidSetPinDirection+0x52e>
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9d 81       	ldd	r25, Y+5	; 0x05
     fc0:	87 30       	cpi	r24, 0x07	; 7
     fc2:	91 05       	cpc	r25, r1
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <DIO_voidSetPinDirection+0x492>
     fc6:	5d c0       	rjmp	.+186    	; 0x1082 <DIO_voidSetPinDirection+0x54c>
     fc8:	68 c0       	rjmp	.+208    	; 0x109a <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRD.Bit.B0 = Copy_Direction;
     fca:	e0 e3       	ldi	r30, 0x30	; 48
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	81 70       	andi	r24, 0x01	; 1
     fd2:	98 2f       	mov	r25, r24
     fd4:	91 70       	andi	r25, 0x01	; 1
     fd6:	81 81       	ldd	r24, Z+1	; 0x01
     fd8:	8e 7f       	andi	r24, 0xFE	; 254
     fda:	89 2b       	or	r24, r25
     fdc:	81 83       	std	Z+1, r24	; 0x01
     fde:	5d c0       	rjmp	.+186    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRD.Bit.B1 = Copy_Direction;
     fe0:	e0 e3       	ldi	r30, 0x30	; 48
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	81 70       	andi	r24, 0x01	; 1
     fe8:	81 70       	andi	r24, 0x01	; 1
     fea:	98 2f       	mov	r25, r24
     fec:	99 0f       	add	r25, r25
     fee:	81 81       	ldd	r24, Z+1	; 0x01
     ff0:	8d 7f       	andi	r24, 0xFD	; 253
     ff2:	89 2b       	or	r24, r25
     ff4:	81 83       	std	Z+1, r24	; 0x01
     ff6:	51 c0       	rjmp	.+162    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRD.Bit.B2 = Copy_Direction;
     ff8:	e0 e3       	ldi	r30, 0x30	; 48
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	81 70       	andi	r24, 0x01	; 1
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	98 2f       	mov	r25, r24
    1004:	99 0f       	add	r25, r25
    1006:	99 0f       	add	r25, r25
    1008:	81 81       	ldd	r24, Z+1	; 0x01
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	89 2b       	or	r24, r25
    100e:	81 83       	std	Z+1, r24	; 0x01
    1010:	44 c0       	rjmp	.+136    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRD.Bit.B3 = Copy_Direction;
    1012:	e0 e3       	ldi	r30, 0x30	; 48
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	81 70       	andi	r24, 0x01	; 1
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	98 2f       	mov	r25, r24
    101e:	99 0f       	add	r25, r25
    1020:	99 0f       	add	r25, r25
    1022:	99 0f       	add	r25, r25
    1024:	81 81       	ldd	r24, Z+1	; 0x01
    1026:	87 7f       	andi	r24, 0xF7	; 247
    1028:	89 2b       	or	r24, r25
    102a:	81 83       	std	Z+1, r24	; 0x01
    102c:	36 c0       	rjmp	.+108    	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRD.Bit.B4 = Copy_Direction;
    102e:	e0 e3       	ldi	r30, 0x30	; 48
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	81 70       	andi	r24, 0x01	; 1
    1036:	81 70       	andi	r24, 0x01	; 1
    1038:	98 2f       	mov	r25, r24
    103a:	92 95       	swap	r25
    103c:	90 7f       	andi	r25, 0xF0	; 240
    103e:	81 81       	ldd	r24, Z+1	; 0x01
    1040:	8f 7e       	andi	r24, 0xEF	; 239
    1042:	89 2b       	or	r24, r25
    1044:	81 83       	std	Z+1, r24	; 0x01
    1046:	29 c0       	rjmp	.+82     	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRD.Bit.B5 = Copy_Direction;
    1048:	e0 e3       	ldi	r30, 0x30	; 48
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	81 70       	andi	r24, 0x01	; 1
    1050:	81 70       	andi	r24, 0x01	; 1
    1052:	98 2f       	mov	r25, r24
    1054:	92 95       	swap	r25
    1056:	99 0f       	add	r25, r25
    1058:	90 7e       	andi	r25, 0xE0	; 224
    105a:	81 81       	ldd	r24, Z+1	; 0x01
    105c:	8f 7d       	andi	r24, 0xDF	; 223
    105e:	89 2b       	or	r24, r25
    1060:	81 83       	std	Z+1, r24	; 0x01
    1062:	1b c0       	rjmp	.+54     	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRD.Bit.B6 = Copy_Direction;
    1064:	e0 e3       	ldi	r30, 0x30	; 48
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	81 70       	andi	r24, 0x01	; 1
    106c:	81 70       	andi	r24, 0x01	; 1
    106e:	98 2f       	mov	r25, r24
    1070:	92 95       	swap	r25
    1072:	99 0f       	add	r25, r25
    1074:	99 0f       	add	r25, r25
    1076:	90 7c       	andi	r25, 0xC0	; 192
    1078:	81 81       	ldd	r24, Z+1	; 0x01
    107a:	8f 7b       	andi	r24, 0xBF	; 191
    107c:	89 2b       	or	r24, r25
    107e:	81 83       	std	Z+1, r24	; 0x01
    1080:	0c c0       	rjmp	.+24     	; 0x109a <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRD.Bit.B7 = Copy_Direction;
    1082:	e0 e3       	ldi	r30, 0x30	; 48
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	81 70       	andi	r24, 0x01	; 1
    108a:	98 2f       	mov	r25, r24
    108c:	97 95       	ror	r25
    108e:	99 27       	eor	r25, r25
    1090:	97 95       	ror	r25
    1092:	81 81       	ldd	r24, Z+1	; 0x01
    1094:	8f 77       	andi	r24, 0x7F	; 127
    1096:	89 2b       	or	r24, r25
    1098:	81 83       	std	Z+1, r24	; 0x01
						break;
				default: break;
			}
			break;
	}
}
    109a:	2d 96       	adiw	r28, 0x0d	; 13
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <DIO_voidSetPinValue>:




void DIO_voidSetPinValue(PORT_t Copy_PortId,PIN_t Copy_PinId,VALUE_t Copy_Value)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	2d 97       	sbiw	r28, 0x0d	; 13
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	6a 83       	std	Y+2, r22	; 0x02
    10c4:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_PortId)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3d 87       	std	Y+13, r19	; 0x0d
    10ce:	2c 87       	std	Y+12, r18	; 0x0c
    10d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    10d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	09 f4       	brne	.+2      	; 0x10dc <DIO_voidSetPinValue+0x30>
    10da:	b8 c0       	rjmp	.+368    	; 0x124c <DIO_voidSetPinValue+0x1a0>
    10dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    10de:	3d 85       	ldd	r19, Y+13	; 0x0d
    10e0:	22 30       	cpi	r18, 0x02	; 2
    10e2:	31 05       	cpc	r19, r1
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <DIO_voidSetPinValue+0x44>
    10e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    10e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	71 f0       	breq	.+28     	; 0x110a <DIO_voidSetPinValue+0x5e>
    10ee:	90 c2       	rjmp	.+1312   	; 0x1610 <DIO_voidSetPinValue+0x564>
    10f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    10f2:	3d 85       	ldd	r19, Y+13	; 0x0d
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	09 f4       	brne	.+2      	; 0x10fc <DIO_voidSetPinValue+0x50>
    10fa:	49 c1       	rjmp	.+658    	; 0x138e <DIO_voidSetPinValue+0x2e2>
    10fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    10fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	91 05       	cpc	r25, r1
    1104:	09 f4       	brne	.+2      	; 0x1108 <DIO_voidSetPinValue+0x5c>
    1106:	e4 c1       	rjmp	.+968    	; 0x14d0 <DIO_voidSetPinValue+0x424>
    1108:	83 c2       	rjmp	.+1286   	; 0x1610 <DIO_voidSetPinValue+0x564>
	{
		case PORT_A:
			switch(Copy_PinId)
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	3b 87       	std	Y+11, r19	; 0x0b
    1112:	2a 87       	std	Y+10, r18	; 0x0a
    1114:	8a 85       	ldd	r24, Y+10	; 0x0a
    1116:	9b 85       	ldd	r25, Y+11	; 0x0b
    1118:	83 30       	cpi	r24, 0x03	; 3
    111a:	91 05       	cpc	r25, r1
    111c:	09 f4       	brne	.+2      	; 0x1120 <DIO_voidSetPinValue+0x74>
    111e:	51 c0       	rjmp	.+162    	; 0x11c2 <DIO_voidSetPinValue+0x116>
    1120:	2a 85       	ldd	r18, Y+10	; 0x0a
    1122:	3b 85       	ldd	r19, Y+11	; 0x0b
    1124:	24 30       	cpi	r18, 0x04	; 4
    1126:	31 05       	cpc	r19, r1
    1128:	7c f4       	brge	.+30     	; 0x1148 <DIO_voidSetPinValue+0x9c>
    112a:	8a 85       	ldd	r24, Y+10	; 0x0a
    112c:	9b 85       	ldd	r25, Y+11	; 0x0b
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	71 f1       	breq	.+92     	; 0x1190 <DIO_voidSetPinValue+0xe4>
    1134:	2a 85       	ldd	r18, Y+10	; 0x0a
    1136:	3b 85       	ldd	r19, Y+11	; 0x0b
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	ac f5       	brge	.+106    	; 0x11a8 <DIO_voidSetPinValue+0xfc>
    113e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1140:	9b 85       	ldd	r25, Y+11	; 0x0b
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	d1 f0       	breq	.+52     	; 0x117a <DIO_voidSetPinValue+0xce>
    1146:	64 c2       	rjmp	.+1224   	; 0x1610 <DIO_voidSetPinValue+0x564>
    1148:	2a 85       	ldd	r18, Y+10	; 0x0a
    114a:	3b 85       	ldd	r19, Y+11	; 0x0b
    114c:	25 30       	cpi	r18, 0x05	; 5
    114e:	31 05       	cpc	r19, r1
    1150:	09 f4       	brne	.+2      	; 0x1154 <DIO_voidSetPinValue+0xa8>
    1152:	52 c0       	rjmp	.+164    	; 0x11f8 <DIO_voidSetPinValue+0x14c>
    1154:	8a 85       	ldd	r24, Y+10	; 0x0a
    1156:	9b 85       	ldd	r25, Y+11	; 0x0b
    1158:	85 30       	cpi	r24, 0x05	; 5
    115a:	91 05       	cpc	r25, r1
    115c:	0c f4       	brge	.+2      	; 0x1160 <DIO_voidSetPinValue+0xb4>
    115e:	3f c0       	rjmp	.+126    	; 0x11de <DIO_voidSetPinValue+0x132>
    1160:	2a 85       	ldd	r18, Y+10	; 0x0a
    1162:	3b 85       	ldd	r19, Y+11	; 0x0b
    1164:	26 30       	cpi	r18, 0x06	; 6
    1166:	31 05       	cpc	r19, r1
    1168:	09 f4       	brne	.+2      	; 0x116c <DIO_voidSetPinValue+0xc0>
    116a:	54 c0       	rjmp	.+168    	; 0x1214 <DIO_voidSetPinValue+0x168>
    116c:	8a 85       	ldd	r24, Y+10	; 0x0a
    116e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1170:	87 30       	cpi	r24, 0x07	; 7
    1172:	91 05       	cpc	r25, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <DIO_voidSetPinValue+0xcc>
    1176:	5d c0       	rjmp	.+186    	; 0x1232 <DIO_voidSetPinValue+0x186>
    1178:	4b c2       	rjmp	.+1174   	; 0x1610 <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTA.Bit.B0 = Copy_Value;
    117a:	e0 e3       	ldi	r30, 0x30	; 48
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	81 70       	andi	r24, 0x01	; 1
    1182:	98 2f       	mov	r25, r24
    1184:	91 70       	andi	r25, 0x01	; 1
    1186:	83 85       	ldd	r24, Z+11	; 0x0b
    1188:	8e 7f       	andi	r24, 0xFE	; 254
    118a:	89 2b       	or	r24, r25
    118c:	83 87       	std	Z+11, r24	; 0x0b
    118e:	40 c2       	rjmp	.+1152   	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTA.Bit.B1 = Copy_Value;
    1190:	e0 e3       	ldi	r30, 0x30	; 48
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	81 70       	andi	r24, 0x01	; 1
    1198:	81 70       	andi	r24, 0x01	; 1
    119a:	98 2f       	mov	r25, r24
    119c:	99 0f       	add	r25, r25
    119e:	83 85       	ldd	r24, Z+11	; 0x0b
    11a0:	8d 7f       	andi	r24, 0xFD	; 253
    11a2:	89 2b       	or	r24, r25
    11a4:	83 87       	std	Z+11, r24	; 0x0b
    11a6:	34 c2       	rjmp	.+1128   	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTA.Bit.B2 = Copy_Value;
    11a8:	e0 e3       	ldi	r30, 0x30	; 48
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	81 70       	andi	r24, 0x01	; 1
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	98 2f       	mov	r25, r24
    11b4:	99 0f       	add	r25, r25
    11b6:	99 0f       	add	r25, r25
    11b8:	83 85       	ldd	r24, Z+11	; 0x0b
    11ba:	8b 7f       	andi	r24, 0xFB	; 251
    11bc:	89 2b       	or	r24, r25
    11be:	83 87       	std	Z+11, r24	; 0x0b
    11c0:	27 c2       	rjmp	.+1102   	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTA.Bit.B3 = Copy_Value;
    11c2:	e0 e3       	ldi	r30, 0x30	; 48
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	81 70       	andi	r24, 0x01	; 1
    11ca:	81 70       	andi	r24, 0x01	; 1
    11cc:	98 2f       	mov	r25, r24
    11ce:	99 0f       	add	r25, r25
    11d0:	99 0f       	add	r25, r25
    11d2:	99 0f       	add	r25, r25
    11d4:	83 85       	ldd	r24, Z+11	; 0x0b
    11d6:	87 7f       	andi	r24, 0xF7	; 247
    11d8:	89 2b       	or	r24, r25
    11da:	83 87       	std	Z+11, r24	; 0x0b
    11dc:	19 c2       	rjmp	.+1074   	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTA.Bit.B4 = Copy_Value;
    11de:	e0 e3       	ldi	r30, 0x30	; 48
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	81 70       	andi	r24, 0x01	; 1
    11e6:	81 70       	andi	r24, 0x01	; 1
    11e8:	98 2f       	mov	r25, r24
    11ea:	92 95       	swap	r25
    11ec:	90 7f       	andi	r25, 0xF0	; 240
    11ee:	83 85       	ldd	r24, Z+11	; 0x0b
    11f0:	8f 7e       	andi	r24, 0xEF	; 239
    11f2:	89 2b       	or	r24, r25
    11f4:	83 87       	std	Z+11, r24	; 0x0b
    11f6:	0c c2       	rjmp	.+1048   	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTA.Bit.B5 = Copy_Value;
    11f8:	e0 e3       	ldi	r30, 0x30	; 48
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	81 70       	andi	r24, 0x01	; 1
    1200:	81 70       	andi	r24, 0x01	; 1
    1202:	98 2f       	mov	r25, r24
    1204:	92 95       	swap	r25
    1206:	99 0f       	add	r25, r25
    1208:	90 7e       	andi	r25, 0xE0	; 224
    120a:	83 85       	ldd	r24, Z+11	; 0x0b
    120c:	8f 7d       	andi	r24, 0xDF	; 223
    120e:	89 2b       	or	r24, r25
    1210:	83 87       	std	Z+11, r24	; 0x0b
    1212:	fe c1       	rjmp	.+1020   	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTA.Bit.B6 = Copy_Value;
    1214:	e0 e3       	ldi	r30, 0x30	; 48
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	81 70       	andi	r24, 0x01	; 1
    121c:	81 70       	andi	r24, 0x01	; 1
    121e:	98 2f       	mov	r25, r24
    1220:	92 95       	swap	r25
    1222:	99 0f       	add	r25, r25
    1224:	99 0f       	add	r25, r25
    1226:	90 7c       	andi	r25, 0xC0	; 192
    1228:	83 85       	ldd	r24, Z+11	; 0x0b
    122a:	8f 7b       	andi	r24, 0xBF	; 191
    122c:	89 2b       	or	r24, r25
    122e:	83 87       	std	Z+11, r24	; 0x0b
    1230:	ef c1       	rjmp	.+990    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTA.Bit.B7 = Copy_Value;
    1232:	e0 e3       	ldi	r30, 0x30	; 48
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	81 70       	andi	r24, 0x01	; 1
    123a:	98 2f       	mov	r25, r24
    123c:	97 95       	ror	r25
    123e:	99 27       	eor	r25, r25
    1240:	97 95       	ror	r25
    1242:	83 85       	ldd	r24, Z+11	; 0x0b
    1244:	8f 77       	andi	r24, 0x7F	; 127
    1246:	89 2b       	or	r24, r25
    1248:	83 87       	std	Z+11, r24	; 0x0b
    124a:	e2 c1       	rjmp	.+964    	; 0x1610 <DIO_voidSetPinValue+0x564>
				default: break;
			}
			break;

		case PORT_B:
			switch(Copy_PinId)
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	39 87       	std	Y+9, r19	; 0x09
    1254:	28 87       	std	Y+8, r18	; 0x08
    1256:	88 85       	ldd	r24, Y+8	; 0x08
    1258:	99 85       	ldd	r25, Y+9	; 0x09
    125a:	83 30       	cpi	r24, 0x03	; 3
    125c:	91 05       	cpc	r25, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <DIO_voidSetPinValue+0x1b6>
    1260:	51 c0       	rjmp	.+162    	; 0x1304 <DIO_voidSetPinValue+0x258>
    1262:	28 85       	ldd	r18, Y+8	; 0x08
    1264:	39 85       	ldd	r19, Y+9	; 0x09
    1266:	24 30       	cpi	r18, 0x04	; 4
    1268:	31 05       	cpc	r19, r1
    126a:	7c f4       	brge	.+30     	; 0x128a <DIO_voidSetPinValue+0x1de>
    126c:	88 85       	ldd	r24, Y+8	; 0x08
    126e:	99 85       	ldd	r25, Y+9	; 0x09
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	71 f1       	breq	.+92     	; 0x12d2 <DIO_voidSetPinValue+0x226>
    1276:	28 85       	ldd	r18, Y+8	; 0x08
    1278:	39 85       	ldd	r19, Y+9	; 0x09
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	ac f5       	brge	.+106    	; 0x12ea <DIO_voidSetPinValue+0x23e>
    1280:	88 85       	ldd	r24, Y+8	; 0x08
    1282:	99 85       	ldd	r25, Y+9	; 0x09
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	d1 f0       	breq	.+52     	; 0x12bc <DIO_voidSetPinValue+0x210>
    1288:	c3 c1       	rjmp	.+902    	; 0x1610 <DIO_voidSetPinValue+0x564>
    128a:	28 85       	ldd	r18, Y+8	; 0x08
    128c:	39 85       	ldd	r19, Y+9	; 0x09
    128e:	25 30       	cpi	r18, 0x05	; 5
    1290:	31 05       	cpc	r19, r1
    1292:	09 f4       	brne	.+2      	; 0x1296 <DIO_voidSetPinValue+0x1ea>
    1294:	52 c0       	rjmp	.+164    	; 0x133a <DIO_voidSetPinValue+0x28e>
    1296:	88 85       	ldd	r24, Y+8	; 0x08
    1298:	99 85       	ldd	r25, Y+9	; 0x09
    129a:	85 30       	cpi	r24, 0x05	; 5
    129c:	91 05       	cpc	r25, r1
    129e:	0c f4       	brge	.+2      	; 0x12a2 <DIO_voidSetPinValue+0x1f6>
    12a0:	3f c0       	rjmp	.+126    	; 0x1320 <DIO_voidSetPinValue+0x274>
    12a2:	28 85       	ldd	r18, Y+8	; 0x08
    12a4:	39 85       	ldd	r19, Y+9	; 0x09
    12a6:	26 30       	cpi	r18, 0x06	; 6
    12a8:	31 05       	cpc	r19, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <DIO_voidSetPinValue+0x202>
    12ac:	54 c0       	rjmp	.+168    	; 0x1356 <DIO_voidSetPinValue+0x2aa>
    12ae:	88 85       	ldd	r24, Y+8	; 0x08
    12b0:	99 85       	ldd	r25, Y+9	; 0x09
    12b2:	87 30       	cpi	r24, 0x07	; 7
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <DIO_voidSetPinValue+0x20e>
    12b8:	5d c0       	rjmp	.+186    	; 0x1374 <DIO_voidSetPinValue+0x2c8>
    12ba:	aa c1       	rjmp	.+852    	; 0x1610 <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTB.Bit.B0 = Copy_Value;
    12bc:	e0 e3       	ldi	r30, 0x30	; 48
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	81 70       	andi	r24, 0x01	; 1
    12c4:	98 2f       	mov	r25, r24
    12c6:	91 70       	andi	r25, 0x01	; 1
    12c8:	80 85       	ldd	r24, Z+8	; 0x08
    12ca:	8e 7f       	andi	r24, 0xFE	; 254
    12cc:	89 2b       	or	r24, r25
    12ce:	80 87       	std	Z+8, r24	; 0x08
    12d0:	9f c1       	rjmp	.+830    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTB.Bit.B1 = Copy_Value;
    12d2:	e0 e3       	ldi	r30, 0x30	; 48
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	98 2f       	mov	r25, r24
    12de:	99 0f       	add	r25, r25
    12e0:	80 85       	ldd	r24, Z+8	; 0x08
    12e2:	8d 7f       	andi	r24, 0xFD	; 253
    12e4:	89 2b       	or	r24, r25
    12e6:	80 87       	std	Z+8, r24	; 0x08
    12e8:	93 c1       	rjmp	.+806    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTB.Bit.B2 = Copy_Value;
    12ea:	e0 e3       	ldi	r30, 0x30	; 48
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	81 70       	andi	r24, 0x01	; 1
    12f4:	98 2f       	mov	r25, r24
    12f6:	99 0f       	add	r25, r25
    12f8:	99 0f       	add	r25, r25
    12fa:	80 85       	ldd	r24, Z+8	; 0x08
    12fc:	8b 7f       	andi	r24, 0xFB	; 251
    12fe:	89 2b       	or	r24, r25
    1300:	80 87       	std	Z+8, r24	; 0x08
    1302:	86 c1       	rjmp	.+780    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTB.Bit.B3 = Copy_Value;
    1304:	e0 e3       	ldi	r30, 0x30	; 48
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	81 70       	andi	r24, 0x01	; 1
    130c:	81 70       	andi	r24, 0x01	; 1
    130e:	98 2f       	mov	r25, r24
    1310:	99 0f       	add	r25, r25
    1312:	99 0f       	add	r25, r25
    1314:	99 0f       	add	r25, r25
    1316:	80 85       	ldd	r24, Z+8	; 0x08
    1318:	87 7f       	andi	r24, 0xF7	; 247
    131a:	89 2b       	or	r24, r25
    131c:	80 87       	std	Z+8, r24	; 0x08
    131e:	78 c1       	rjmp	.+752    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTB.Bit.B4 = Copy_Value;
    1320:	e0 e3       	ldi	r30, 0x30	; 48
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	81 70       	andi	r24, 0x01	; 1
    1328:	81 70       	andi	r24, 0x01	; 1
    132a:	98 2f       	mov	r25, r24
    132c:	92 95       	swap	r25
    132e:	90 7f       	andi	r25, 0xF0	; 240
    1330:	80 85       	ldd	r24, Z+8	; 0x08
    1332:	8f 7e       	andi	r24, 0xEF	; 239
    1334:	89 2b       	or	r24, r25
    1336:	80 87       	std	Z+8, r24	; 0x08
    1338:	6b c1       	rjmp	.+726    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTB.Bit.B5 = Copy_Value;
    133a:	e0 e3       	ldi	r30, 0x30	; 48
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	81 70       	andi	r24, 0x01	; 1
    1342:	81 70       	andi	r24, 0x01	; 1
    1344:	98 2f       	mov	r25, r24
    1346:	92 95       	swap	r25
    1348:	99 0f       	add	r25, r25
    134a:	90 7e       	andi	r25, 0xE0	; 224
    134c:	80 85       	ldd	r24, Z+8	; 0x08
    134e:	8f 7d       	andi	r24, 0xDF	; 223
    1350:	89 2b       	or	r24, r25
    1352:	80 87       	std	Z+8, r24	; 0x08
    1354:	5d c1       	rjmp	.+698    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTB.Bit.B6 = Copy_Value;
    1356:	e0 e3       	ldi	r30, 0x30	; 48
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	81 70       	andi	r24, 0x01	; 1
    135e:	81 70       	andi	r24, 0x01	; 1
    1360:	98 2f       	mov	r25, r24
    1362:	92 95       	swap	r25
    1364:	99 0f       	add	r25, r25
    1366:	99 0f       	add	r25, r25
    1368:	90 7c       	andi	r25, 0xC0	; 192
    136a:	80 85       	ldd	r24, Z+8	; 0x08
    136c:	8f 7b       	andi	r24, 0xBF	; 191
    136e:	89 2b       	or	r24, r25
    1370:	80 87       	std	Z+8, r24	; 0x08
    1372:	4e c1       	rjmp	.+668    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTB.Bit.B7 = Copy_Value;
    1374:	e0 e3       	ldi	r30, 0x30	; 48
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	81 70       	andi	r24, 0x01	; 1
    137c:	98 2f       	mov	r25, r24
    137e:	97 95       	ror	r25
    1380:	99 27       	eor	r25, r25
    1382:	97 95       	ror	r25
    1384:	80 85       	ldd	r24, Z+8	; 0x08
    1386:	8f 77       	andi	r24, 0x7F	; 127
    1388:	89 2b       	or	r24, r25
    138a:	80 87       	std	Z+8, r24	; 0x08
    138c:	41 c1       	rjmp	.+642    	; 0x1610 <DIO_voidSetPinValue+0x564>
			}
			break;


		case PORT_C:
			switch(Copy_PinId)
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	3f 83       	std	Y+7, r19	; 0x07
    1396:	2e 83       	std	Y+6, r18	; 0x06
    1398:	8e 81       	ldd	r24, Y+6	; 0x06
    139a:	9f 81       	ldd	r25, Y+7	; 0x07
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	91 05       	cpc	r25, r1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <DIO_voidSetPinValue+0x2f8>
    13a2:	51 c0       	rjmp	.+162    	; 0x1446 <DIO_voidSetPinValue+0x39a>
    13a4:	2e 81       	ldd	r18, Y+6	; 0x06
    13a6:	3f 81       	ldd	r19, Y+7	; 0x07
    13a8:	24 30       	cpi	r18, 0x04	; 4
    13aa:	31 05       	cpc	r19, r1
    13ac:	7c f4       	brge	.+30     	; 0x13cc <DIO_voidSetPinValue+0x320>
    13ae:	8e 81       	ldd	r24, Y+6	; 0x06
    13b0:	9f 81       	ldd	r25, Y+7	; 0x07
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	71 f1       	breq	.+92     	; 0x1414 <DIO_voidSetPinValue+0x368>
    13b8:	2e 81       	ldd	r18, Y+6	; 0x06
    13ba:	3f 81       	ldd	r19, Y+7	; 0x07
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	ac f5       	brge	.+106    	; 0x142c <DIO_voidSetPinValue+0x380>
    13c2:	8e 81       	ldd	r24, Y+6	; 0x06
    13c4:	9f 81       	ldd	r25, Y+7	; 0x07
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	d1 f0       	breq	.+52     	; 0x13fe <DIO_voidSetPinValue+0x352>
    13ca:	22 c1       	rjmp	.+580    	; 0x1610 <DIO_voidSetPinValue+0x564>
    13cc:	2e 81       	ldd	r18, Y+6	; 0x06
    13ce:	3f 81       	ldd	r19, Y+7	; 0x07
    13d0:	25 30       	cpi	r18, 0x05	; 5
    13d2:	31 05       	cpc	r19, r1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <DIO_voidSetPinValue+0x32c>
    13d6:	52 c0       	rjmp	.+164    	; 0x147c <DIO_voidSetPinValue+0x3d0>
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	85 30       	cpi	r24, 0x05	; 5
    13de:	91 05       	cpc	r25, r1
    13e0:	0c f4       	brge	.+2      	; 0x13e4 <DIO_voidSetPinValue+0x338>
    13e2:	3f c0       	rjmp	.+126    	; 0x1462 <DIO_voidSetPinValue+0x3b6>
    13e4:	2e 81       	ldd	r18, Y+6	; 0x06
    13e6:	3f 81       	ldd	r19, Y+7	; 0x07
    13e8:	26 30       	cpi	r18, 0x06	; 6
    13ea:	31 05       	cpc	r19, r1
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <DIO_voidSetPinValue+0x344>
    13ee:	54 c0       	rjmp	.+168    	; 0x1498 <DIO_voidSetPinValue+0x3ec>
    13f0:	8e 81       	ldd	r24, Y+6	; 0x06
    13f2:	9f 81       	ldd	r25, Y+7	; 0x07
    13f4:	87 30       	cpi	r24, 0x07	; 7
    13f6:	91 05       	cpc	r25, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <DIO_voidSetPinValue+0x350>
    13fa:	5d c0       	rjmp	.+186    	; 0x14b6 <DIO_voidSetPinValue+0x40a>
    13fc:	09 c1       	rjmp	.+530    	; 0x1610 <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTC.Bit.B0 = Copy_Value;
    13fe:	e0 e3       	ldi	r30, 0x30	; 48
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	81 70       	andi	r24, 0x01	; 1
    1406:	98 2f       	mov	r25, r24
    1408:	91 70       	andi	r25, 0x01	; 1
    140a:	85 81       	ldd	r24, Z+5	; 0x05
    140c:	8e 7f       	andi	r24, 0xFE	; 254
    140e:	89 2b       	or	r24, r25
    1410:	85 83       	std	Z+5, r24	; 0x05
    1412:	fe c0       	rjmp	.+508    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTC.Bit.B1 = Copy_Value;
    1414:	e0 e3       	ldi	r30, 0x30	; 48
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	81 70       	andi	r24, 0x01	; 1
    141c:	81 70       	andi	r24, 0x01	; 1
    141e:	98 2f       	mov	r25, r24
    1420:	99 0f       	add	r25, r25
    1422:	85 81       	ldd	r24, Z+5	; 0x05
    1424:	8d 7f       	andi	r24, 0xFD	; 253
    1426:	89 2b       	or	r24, r25
    1428:	85 83       	std	Z+5, r24	; 0x05
    142a:	f2 c0       	rjmp	.+484    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTC.Bit.B2 = Copy_Value;
    142c:	e0 e3       	ldi	r30, 0x30	; 48
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	81 70       	andi	r24, 0x01	; 1
    1434:	81 70       	andi	r24, 0x01	; 1
    1436:	98 2f       	mov	r25, r24
    1438:	99 0f       	add	r25, r25
    143a:	99 0f       	add	r25, r25
    143c:	85 81       	ldd	r24, Z+5	; 0x05
    143e:	8b 7f       	andi	r24, 0xFB	; 251
    1440:	89 2b       	or	r24, r25
    1442:	85 83       	std	Z+5, r24	; 0x05
    1444:	e5 c0       	rjmp	.+458    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTC.Bit.B3 = Copy_Value;
    1446:	e0 e3       	ldi	r30, 0x30	; 48
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	81 70       	andi	r24, 0x01	; 1
    144e:	81 70       	andi	r24, 0x01	; 1
    1450:	98 2f       	mov	r25, r24
    1452:	99 0f       	add	r25, r25
    1454:	99 0f       	add	r25, r25
    1456:	99 0f       	add	r25, r25
    1458:	85 81       	ldd	r24, Z+5	; 0x05
    145a:	87 7f       	andi	r24, 0xF7	; 247
    145c:	89 2b       	or	r24, r25
    145e:	85 83       	std	Z+5, r24	; 0x05
    1460:	d7 c0       	rjmp	.+430    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTC.Bit.B4 = Copy_Value;
    1462:	e0 e3       	ldi	r30, 0x30	; 48
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	81 70       	andi	r24, 0x01	; 1
    146a:	81 70       	andi	r24, 0x01	; 1
    146c:	98 2f       	mov	r25, r24
    146e:	92 95       	swap	r25
    1470:	90 7f       	andi	r25, 0xF0	; 240
    1472:	85 81       	ldd	r24, Z+5	; 0x05
    1474:	8f 7e       	andi	r24, 0xEF	; 239
    1476:	89 2b       	or	r24, r25
    1478:	85 83       	std	Z+5, r24	; 0x05
    147a:	ca c0       	rjmp	.+404    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTC.Bit.B5 = Copy_Value;
    147c:	e0 e3       	ldi	r30, 0x30	; 48
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	81 70       	andi	r24, 0x01	; 1
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	98 2f       	mov	r25, r24
    1488:	92 95       	swap	r25
    148a:	99 0f       	add	r25, r25
    148c:	90 7e       	andi	r25, 0xE0	; 224
    148e:	85 81       	ldd	r24, Z+5	; 0x05
    1490:	8f 7d       	andi	r24, 0xDF	; 223
    1492:	89 2b       	or	r24, r25
    1494:	85 83       	std	Z+5, r24	; 0x05
    1496:	bc c0       	rjmp	.+376    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTC.Bit.B6 = Copy_Value;
    1498:	e0 e3       	ldi	r30, 0x30	; 48
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	81 70       	andi	r24, 0x01	; 1
    14a0:	81 70       	andi	r24, 0x01	; 1
    14a2:	98 2f       	mov	r25, r24
    14a4:	92 95       	swap	r25
    14a6:	99 0f       	add	r25, r25
    14a8:	99 0f       	add	r25, r25
    14aa:	90 7c       	andi	r25, 0xC0	; 192
    14ac:	85 81       	ldd	r24, Z+5	; 0x05
    14ae:	8f 7b       	andi	r24, 0xBF	; 191
    14b0:	89 2b       	or	r24, r25
    14b2:	85 83       	std	Z+5, r24	; 0x05
    14b4:	ad c0       	rjmp	.+346    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTC.Bit.B7 = Copy_Value;
    14b6:	e0 e3       	ldi	r30, 0x30	; 48
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	81 70       	andi	r24, 0x01	; 1
    14be:	98 2f       	mov	r25, r24
    14c0:	97 95       	ror	r25
    14c2:	99 27       	eor	r25, r25
    14c4:	97 95       	ror	r25
    14c6:	85 81       	ldd	r24, Z+5	; 0x05
    14c8:	8f 77       	andi	r24, 0x7F	; 127
    14ca:	89 2b       	or	r24, r25
    14cc:	85 83       	std	Z+5, r24	; 0x05
    14ce:	a0 c0       	rjmp	.+320    	; 0x1610 <DIO_voidSetPinValue+0x564>
				default: break;
			}
			break;

		case PORT_D:
			switch(Copy_PinId)
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	3d 83       	std	Y+5, r19	; 0x05
    14d8:	2c 83       	std	Y+4, r18	; 0x04
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <DIO_voidSetPinValue+0x43a>
    14e4:	51 c0       	rjmp	.+162    	; 0x1588 <DIO_voidSetPinValue+0x4dc>
    14e6:	2c 81       	ldd	r18, Y+4	; 0x04
    14e8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ea:	24 30       	cpi	r18, 0x04	; 4
    14ec:	31 05       	cpc	r19, r1
    14ee:	7c f4       	brge	.+30     	; 0x150e <DIO_voidSetPinValue+0x462>
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	91 05       	cpc	r25, r1
    14f8:	71 f1       	breq	.+92     	; 0x1556 <DIO_voidSetPinValue+0x4aa>
    14fa:	2c 81       	ldd	r18, Y+4	; 0x04
    14fc:	3d 81       	ldd	r19, Y+5	; 0x05
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	ac f5       	brge	.+106    	; 0x156e <DIO_voidSetPinValue+0x4c2>
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	d1 f0       	breq	.+52     	; 0x1540 <DIO_voidSetPinValue+0x494>
    150c:	81 c0       	rjmp	.+258    	; 0x1610 <DIO_voidSetPinValue+0x564>
    150e:	2c 81       	ldd	r18, Y+4	; 0x04
    1510:	3d 81       	ldd	r19, Y+5	; 0x05
    1512:	25 30       	cpi	r18, 0x05	; 5
    1514:	31 05       	cpc	r19, r1
    1516:	09 f4       	brne	.+2      	; 0x151a <DIO_voidSetPinValue+0x46e>
    1518:	52 c0       	rjmp	.+164    	; 0x15be <DIO_voidSetPinValue+0x512>
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	9d 81       	ldd	r25, Y+5	; 0x05
    151e:	85 30       	cpi	r24, 0x05	; 5
    1520:	91 05       	cpc	r25, r1
    1522:	0c f4       	brge	.+2      	; 0x1526 <DIO_voidSetPinValue+0x47a>
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <DIO_voidSetPinValue+0x4f8>
    1526:	2c 81       	ldd	r18, Y+4	; 0x04
    1528:	3d 81       	ldd	r19, Y+5	; 0x05
    152a:	26 30       	cpi	r18, 0x06	; 6
    152c:	31 05       	cpc	r19, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <DIO_voidSetPinValue+0x486>
    1530:	54 c0       	rjmp	.+168    	; 0x15da <DIO_voidSetPinValue+0x52e>
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	9d 81       	ldd	r25, Y+5	; 0x05
    1536:	87 30       	cpi	r24, 0x07	; 7
    1538:	91 05       	cpc	r25, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <DIO_voidSetPinValue+0x492>
    153c:	5d c0       	rjmp	.+186    	; 0x15f8 <DIO_voidSetPinValue+0x54c>
    153e:	68 c0       	rjmp	.+208    	; 0x1610 <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTD.Bit.B0 = Copy_Value;
    1540:	e0 e3       	ldi	r30, 0x30	; 48
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	81 70       	andi	r24, 0x01	; 1
    1548:	98 2f       	mov	r25, r24
    154a:	91 70       	andi	r25, 0x01	; 1
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	8e 7f       	andi	r24, 0xFE	; 254
    1550:	89 2b       	or	r24, r25
    1552:	82 83       	std	Z+2, r24	; 0x02
    1554:	5d c0       	rjmp	.+186    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTD.Bit.B1 = Copy_Value;
    1556:	e0 e3       	ldi	r30, 0x30	; 48
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	81 70       	andi	r24, 0x01	; 1
    155e:	81 70       	andi	r24, 0x01	; 1
    1560:	98 2f       	mov	r25, r24
    1562:	99 0f       	add	r25, r25
    1564:	82 81       	ldd	r24, Z+2	; 0x02
    1566:	8d 7f       	andi	r24, 0xFD	; 253
    1568:	89 2b       	or	r24, r25
    156a:	82 83       	std	Z+2, r24	; 0x02
    156c:	51 c0       	rjmp	.+162    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTD.Bit.B2 = Copy_Value;
    156e:	e0 e3       	ldi	r30, 0x30	; 48
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 70       	andi	r24, 0x01	; 1
    1576:	81 70       	andi	r24, 0x01	; 1
    1578:	98 2f       	mov	r25, r24
    157a:	99 0f       	add	r25, r25
    157c:	99 0f       	add	r25, r25
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	8b 7f       	andi	r24, 0xFB	; 251
    1582:	89 2b       	or	r24, r25
    1584:	82 83       	std	Z+2, r24	; 0x02
    1586:	44 c0       	rjmp	.+136    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTD.Bit.B3 = Copy_Value;
    1588:	e0 e3       	ldi	r30, 0x30	; 48
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	81 70       	andi	r24, 0x01	; 1
    1590:	81 70       	andi	r24, 0x01	; 1
    1592:	98 2f       	mov	r25, r24
    1594:	99 0f       	add	r25, r25
    1596:	99 0f       	add	r25, r25
    1598:	99 0f       	add	r25, r25
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	87 7f       	andi	r24, 0xF7	; 247
    159e:	89 2b       	or	r24, r25
    15a0:	82 83       	std	Z+2, r24	; 0x02
    15a2:	36 c0       	rjmp	.+108    	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTD.Bit.B4 = Copy_Value;
    15a4:	e0 e3       	ldi	r30, 0x30	; 48
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	81 70       	andi	r24, 0x01	; 1
    15ac:	81 70       	andi	r24, 0x01	; 1
    15ae:	98 2f       	mov	r25, r24
    15b0:	92 95       	swap	r25
    15b2:	90 7f       	andi	r25, 0xF0	; 240
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	8f 7e       	andi	r24, 0xEF	; 239
    15b8:	89 2b       	or	r24, r25
    15ba:	82 83       	std	Z+2, r24	; 0x02
    15bc:	29 c0       	rjmp	.+82     	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTD.Bit.B5 = Copy_Value;
    15be:	e0 e3       	ldi	r30, 0x30	; 48
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	81 70       	andi	r24, 0x01	; 1
    15c6:	81 70       	andi	r24, 0x01	; 1
    15c8:	98 2f       	mov	r25, r24
    15ca:	92 95       	swap	r25
    15cc:	99 0f       	add	r25, r25
    15ce:	90 7e       	andi	r25, 0xE0	; 224
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	8f 7d       	andi	r24, 0xDF	; 223
    15d4:	89 2b       	or	r24, r25
    15d6:	82 83       	std	Z+2, r24	; 0x02
    15d8:	1b c0       	rjmp	.+54     	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTD.Bit.B6 = Copy_Value;
    15da:	e0 e3       	ldi	r30, 0x30	; 48
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	81 70       	andi	r24, 0x01	; 1
    15e2:	81 70       	andi	r24, 0x01	; 1
    15e4:	98 2f       	mov	r25, r24
    15e6:	92 95       	swap	r25
    15e8:	99 0f       	add	r25, r25
    15ea:	99 0f       	add	r25, r25
    15ec:	90 7c       	andi	r25, 0xC0	; 192
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	8f 7b       	andi	r24, 0xBF	; 191
    15f2:	89 2b       	or	r24, r25
    15f4:	82 83       	std	Z+2, r24	; 0x02
    15f6:	0c c0       	rjmp	.+24     	; 0x1610 <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTD.Bit.B7 = Copy_Value;
    15f8:	e0 e3       	ldi	r30, 0x30	; 48
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	81 70       	andi	r24, 0x01	; 1
    1600:	98 2f       	mov	r25, r24
    1602:	97 95       	ror	r25
    1604:	99 27       	eor	r25, r25
    1606:	97 95       	ror	r25
    1608:	82 81       	ldd	r24, Z+2	; 0x02
    160a:	8f 77       	andi	r24, 0x7F	; 127
    160c:	89 2b       	or	r24, r25
    160e:	82 83       	std	Z+2, r24	; 0x02
						break;
				default: break;
			}
			break;
	}
}
    1610:	2d 96       	adiw	r28, 0x0d	; 13
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <DIO_voidGetPinValue>:

u8 DIO_voidGetPinValue(PORT_t Copy_PortId,PIN_t Copy_PinId)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	2d 97       	sbiw	r28, 0x0d	; 13
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	8a 83       	std	Y+2, r24	; 0x02
    1638:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Pin;
	switch(Copy_PortId)
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	3d 87       	std	Y+13, r19	; 0x0d
    1642:	2c 87       	std	Y+12, r18	; 0x0c
    1644:	8c 85       	ldd	r24, Y+12	; 0x0c
    1646:	9d 85       	ldd	r25, Y+13	; 0x0d
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	91 05       	cpc	r25, r1
    164c:	09 f4       	brne	.+2      	; 0x1650 <DIO_voidGetPinValue+0x2e>
    164e:	8c c0       	rjmp	.+280    	; 0x1768 <DIO_voidGetPinValue+0x146>
    1650:	2c 85       	ldd	r18, Y+12	; 0x0c
    1652:	3d 85       	ldd	r19, Y+13	; 0x0d
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	2c f4       	brge	.+10     	; 0x1664 <DIO_voidGetPinValue+0x42>
    165a:	8c 85       	ldd	r24, Y+12	; 0x0c
    165c:	9d 85       	ldd	r25, Y+13	; 0x0d
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	71 f0       	breq	.+28     	; 0x167e <DIO_voidGetPinValue+0x5c>
    1662:	e0 c1       	rjmp	.+960    	; 0x1a24 <DIO_voidGetPinValue+0x402>
    1664:	2c 85       	ldd	r18, Y+12	; 0x0c
    1666:	3d 85       	ldd	r19, Y+13	; 0x0d
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <DIO_voidGetPinValue+0x4e>
    166e:	f1 c0       	rjmp	.+482    	; 0x1852 <DIO_voidGetPinValue+0x230>
    1670:	8c 85       	ldd	r24, Y+12	; 0x0c
    1672:	9d 85       	ldd	r25, Y+13	; 0x0d
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <DIO_voidGetPinValue+0x5a>
    167a:	60 c1       	rjmp	.+704    	; 0x193c <DIO_voidGetPinValue+0x31a>
    167c:	d3 c1       	rjmp	.+934    	; 0x1a24 <DIO_voidGetPinValue+0x402>
	{
		case PORT_A:
			switch(Copy_PinId)
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	3b 87       	std	Y+11, r19	; 0x0b
    1686:	2a 87       	std	Y+10, r18	; 0x0a
    1688:	8a 85       	ldd	r24, Y+10	; 0x0a
    168a:	9b 85       	ldd	r25, Y+11	; 0x0b
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	91 05       	cpc	r25, r1
    1690:	09 f4       	brne	.+2      	; 0x1694 <DIO_voidGetPinValue+0x72>
    1692:	3e c0       	rjmp	.+124    	; 0x1710 <DIO_voidGetPinValue+0xee>
    1694:	2a 85       	ldd	r18, Y+10	; 0x0a
    1696:	3b 85       	ldd	r19, Y+11	; 0x0b
    1698:	24 30       	cpi	r18, 0x04	; 4
    169a:	31 05       	cpc	r19, r1
    169c:	7c f4       	brge	.+30     	; 0x16bc <DIO_voidGetPinValue+0x9a>
    169e:	8a 85       	ldd	r24, Y+10	; 0x0a
    16a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	91 05       	cpc	r25, r1
    16a6:	29 f1       	breq	.+74     	; 0x16f2 <DIO_voidGetPinValue+0xd0>
    16a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    16aa:	3b 85       	ldd	r19, Y+11	; 0x0b
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	3c f5       	brge	.+78     	; 0x1700 <DIO_voidGetPinValue+0xde>
    16b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    16b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	b1 f0       	breq	.+44     	; 0x16e6 <DIO_voidGetPinValue+0xc4>
    16ba:	b4 c1       	rjmp	.+872    	; 0x1a24 <DIO_voidGetPinValue+0x402>
    16bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    16be:	3b 85       	ldd	r19, Y+11	; 0x0b
    16c0:	25 30       	cpi	r18, 0x05	; 5
    16c2:	31 05       	cpc	r19, r1
    16c4:	b1 f1       	breq	.+108    	; 0x1732 <DIO_voidGetPinValue+0x110>
    16c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ca:	85 30       	cpi	r24, 0x05	; 5
    16cc:	91 05       	cpc	r25, r1
    16ce:	4c f1       	brlt	.+82     	; 0x1722 <DIO_voidGetPinValue+0x100>
    16d0:	2a 85       	ldd	r18, Y+10	; 0x0a
    16d2:	3b 85       	ldd	r19, Y+11	; 0x0b
    16d4:	26 30       	cpi	r18, 0x06	; 6
    16d6:	31 05       	cpc	r19, r1
    16d8:	a9 f1       	breq	.+106    	; 0x1744 <DIO_voidGetPinValue+0x122>
    16da:	8a 85       	ldd	r24, Y+10	; 0x0a
    16dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    16de:	87 30       	cpi	r24, 0x07	; 7
    16e0:	91 05       	cpc	r25, r1
    16e2:	d1 f1       	breq	.+116    	; 0x1758 <DIO_voidGetPinValue+0x136>
    16e4:	9f c1       	rjmp	.+830    	; 0x1a24 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PINA.Bit.B0;
    16e6:	e0 e3       	ldi	r30, 0x30	; 48
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	81 85       	ldd	r24, Z+9	; 0x09
    16ec:	81 70       	andi	r24, 0x01	; 1
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	99 c1       	rjmp	.+818    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PINA.Bit.B1;
    16f2:	e0 e3       	ldi	r30, 0x30	; 48
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	81 85       	ldd	r24, Z+9	; 0x09
    16f8:	86 95       	lsr	r24
    16fa:	81 70       	andi	r24, 0x01	; 1
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	92 c1       	rjmp	.+804    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PINA.Bit.B2;
    1700:	e0 e3       	ldi	r30, 0x30	; 48
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	81 85       	ldd	r24, Z+9	; 0x09
    1706:	86 95       	lsr	r24
    1708:	86 95       	lsr	r24
    170a:	81 70       	andi	r24, 0x01	; 1
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	8a c1       	rjmp	.+788    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PINA.Bit.B3;
    1710:	e0 e3       	ldi	r30, 0x30	; 48
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	81 85       	ldd	r24, Z+9	; 0x09
    1716:	86 95       	lsr	r24
    1718:	86 95       	lsr	r24
    171a:	86 95       	lsr	r24
    171c:	81 70       	andi	r24, 0x01	; 1
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	81 c1       	rjmp	.+770    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PINA.Bit.B4;
    1722:	e0 e3       	ldi	r30, 0x30	; 48
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	81 85       	ldd	r24, Z+9	; 0x09
    1728:	82 95       	swap	r24
    172a:	8f 70       	andi	r24, 0x0F	; 15
    172c:	81 70       	andi	r24, 0x01	; 1
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	79 c1       	rjmp	.+754    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PINA.Bit.B5;
    1732:	e0 e3       	ldi	r30, 0x30	; 48
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	81 85       	ldd	r24, Z+9	; 0x09
    1738:	82 95       	swap	r24
    173a:	86 95       	lsr	r24
    173c:	87 70       	andi	r24, 0x07	; 7
    173e:	81 70       	andi	r24, 0x01	; 1
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	70 c1       	rjmp	.+736    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PINA.Bit.B6;
    1744:	e0 e3       	ldi	r30, 0x30	; 48
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	81 85       	ldd	r24, Z+9	; 0x09
    174a:	82 95       	swap	r24
    174c:	86 95       	lsr	r24
    174e:	86 95       	lsr	r24
    1750:	83 70       	andi	r24, 0x03	; 3
    1752:	81 70       	andi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	66 c1       	rjmp	.+716    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PINA.Bit.B7;
    1758:	e0 e3       	ldi	r30, 0x30	; 48
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	81 85       	ldd	r24, Z+9	; 0x09
    175e:	88 1f       	adc	r24, r24
    1760:	88 27       	eor	r24, r24
    1762:	88 1f       	adc	r24, r24
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	5e c1       	rjmp	.+700    	; 0x1a24 <DIO_voidGetPinValue+0x402>
				default: break;
			}
			break;

		case PORT_B:
			switch(Copy_PinId)
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	39 87       	std	Y+9, r19	; 0x09
    1770:	28 87       	std	Y+8, r18	; 0x08
    1772:	88 85       	ldd	r24, Y+8	; 0x08
    1774:	99 85       	ldd	r25, Y+9	; 0x09
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	91 05       	cpc	r25, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <DIO_voidGetPinValue+0x15c>
    177c:	3e c0       	rjmp	.+124    	; 0x17fa <DIO_voidGetPinValue+0x1d8>
    177e:	28 85       	ldd	r18, Y+8	; 0x08
    1780:	39 85       	ldd	r19, Y+9	; 0x09
    1782:	24 30       	cpi	r18, 0x04	; 4
    1784:	31 05       	cpc	r19, r1
    1786:	7c f4       	brge	.+30     	; 0x17a6 <DIO_voidGetPinValue+0x184>
    1788:	88 85       	ldd	r24, Y+8	; 0x08
    178a:	99 85       	ldd	r25, Y+9	; 0x09
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	91 05       	cpc	r25, r1
    1790:	29 f1       	breq	.+74     	; 0x17dc <DIO_voidGetPinValue+0x1ba>
    1792:	28 85       	ldd	r18, Y+8	; 0x08
    1794:	39 85       	ldd	r19, Y+9	; 0x09
    1796:	22 30       	cpi	r18, 0x02	; 2
    1798:	31 05       	cpc	r19, r1
    179a:	3c f5       	brge	.+78     	; 0x17ea <DIO_voidGetPinValue+0x1c8>
    179c:	88 85       	ldd	r24, Y+8	; 0x08
    179e:	99 85       	ldd	r25, Y+9	; 0x09
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	b1 f0       	breq	.+44     	; 0x17d0 <DIO_voidGetPinValue+0x1ae>
    17a4:	3f c1       	rjmp	.+638    	; 0x1a24 <DIO_voidGetPinValue+0x402>
    17a6:	28 85       	ldd	r18, Y+8	; 0x08
    17a8:	39 85       	ldd	r19, Y+9	; 0x09
    17aa:	25 30       	cpi	r18, 0x05	; 5
    17ac:	31 05       	cpc	r19, r1
    17ae:	b1 f1       	breq	.+108    	; 0x181c <DIO_voidGetPinValue+0x1fa>
    17b0:	88 85       	ldd	r24, Y+8	; 0x08
    17b2:	99 85       	ldd	r25, Y+9	; 0x09
    17b4:	85 30       	cpi	r24, 0x05	; 5
    17b6:	91 05       	cpc	r25, r1
    17b8:	4c f1       	brlt	.+82     	; 0x180c <DIO_voidGetPinValue+0x1ea>
    17ba:	28 85       	ldd	r18, Y+8	; 0x08
    17bc:	39 85       	ldd	r19, Y+9	; 0x09
    17be:	26 30       	cpi	r18, 0x06	; 6
    17c0:	31 05       	cpc	r19, r1
    17c2:	a9 f1       	breq	.+106    	; 0x182e <DIO_voidGetPinValue+0x20c>
    17c4:	88 85       	ldd	r24, Y+8	; 0x08
    17c6:	99 85       	ldd	r25, Y+9	; 0x09
    17c8:	87 30       	cpi	r24, 0x07	; 7
    17ca:	91 05       	cpc	r25, r1
    17cc:	d1 f1       	breq	.+116    	; 0x1842 <DIO_voidGetPinValue+0x220>
    17ce:	2a c1       	rjmp	.+596    	; 0x1a24 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PINB.Bit.B0;
    17d0:	e0 e3       	ldi	r30, 0x30	; 48
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	86 81       	ldd	r24, Z+6	; 0x06
    17d6:	81 70       	andi	r24, 0x01	; 1
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	24 c1       	rjmp	.+584    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PINB.Bit.B1;
    17dc:	e0 e3       	ldi	r30, 0x30	; 48
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	86 81       	ldd	r24, Z+6	; 0x06
    17e2:	86 95       	lsr	r24
    17e4:	81 70       	andi	r24, 0x01	; 1
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	1d c1       	rjmp	.+570    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PINB.Bit.B2;
    17ea:	e0 e3       	ldi	r30, 0x30	; 48
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	86 81       	ldd	r24, Z+6	; 0x06
    17f0:	86 95       	lsr	r24
    17f2:	86 95       	lsr	r24
    17f4:	81 70       	andi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	15 c1       	rjmp	.+554    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PINB.Bit.B3;
    17fa:	e0 e3       	ldi	r30, 0x30	; 48
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	86 81       	ldd	r24, Z+6	; 0x06
    1800:	86 95       	lsr	r24
    1802:	86 95       	lsr	r24
    1804:	86 95       	lsr	r24
    1806:	81 70       	andi	r24, 0x01	; 1
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	0c c1       	rjmp	.+536    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PINB.Bit.B4;
    180c:	e0 e3       	ldi	r30, 0x30	; 48
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	86 81       	ldd	r24, Z+6	; 0x06
    1812:	82 95       	swap	r24
    1814:	8f 70       	andi	r24, 0x0F	; 15
    1816:	81 70       	andi	r24, 0x01	; 1
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	04 c1       	rjmp	.+520    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PINB.Bit.B5;
    181c:	e0 e3       	ldi	r30, 0x30	; 48
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	86 81       	ldd	r24, Z+6	; 0x06
    1822:	82 95       	swap	r24
    1824:	86 95       	lsr	r24
    1826:	87 70       	andi	r24, 0x07	; 7
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	fb c0       	rjmp	.+502    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PINB.Bit.B6;
    182e:	e0 e3       	ldi	r30, 0x30	; 48
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	86 81       	ldd	r24, Z+6	; 0x06
    1834:	82 95       	swap	r24
    1836:	86 95       	lsr	r24
    1838:	86 95       	lsr	r24
    183a:	83 70       	andi	r24, 0x03	; 3
    183c:	81 70       	andi	r24, 0x01	; 1
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	f1 c0       	rjmp	.+482    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PINB.Bit.B7;
    1842:	e0 e3       	ldi	r30, 0x30	; 48
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	86 81       	ldd	r24, Z+6	; 0x06
    1848:	88 1f       	adc	r24, r24
    184a:	88 27       	eor	r24, r24
    184c:	88 1f       	adc	r24, r24
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	e9 c0       	rjmp	.+466    	; 0x1a24 <DIO_voidGetPinValue+0x402>
			}
			break;


		case PORT_C:
			switch(Copy_PinId)
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	3f 83       	std	Y+7, r19	; 0x07
    185a:	2e 83       	std	Y+6, r18	; 0x06
    185c:	8e 81       	ldd	r24, Y+6	; 0x06
    185e:	9f 81       	ldd	r25, Y+7	; 0x07
    1860:	83 30       	cpi	r24, 0x03	; 3
    1862:	91 05       	cpc	r25, r1
    1864:	09 f4       	brne	.+2      	; 0x1868 <DIO_voidGetPinValue+0x246>
    1866:	3e c0       	rjmp	.+124    	; 0x18e4 <DIO_voidGetPinValue+0x2c2>
    1868:	2e 81       	ldd	r18, Y+6	; 0x06
    186a:	3f 81       	ldd	r19, Y+7	; 0x07
    186c:	24 30       	cpi	r18, 0x04	; 4
    186e:	31 05       	cpc	r19, r1
    1870:	7c f4       	brge	.+30     	; 0x1890 <DIO_voidGetPinValue+0x26e>
    1872:	8e 81       	ldd	r24, Y+6	; 0x06
    1874:	9f 81       	ldd	r25, Y+7	; 0x07
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	91 05       	cpc	r25, r1
    187a:	29 f1       	breq	.+74     	; 0x18c6 <DIO_voidGetPinValue+0x2a4>
    187c:	2e 81       	ldd	r18, Y+6	; 0x06
    187e:	3f 81       	ldd	r19, Y+7	; 0x07
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	3c f5       	brge	.+78     	; 0x18d4 <DIO_voidGetPinValue+0x2b2>
    1886:	8e 81       	ldd	r24, Y+6	; 0x06
    1888:	9f 81       	ldd	r25, Y+7	; 0x07
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	b1 f0       	breq	.+44     	; 0x18ba <DIO_voidGetPinValue+0x298>
    188e:	ca c0       	rjmp	.+404    	; 0x1a24 <DIO_voidGetPinValue+0x402>
    1890:	2e 81       	ldd	r18, Y+6	; 0x06
    1892:	3f 81       	ldd	r19, Y+7	; 0x07
    1894:	25 30       	cpi	r18, 0x05	; 5
    1896:	31 05       	cpc	r19, r1
    1898:	b1 f1       	breq	.+108    	; 0x1906 <DIO_voidGetPinValue+0x2e4>
    189a:	8e 81       	ldd	r24, Y+6	; 0x06
    189c:	9f 81       	ldd	r25, Y+7	; 0x07
    189e:	85 30       	cpi	r24, 0x05	; 5
    18a0:	91 05       	cpc	r25, r1
    18a2:	4c f1       	brlt	.+82     	; 0x18f6 <DIO_voidGetPinValue+0x2d4>
    18a4:	2e 81       	ldd	r18, Y+6	; 0x06
    18a6:	3f 81       	ldd	r19, Y+7	; 0x07
    18a8:	26 30       	cpi	r18, 0x06	; 6
    18aa:	31 05       	cpc	r19, r1
    18ac:	a9 f1       	breq	.+106    	; 0x1918 <DIO_voidGetPinValue+0x2f6>
    18ae:	8e 81       	ldd	r24, Y+6	; 0x06
    18b0:	9f 81       	ldd	r25, Y+7	; 0x07
    18b2:	87 30       	cpi	r24, 0x07	; 7
    18b4:	91 05       	cpc	r25, r1
    18b6:	d1 f1       	breq	.+116    	; 0x192c <DIO_voidGetPinValue+0x30a>
    18b8:	b5 c0       	rjmp	.+362    	; 0x1a24 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PINC.Bit.B0;
    18ba:	e0 e3       	ldi	r30, 0x30	; 48
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	83 81       	ldd	r24, Z+3	; 0x03
    18c0:	81 70       	andi	r24, 0x01	; 1
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	af c0       	rjmp	.+350    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PINC.Bit.B1;
    18c6:	e0 e3       	ldi	r30, 0x30	; 48
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	83 81       	ldd	r24, Z+3	; 0x03
    18cc:	86 95       	lsr	r24
    18ce:	81 70       	andi	r24, 0x01	; 1
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	a8 c0       	rjmp	.+336    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PINC.Bit.B2;
    18d4:	e0 e3       	ldi	r30, 0x30	; 48
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	83 81       	ldd	r24, Z+3	; 0x03
    18da:	86 95       	lsr	r24
    18dc:	86 95       	lsr	r24
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	a0 c0       	rjmp	.+320    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PINC.Bit.B3;
    18e4:	e0 e3       	ldi	r30, 0x30	; 48
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	83 81       	ldd	r24, Z+3	; 0x03
    18ea:	86 95       	lsr	r24
    18ec:	86 95       	lsr	r24
    18ee:	86 95       	lsr	r24
    18f0:	81 70       	andi	r24, 0x01	; 1
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	97 c0       	rjmp	.+302    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PINC.Bit.B4;
    18f6:	e0 e3       	ldi	r30, 0x30	; 48
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	83 81       	ldd	r24, Z+3	; 0x03
    18fc:	82 95       	swap	r24
    18fe:	8f 70       	andi	r24, 0x0F	; 15
    1900:	81 70       	andi	r24, 0x01	; 1
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	8f c0       	rjmp	.+286    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PINC.Bit.B5;
    1906:	e0 e3       	ldi	r30, 0x30	; 48
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	83 81       	ldd	r24, Z+3	; 0x03
    190c:	82 95       	swap	r24
    190e:	86 95       	lsr	r24
    1910:	87 70       	andi	r24, 0x07	; 7
    1912:	81 70       	andi	r24, 0x01	; 1
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	86 c0       	rjmp	.+268    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PINC.Bit.B6;
    1918:	e0 e3       	ldi	r30, 0x30	; 48
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	83 81       	ldd	r24, Z+3	; 0x03
    191e:	82 95       	swap	r24
    1920:	86 95       	lsr	r24
    1922:	86 95       	lsr	r24
    1924:	83 70       	andi	r24, 0x03	; 3
    1926:	81 70       	andi	r24, 0x01	; 1
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	7c c0       	rjmp	.+248    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PINC.Bit.B7;
    192c:	e0 e3       	ldi	r30, 0x30	; 48
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	83 81       	ldd	r24, Z+3	; 0x03
    1932:	88 1f       	adc	r24, r24
    1934:	88 27       	eor	r24, r24
    1936:	88 1f       	adc	r24, r24
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	74 c0       	rjmp	.+232    	; 0x1a24 <DIO_voidGetPinValue+0x402>
				default: break;
			}
			break;

		case PORT_D:
			switch(Copy_PinId)
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	3d 83       	std	Y+5, r19	; 0x05
    1944:	2c 83       	std	Y+4, r18	; 0x04
    1946:	8c 81       	ldd	r24, Y+4	; 0x04
    1948:	9d 81       	ldd	r25, Y+5	; 0x05
    194a:	83 30       	cpi	r24, 0x03	; 3
    194c:	91 05       	cpc	r25, r1
    194e:	09 f4       	brne	.+2      	; 0x1952 <DIO_voidGetPinValue+0x330>
    1950:	3e c0       	rjmp	.+124    	; 0x19ce <DIO_voidGetPinValue+0x3ac>
    1952:	2c 81       	ldd	r18, Y+4	; 0x04
    1954:	3d 81       	ldd	r19, Y+5	; 0x05
    1956:	24 30       	cpi	r18, 0x04	; 4
    1958:	31 05       	cpc	r19, r1
    195a:	7c f4       	brge	.+30     	; 0x197a <DIO_voidGetPinValue+0x358>
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	9d 81       	ldd	r25, Y+5	; 0x05
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	91 05       	cpc	r25, r1
    1964:	29 f1       	breq	.+74     	; 0x19b0 <DIO_voidGetPinValue+0x38e>
    1966:	2c 81       	ldd	r18, Y+4	; 0x04
    1968:	3d 81       	ldd	r19, Y+5	; 0x05
    196a:	22 30       	cpi	r18, 0x02	; 2
    196c:	31 05       	cpc	r19, r1
    196e:	3c f5       	brge	.+78     	; 0x19be <DIO_voidGetPinValue+0x39c>
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	b1 f0       	breq	.+44     	; 0x19a4 <DIO_voidGetPinValue+0x382>
    1978:	55 c0       	rjmp	.+170    	; 0x1a24 <DIO_voidGetPinValue+0x402>
    197a:	2c 81       	ldd	r18, Y+4	; 0x04
    197c:	3d 81       	ldd	r19, Y+5	; 0x05
    197e:	25 30       	cpi	r18, 0x05	; 5
    1980:	31 05       	cpc	r19, r1
    1982:	b1 f1       	breq	.+108    	; 0x19f0 <DIO_voidGetPinValue+0x3ce>
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	9d 81       	ldd	r25, Y+5	; 0x05
    1988:	85 30       	cpi	r24, 0x05	; 5
    198a:	91 05       	cpc	r25, r1
    198c:	4c f1       	brlt	.+82     	; 0x19e0 <DIO_voidGetPinValue+0x3be>
    198e:	2c 81       	ldd	r18, Y+4	; 0x04
    1990:	3d 81       	ldd	r19, Y+5	; 0x05
    1992:	26 30       	cpi	r18, 0x06	; 6
    1994:	31 05       	cpc	r19, r1
    1996:	a9 f1       	breq	.+106    	; 0x1a02 <DIO_voidGetPinValue+0x3e0>
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	9d 81       	ldd	r25, Y+5	; 0x05
    199c:	87 30       	cpi	r24, 0x07	; 7
    199e:	91 05       	cpc	r25, r1
    19a0:	d1 f1       	breq	.+116    	; 0x1a16 <DIO_voidGetPinValue+0x3f4>
    19a2:	40 c0       	rjmp	.+128    	; 0x1a24 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PIND.Bit.B0;
    19a4:	e0 e3       	ldi	r30, 0x30	; 48
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	81 70       	andi	r24, 0x01	; 1
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	3a c0       	rjmp	.+116    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PIND.Bit.B1;
    19b0:	e0 e3       	ldi	r30, 0x30	; 48
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	86 95       	lsr	r24
    19b8:	81 70       	andi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	33 c0       	rjmp	.+102    	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PIND.Bit.B2;
    19be:	e0 e3       	ldi	r30, 0x30	; 48
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	86 95       	lsr	r24
    19c6:	86 95       	lsr	r24
    19c8:	81 70       	andi	r24, 0x01	; 1
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	2b c0       	rjmp	.+86     	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PIND.Bit.B3;
    19ce:	e0 e3       	ldi	r30, 0x30	; 48
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	86 95       	lsr	r24
    19d6:	86 95       	lsr	r24
    19d8:	86 95       	lsr	r24
    19da:	81 70       	andi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	22 c0       	rjmp	.+68     	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PIND.Bit.B4;
    19e0:	e0 e3       	ldi	r30, 0x30	; 48
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	82 95       	swap	r24
    19e8:	8f 70       	andi	r24, 0x0F	; 15
    19ea:	81 70       	andi	r24, 0x01	; 1
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	1a c0       	rjmp	.+52     	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PIND.Bit.B5;
    19f0:	e0 e3       	ldi	r30, 0x30	; 48
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	82 95       	swap	r24
    19f8:	86 95       	lsr	r24
    19fa:	87 70       	andi	r24, 0x07	; 7
    19fc:	81 70       	andi	r24, 0x01	; 1
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	11 c0       	rjmp	.+34     	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PIND.Bit.B6;
    1a02:	e0 e3       	ldi	r30, 0x30	; 48
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	82 95       	swap	r24
    1a0a:	86 95       	lsr	r24
    1a0c:	86 95       	lsr	r24
    1a0e:	83 70       	andi	r24, 0x03	; 3
    1a10:	81 70       	andi	r24, 0x01	; 1
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	07 c0       	rjmp	.+14     	; 0x1a24 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PIND.Bit.B7;
    1a16:	e0 e3       	ldi	r30, 0x30	; 48
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	88 1f       	adc	r24, r24
    1a1e:	88 27       	eor	r24, r24
    1a20:	88 1f       	adc	r24, r24
    1a22:	89 83       	std	Y+1, r24	; 0x01
						break;
				default: break;
			}
			break;
	}
	return Local_u8Pin;
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a26:	2d 96       	adiw	r28, 0x0d	; 13
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <DIO_voidSetPortirection>:

void DIO_voidSetPortirection(PORT_t Copy_PortId,DIRECTION_t Copy_Direction)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <DIO_voidSetPortirection+0x6>
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <DIO_voidSetPortirection+0x8>
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PortId)
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	3c 83       	std	Y+4, r19	; 0x04
    1a50:	2b 83       	std	Y+3, r18	; 0x03
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	91 05       	cpc	r25, r1
    1a5a:	21 f1       	breq	.+72     	; 0x1aa4 <DIO_voidSetPortirection+0x6c>
    1a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <DIO_voidSetPortirection+0x38>
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	61 f0       	breq	.+24     	; 0x1a86 <DIO_voidSetPortirection+0x4e>
    1a6e:	46 c0       	rjmp	.+140    	; 0x1afc <DIO_voidSetPortirection+0xc4>
    1a70:	2b 81       	ldd	r18, Y+3	; 0x03
    1a72:	3c 81       	ldd	r19, Y+4	; 0x04
    1a74:	22 30       	cpi	r18, 0x02	; 2
    1a76:	31 05       	cpc	r19, r1
    1a78:	21 f1       	breq	.+72     	; 0x1ac2 <DIO_voidSetPortirection+0x8a>
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	83 30       	cpi	r24, 0x03	; 3
    1a80:	91 05       	cpc	r25, r1
    1a82:	71 f1       	breq	.+92     	; 0x1ae0 <DIO_voidSetPortirection+0xa8>
    1a84:	3b c0       	rjmp	.+118    	; 0x1afc <DIO_voidSetPortirection+0xc4>
		{
			case PORT_A:
				if(Copy_Direction == INPUT)
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	88 23       	and	r24, r24
    1a8a:	21 f4       	brne	.+8      	; 0x1a94 <DIO_voidSetPortirection+0x5c>
				{
					DIO->DDRA.All_Bits = 0;
    1a8c:	e0 e3       	ldi	r30, 0x30	; 48
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	12 86       	std	Z+10, r1	; 0x0a
    1a92:	34 c0       	rjmp	.+104    	; 0x1afc <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	89 f5       	brne	.+98     	; 0x1afc <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRA.All_Bits = 0xFF;
    1a9a:	e0 e3       	ldi	r30, 0x30	; 48
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	8f ef       	ldi	r24, 0xFF	; 255
    1aa0:	82 87       	std	Z+10, r24	; 0x0a
    1aa2:	2c c0       	rjmp	.+88     	; 0x1afc <DIO_voidSetPortirection+0xc4>

				}
				break;

			case PORT_B:
				if(Copy_Direction == INPUT)
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	88 23       	and	r24, r24
    1aa8:	21 f4       	brne	.+8      	; 0x1ab2 <DIO_voidSetPortirection+0x7a>
				{
					DIO->DDRB.All_Bits = 0;
    1aaa:	e0 e3       	ldi	r30, 0x30	; 48
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	17 82       	std	Z+7, r1	; 0x07
    1ab0:	25 c0       	rjmp	.+74     	; 0x1afc <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	11 f5       	brne	.+68     	; 0x1afc <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRB.All_Bits = 0xFF;
    1ab8:	e0 e3       	ldi	r30, 0x30	; 48
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	8f ef       	ldi	r24, 0xFF	; 255
    1abe:	87 83       	std	Z+7, r24	; 0x07
    1ac0:	1d c0       	rjmp	.+58     	; 0x1afc <DIO_voidSetPortirection+0xc4>
				}
				break;


			case PORT_C:
				if(Copy_Direction == INPUT)
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	88 23       	and	r24, r24
    1ac6:	21 f4       	brne	.+8      	; 0x1ad0 <DIO_voidSetPortirection+0x98>
				{
					DIO->DDRC.All_Bits = 0;
    1ac8:	e0 e3       	ldi	r30, 0x30	; 48
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	14 82       	std	Z+4, r1	; 0x04
    1ace:	16 c0       	rjmp	.+44     	; 0x1afc <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	99 f4       	brne	.+38     	; 0x1afc <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRC.All_Bits = 0xFF;
    1ad6:	e0 e3       	ldi	r30, 0x30	; 48
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	84 83       	std	Z+4, r24	; 0x04
    1ade:	0e c0       	rjmp	.+28     	; 0x1afc <DIO_voidSetPortirection+0xc4>

				}
				break;

			case PORT_D:
				if(Copy_Direction == INPUT)
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	88 23       	and	r24, r24
    1ae4:	21 f4       	brne	.+8      	; 0x1aee <DIO_voidSetPortirection+0xb6>
				{
					DIO->DDRD.All_Bits = 0;
    1ae6:	e0 e3       	ldi	r30, 0x30	; 48
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	11 82       	std	Z+1, r1	; 0x01
    1aec:	07 c0       	rjmp	.+14     	; 0x1afc <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	21 f4       	brne	.+8      	; 0x1afc <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRD.All_Bits = 0xFF;
    1af4:	e0 e3       	ldi	r30, 0x30	; 48
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	8f ef       	ldi	r24, 0xFF	; 255
    1afa:	81 83       	std	Z+1, r24	; 0x01

				}
				break;
		}
}
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(PORT_t Copy_PortId,VALUE_t Copy_Value)
{
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <DIO_voidSetPortValue+0x6>
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <DIO_voidSetPortValue+0x8>
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PortId)
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	3c 83       	std	Y+4, r19	; 0x04
    1b22:	2b 83       	std	Y+3, r18	; 0x03
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	21 f1       	breq	.+72     	; 0x1b76 <DIO_voidSetPortValue+0x6c>
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	3c 81       	ldd	r19, Y+4	; 0x04
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <DIO_voidSetPortValue+0x38>
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	61 f0       	breq	.+24     	; 0x1b58 <DIO_voidSetPortValue+0x4e>
    1b40:	46 c0       	rjmp	.+140    	; 0x1bce <DIO_voidSetPortValue+0xc4>
    1b42:	2b 81       	ldd	r18, Y+3	; 0x03
    1b44:	3c 81       	ldd	r19, Y+4	; 0x04
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	21 f1       	breq	.+72     	; 0x1b94 <DIO_voidSetPortValue+0x8a>
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	83 30       	cpi	r24, 0x03	; 3
    1b52:	91 05       	cpc	r25, r1
    1b54:	71 f1       	breq	.+92     	; 0x1bb2 <DIO_voidSetPortValue+0xa8>
    1b56:	3b c0       	rjmp	.+118    	; 0x1bce <DIO_voidSetPortValue+0xc4>
		{
			case PORT_A:
				if(Copy_Value == HIGH)
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	29 f4       	brne	.+10     	; 0x1b68 <DIO_voidSetPortValue+0x5e>
				{
					DIO->PORTA.All_Bits = 0xFF;
    1b5e:	e0 e3       	ldi	r30, 0x30	; 48
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	83 87       	std	Z+11, r24	; 0x0b
    1b66:	33 c0       	rjmp	.+102    	; 0x1bce <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	88 23       	and	r24, r24
    1b6c:	81 f5       	brne	.+96     	; 0x1bce <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTA.All_Bits = 0;
    1b6e:	e0 e3       	ldi	r30, 0x30	; 48
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	13 86       	std	Z+11, r1	; 0x0b
    1b74:	2c c0       	rjmp	.+88     	; 0x1bce <DIO_voidSetPortValue+0xc4>

				}
				break;

			case PORT_B:
				if(Copy_Value == HIGH)
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	29 f4       	brne	.+10     	; 0x1b86 <DIO_voidSetPortValue+0x7c>
				{
					DIO->PORTB.All_Bits = 0xFF;
    1b7c:	e0 e3       	ldi	r30, 0x30	; 48
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	80 87       	std	Z+8, r24	; 0x08
    1b84:	24 c0       	rjmp	.+72     	; 0x1bce <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	88 23       	and	r24, r24
    1b8a:	09 f5       	brne	.+66     	; 0x1bce <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTB.All_Bits = 0;
    1b8c:	e0 e3       	ldi	r30, 0x30	; 48
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	10 86       	std	Z+8, r1	; 0x08
    1b92:	1d c0       	rjmp	.+58     	; 0x1bce <DIO_voidSetPortValue+0xc4>
				}
				break;


			case PORT_C:
				if(Copy_Value == HIGH)
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	29 f4       	brne	.+10     	; 0x1ba4 <DIO_voidSetPortValue+0x9a>
				{
					DIO->PORTC.All_Bits = 0xFF;
    1b9a:	e0 e3       	ldi	r30, 0x30	; 48
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ba0:	85 83       	std	Z+5, r24	; 0x05
    1ba2:	15 c0       	rjmp	.+42     	; 0x1bce <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	88 23       	and	r24, r24
    1ba8:	91 f4       	brne	.+36     	; 0x1bce <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTC.All_Bits = 0;
    1baa:	e0 e3       	ldi	r30, 0x30	; 48
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	15 82       	std	Z+5, r1	; 0x05
    1bb0:	0e c0       	rjmp	.+28     	; 0x1bce <DIO_voidSetPortValue+0xc4>

				}
				break;

			case PORT_D:
				if(Copy_Value == HIGH)
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	29 f4       	brne	.+10     	; 0x1bc2 <DIO_voidSetPortValue+0xb8>
				{
					DIO->PORTD.All_Bits = 0xFF;
    1bb8:	e0 e3       	ldi	r30, 0x30	; 48
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	8f ef       	ldi	r24, 0xFF	; 255
    1bbe:	82 83       	std	Z+2, r24	; 0x02
    1bc0:	06 c0       	rjmp	.+12     	; 0x1bce <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	88 23       	and	r24, r24
    1bc6:	19 f4       	brne	.+6      	; 0x1bce <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTD.All_Bits = 0;
    1bc8:	e0 e3       	ldi	r30, 0x30	; 48
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	12 82       	std	Z+2, r1	; 0x02

				}
				break;
		}
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <DIO_voidGetPortValue>:
u8 DIO_voidGetPortValue(PORT_t Copy_PortId)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <DIO_voidGetPortValue+0x6>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <DIO_voidGetPortValue+0x8>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Pin;
	switch(Copy_PortId)
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	3c 83       	std	Y+4, r19	; 0x04
    1bf2:	2b 83       	std	Y+3, r18	; 0x03
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	d1 f0       	breq	.+52     	; 0x1c32 <DIO_voidGetPortValue+0x56>
    1bfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1c00:	3c 81       	ldd	r19, Y+4	; 0x04
    1c02:	22 30       	cpi	r18, 0x02	; 2
    1c04:	31 05       	cpc	r19, r1
    1c06:	2c f4       	brge	.+10     	; 0x1c12 <DIO_voidGetPortValue+0x36>
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	61 f0       	breq	.+24     	; 0x1c28 <DIO_voidGetPortValue+0x4c>
    1c10:	1e c0       	rjmp	.+60     	; 0x1c4e <DIO_voidGetPortValue+0x72>
    1c12:	2b 81       	ldd	r18, Y+3	; 0x03
    1c14:	3c 81       	ldd	r19, Y+4	; 0x04
    1c16:	22 30       	cpi	r18, 0x02	; 2
    1c18:	31 05       	cpc	r19, r1
    1c1a:	81 f0       	breq	.+32     	; 0x1c3c <DIO_voidGetPortValue+0x60>
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	83 30       	cpi	r24, 0x03	; 3
    1c22:	91 05       	cpc	r25, r1
    1c24:	81 f0       	breq	.+32     	; 0x1c46 <DIO_voidGetPortValue+0x6a>
    1c26:	13 c0       	rjmp	.+38     	; 0x1c4e <DIO_voidGetPortValue+0x72>
	{
		case PORT_A:
			Local_u8Pin = DIO->PINA.All_Bits;
    1c28:	e0 e3       	ldi	r30, 0x30	; 48
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	81 85       	ldd	r24, Z+9	; 0x09
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	0e c0       	rjmp	.+28     	; 0x1c4e <DIO_voidGetPortValue+0x72>
		break;
		case PORT_B:
			Local_u8Pin = DIO->PINB.All_Bits;
    1c32:	e0 e3       	ldi	r30, 0x30	; 48
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	86 81       	ldd	r24, Z+6	; 0x06
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	09 c0       	rjmp	.+18     	; 0x1c4e <DIO_voidGetPortValue+0x72>
		break;
		case PORT_C:
			Local_u8Pin = DIO->PINC.All_Bits;
    1c3c:	e0 e3       	ldi	r30, 0x30	; 48
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	83 81       	ldd	r24, Z+3	; 0x03
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <DIO_voidGetPortValue+0x72>

		break;
		case PORT_D:
			Local_u8Pin = DIO->PIND.All_Bits;
    1c46:	e0 e3       	ldi	r30, 0x30	; 48
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: break;
	}
	return Local_u8Pin;
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <H_LCD_void_Init>:
				};
				
 
 
void H_LCD_void_Init(void)
 {
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	6e 97       	sbiw	r28, 0x1e	; 30
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
	/* SET Direction as OUTPUT for RS,RW,EN */
	for(u8 i = 0; i< 6 ; i+=2)
    1c72:	1e 8e       	std	Y+30, r1	; 0x1e
    1c74:	17 c0       	rjmp	.+46     	; 0x1ca4 <H_LCD_void_Init+0x46>
	{
		DIO_voidSetPinDirection(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],OUTPUT);
    1c76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	ea 58       	subi	r30, 0x8A	; 138
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	20 81       	ld	r18, Z
    1c84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c86:	88 2f       	mov	r24, r24
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	01 96       	adiw	r24, 0x01	; 1
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	ea 58       	subi	r30, 0x8A	; 138
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	90 81       	ld	r25, Z
    1c94:	82 2f       	mov	r24, r18
    1c96:	69 2f       	mov	r22, r25
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
 
 
void H_LCD_void_Init(void)
 {
	/* SET Direction as OUTPUT for RS,RW,EN */
	for(u8 i = 0; i< 6 ; i+=2)
    1c9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ca0:	8e 5f       	subi	r24, 0xFE	; 254
    1ca2:	8e 8f       	std	Y+30, r24	; 0x1e
    1ca4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ca6:	86 30       	cpi	r24, 0x06	; 6
    1ca8:	30 f3       	brcs	.-52     	; 0x1c76 <H_LCD_void_Init+0x18>
		H_LCD_void_sendCommand(0b00000110);



	#elif LCD_MODE == MODE_4BIT
	 	for(u8 i = 14; i<22;i+=2)
    1caa:	8e e0       	ldi	r24, 0x0E	; 14
    1cac:	8d 8f       	std	Y+29, r24	; 0x1d
    1cae:	17 c0       	rjmp	.+46     	; 0x1cde <H_LCD_void_Init+0x80>
		{
			DIO_voidSetPinDirection(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],OUTPUT);
    1cb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	ea 58       	subi	r30, 0x8A	; 138
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	20 81       	ld	r18, Z
    1cbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	01 96       	adiw	r24, 0x01	; 1
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	ea 58       	subi	r30, 0x8A	; 138
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	90 81       	ld	r25, Z
    1cce:	82 2f       	mov	r24, r18
    1cd0:	69 2f       	mov	r22, r25
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
		H_LCD_void_sendCommand(0b00000110);



	#elif LCD_MODE == MODE_4BIT
	 	for(u8 i = 14; i<22;i+=2)
    1cd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cda:	8e 5f       	subi	r24, 0xFE	; 254
    1cdc:	8d 8f       	std	Y+29, r24	; 0x1d
    1cde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ce0:	86 31       	cpi	r24, 0x16	; 22
    1ce2:	30 f3       	brcs	.-52     	; 0x1cb0 <H_LCD_void_Init+0x52>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a8 e4       	ldi	r26, 0x48	; 72
    1cea:	b2 e4       	ldi	r27, 0x42	; 66
    1cec:	89 8f       	std	Y+25, r24	; 0x19
    1cee:	9a 8f       	std	Y+26, r25	; 0x1a
    1cf0:	ab 8f       	std	Y+27, r26	; 0x1b
    1cf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a e7       	ldi	r20, 0x7A	; 122
    1d02:	55 e4       	ldi	r21, 0x45	; 69
    1d04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	8d 8b       	std	Y+21, r24	; 0x15
    1d0e:	9e 8b       	std	Y+22, r25	; 0x16
    1d10:	af 8b       	std	Y+23, r26	; 0x17
    1d12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d14:	6d 89       	ldd	r22, Y+21	; 0x15
    1d16:	7e 89       	ldd	r23, Y+22	; 0x16
    1d18:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <H_LCD_void_Init+0xd8>
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
    1d34:	3f c0       	rjmp	.+126    	; 0x1db4 <H_LCD_void_Init+0x156>
	else if (__tmp > 65535)
    1d36:	6d 89       	ldd	r22, Y+21	; 0x15
    1d38:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	3f ef       	ldi	r19, 0xFF	; 255
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	57 e4       	ldi	r21, 0x47	; 71
    1d46:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	4c f5       	brge	.+82     	; 0x1da0 <H_LCD_void_Init+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e2       	ldi	r20, 0x20	; 32
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9c 8b       	std	Y+20, r25	; 0x14
    1d74:	8b 8b       	std	Y+19, r24	; 0x13
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <H_LCD_void_Init+0x138>
    1d78:	80 e9       	ldi	r24, 0x90	; 144
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	9a 8b       	std	Y+18, r25	; 0x12
    1d7e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d80:	89 89       	ldd	r24, Y+17	; 0x11
    1d82:	9a 89       	ldd	r25, Y+18	; 0x12
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <H_LCD_void_Init+0x126>
    1d88:	9a 8b       	std	Y+18, r25	; 0x12
    1d8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	9c 8b       	std	Y+20, r25	; 0x14
    1d94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	8b 89       	ldd	r24, Y+19	; 0x13
    1d98:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	69 f7       	brne	.-38     	; 0x1d78 <H_LCD_void_Init+0x11a>
    1d9e:	14 c0       	rjmp	.+40     	; 0x1dc8 <H_LCD_void_Init+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da0:	6d 89       	ldd	r22, Y+21	; 0x15
    1da2:	7e 89       	ldd	r23, Y+22	; 0x16
    1da4:	8f 89       	ldd	r24, Y+23	; 0x17
    1da6:	98 8d       	ldd	r25, Y+24	; 0x18
    1da8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9c 8b       	std	Y+20, r25	; 0x14
    1db2:	8b 8b       	std	Y+19, r24	; 0x13
    1db4:	8b 89       	ldd	r24, Y+19	; 0x13
    1db6:	9c 89       	ldd	r25, Y+20	; 0x14
    1db8:	98 8b       	std	Y+16, r25	; 0x10
    1dba:	8f 87       	std	Y+15, r24	; 0x0f
    1dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dbe:	98 89       	ldd	r25, Y+16	; 0x10
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <H_LCD_void_Init+0x162>
    1dc4:	98 8b       	std	Y+16, r25	; 0x10
    1dc6:	8f 87       	std	Y+15, r24	; 0x0f
		
		// LCD Initialization
		_delay_ms(50);

		// Function Set
		H_LCD_void_sendCommand(0b00110011);
    1dc8:	83 e3       	ldi	r24, 0x33	; 51
    1dca:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <H_LCD_void_sendCommand>
		H_LCD_void_sendCommand(0b00110010);
    1dce:	82 e3       	ldi	r24, 0x32	; 50
    1dd0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <H_LCD_void_sendCommand>

		#if LCD_FONT == FONT_5X7
			#if   LCD_LINE == ONE_LINE
				H_LCD_void_sendCommand(0b00100011);
    1dd4:	83 e2       	ldi	r24, 0x23	; 35
    1dd6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <H_LCD_void_sendCommand>
		#elif LCD_FONT == FONT_5X10
			H_LCD_void_sendCommand(0b00100111);
		#endif

		// Display ON-OFF Controll => ON
		H_LCD_void_sendCommand(0b00001100);
    1dda:	8c e0       	ldi	r24, 0x0C	; 12
    1ddc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <H_LCD_void_sendCommand>

		//Display Clear
		H_LCD_void_sendCommand(0b00000001);
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <H_LCD_void_sendCommand>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e8       	ldi	r26, 0x80	; 128
    1dec:	bf e3       	ldi	r27, 0x3F	; 63
    1dee:	8b 87       	std	Y+11, r24	; 0x0b
    1df0:	9c 87       	std	Y+12, r25	; 0x0c
    1df2:	ad 87       	std	Y+13, r26	; 0x0d
    1df4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a e7       	ldi	r20, 0x7A	; 122
    1e04:	55 e4       	ldi	r21, 0x45	; 69
    1e06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8f 83       	std	Y+7, r24	; 0x07
    1e10:	98 87       	std	Y+8, r25	; 0x08
    1e12:	a9 87       	std	Y+9, r26	; 0x09
    1e14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <H_LCD_void_Init+0x1da>
		__ticks = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	3f c0       	rjmp	.+126    	; 0x1eb6 <H_LCD_void_Init+0x258>
	else if (__tmp > 65535)
    1e38:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3a:	78 85       	ldd	r23, Y+8	; 0x08
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	4c f5       	brge	.+82     	; 0x1ea2 <H_LCD_void_Init+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <H_LCD_void_Init+0x23a>
    1e7a:	80 e9       	ldi	r24, 0x90	; 144
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	8b 83       	std	Y+3, r24	; 0x03
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <H_LCD_void_Init+0x228>
    1e8a:	9c 83       	std	Y+4, r25	; 0x04
    1e8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	69 f7       	brne	.-38     	; 0x1e7a <H_LCD_void_Init+0x21c>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <H_LCD_void_Init+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea4:	78 85       	ldd	r23, Y+8	; 0x08
    1ea6:	89 85       	ldd	r24, Y+9	; 0x09
    1ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <H_LCD_void_Init+0x264>
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01
		
		_delay_ms(1);
		
		//Entry Mode Set  >> I/D=1 & S=0
		H_LCD_void_sendCommand(0b00000110);
    1eca:	86 e0       	ldi	r24, 0x06	; 6
    1ecc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <H_LCD_void_sendCommand>
		_delay_ms(1);
		H_LCD_void_sendCommand(0X06);
*/
	#endif
	
 }
    1ed0:	6e 96       	adiw	r28, 0x1e	; 30
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <H_LCD_void_sendData>:
	 
	 

	 
void H_LCD_void_sendData(u8 copy_u8data )
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	0f 92       	push	r0
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	89 83       	std	Y+1, r24	; 0x01
	// Write Data => RS = 1
	DIO_voidSetPinValue(LCD_RS_PORT_PIN,HIGH);
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	63 e0       	ldi	r22, 0x03	; 3
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_voidSetPinValue>


	// Send Data to Latch Function
	H_LCD_void_latchByte(copy_u8data);
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <H_LCD_void_latchByte>

}
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <H_LCD_void_sendCommand>:

void H_LCD_void_sendCommand(u8 copy_u8command)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	0f 92       	push	r0
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	89 83       	std	Y+1, r24	; 0x01
	// Write Instruction => RS = 0
	DIO_voidSetPinValue(LCD_RS_PORT_PIN,LOW);
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	63 e0       	ldi	r22, 0x03	; 3
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_voidSetPinValue>
	

	// Send Data to Latch Function
	H_LCD_void_latchByte(copy_u8command);
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <H_LCD_void_latchByte>

}
    1f22:	0f 90       	pop	r0
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <H_LCD_void_sendString>:


void H_LCD_void_sendString(const s8 *pstr) {
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	62 97       	sbiw	r28, 0x12	; 18
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	9a 8b       	std	Y+18, r25	; 0x12
    1f40:	89 8b       	std	Y+17, r24	; 0x11
    u8 i = 0;
    1f42:	18 8a       	std	Y+16, r1	; 0x10
    u8 line = 0;
    1f44:	1f 86       	std	Y+15, r1	; 0x0f
    1f46:	91 c0       	rjmp	.+290    	; 0x206a <H_LCD_void_sendString+0x140>

    while (pstr[i] != '\0') {
        H_LCD_void_sendData(pstr[i]);
    1f48:	88 89       	ldd	r24, Y+16	; 0x10
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	89 89       	ldd	r24, Y+17	; 0x11
    1f50:	9a 89       	ldd	r25, Y+18	; 0x12
    1f52:	fc 01       	movw	r30, r24
    1f54:	e2 0f       	add	r30, r18
    1f56:	f3 1f       	adc	r31, r19
    1f58:	80 81       	ld	r24, Z
    1f5a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <H_LCD_void_sendData>
        i++;
    1f5e:	88 89       	ldd	r24, Y+16	; 0x10
    1f60:	8f 5f       	subi	r24, 0xFF	; 255
    1f62:	88 8b       	std	Y+16, r24	; 0x10
        if (i % LCD_COLUMNS == 0) {
    1f64:	88 89       	ldd	r24, Y+16	; 0x10
    1f66:	94 e1       	ldi	r25, 0x14	; 20
    1f68:	69 2f       	mov	r22, r25
    1f6a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__udivmodqi4>
    1f6e:	89 2f       	mov	r24, r25
    1f70:	88 23       	and	r24, r24
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <H_LCD_void_sendString+0x4c>
    1f74:	7a c0       	rjmp	.+244    	; 0x206a <H_LCD_void_sendString+0x140>
            // New line after every `LCD_COLUMNS` characters
        	H_LCD_void_gotoXY(line++,0);
    1f76:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7a:	8f 5f       	subi	r24, 0xFF	; 255
    1f7c:	8f 87       	std	Y+15, r24	; 0x0f
    1f7e:	89 2f       	mov	r24, r25
    1f80:	60 e0       	ldi	r22, 0x00	; 0
    1f82:	0e 94 4a 10 	call	0x2094	; 0x2094 <H_LCD_void_gotoXY>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a0 e8       	ldi	r26, 0x80	; 128
    1f8c:	bf e3       	ldi	r27, 0x3F	; 63
    1f8e:	8b 87       	std	Y+11, r24	; 0x0b
    1f90:	9c 87       	std	Y+12, r25	; 0x0c
    1f92:	ad 87       	std	Y+13, r26	; 0x0d
    1f94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	4a e7       	ldi	r20, 0x7A	; 122
    1fa4:	55 e4       	ldi	r21, 0x45	; 69
    1fa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	8f 83       	std	Y+7, r24	; 0x07
    1fb0:	98 87       	std	Y+8, r25	; 0x08
    1fb2:	a9 87       	std	Y+9, r26	; 0x09
    1fb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb8:	78 85       	ldd	r23, Y+8	; 0x08
    1fba:	89 85       	ldd	r24, Y+9	; 0x09
    1fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e8       	ldi	r20, 0x80	; 128
    1fc4:	5f e3       	ldi	r21, 0x3F	; 63
    1fc6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fca:	88 23       	and	r24, r24
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <H_LCD_void_sendString+0xae>
		__ticks = 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
    1fd6:	3f c0       	rjmp	.+126    	; 0x2056 <H_LCD_void_sendString+0x12c>
	else if (__tmp > 65535)
    1fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fda:	78 85       	ldd	r23, Y+8	; 0x08
    1fdc:	89 85       	ldd	r24, Y+9	; 0x09
    1fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	3f ef       	ldi	r19, 0xFF	; 255
    1fe4:	4f e7       	ldi	r20, 0x7F	; 127
    1fe6:	57 e4       	ldi	r21, 0x47	; 71
    1fe8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fec:	18 16       	cp	r1, r24
    1fee:	4c f5       	brge	.+82     	; 0x2042 <H_LCD_void_sendString+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e2       	ldi	r20, 0x20	; 32
    1ffe:	51 e4       	ldi	r21, 0x41	; 65
    2000:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	bc 01       	movw	r22, r24
    200a:	cd 01       	movw	r24, r26
    200c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
    2018:	0f c0       	rjmp	.+30     	; 0x2038 <H_LCD_void_sendString+0x10e>
    201a:	80 e9       	ldi	r24, 0x90	; 144
    201c:	91 e0       	ldi	r25, 0x01	; 1
    201e:	9c 83       	std	Y+4, r25	; 0x04
    2020:	8b 83       	std	Y+3, r24	; 0x03
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <H_LCD_void_sendString+0xfc>
    202a:	9c 83       	std	Y+4, r25	; 0x04
    202c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	9e 83       	std	Y+6, r25	; 0x06
    2036:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2038:	8d 81       	ldd	r24, Y+5	; 0x05
    203a:	9e 81       	ldd	r25, Y+6	; 0x06
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	69 f7       	brne	.-38     	; 0x201a <H_LCD_void_sendString+0xf0>
    2040:	14 c0       	rjmp	.+40     	; 0x206a <H_LCD_void_sendString+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2042:	6f 81       	ldd	r22, Y+7	; 0x07
    2044:	78 85       	ldd	r23, Y+8	; 0x08
    2046:	89 85       	ldd	r24, Y+9	; 0x09
    2048:	9a 85       	ldd	r25, Y+10	; 0x0a
    204a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9e 83       	std	Y+6, r25	; 0x06
    2054:	8d 83       	std	Y+5, r24	; 0x05
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	9a 83       	std	Y+2, r25	; 0x02
    205c:	89 83       	std	Y+1, r24	; 0x01
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	9a 81       	ldd	r25, Y+2	; 0x02
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <H_LCD_void_sendString+0x138>
    2066:	9a 83       	std	Y+2, r25	; 0x02
    2068:	89 83       	std	Y+1, r24	; 0x01

void H_LCD_void_sendString(const s8 *pstr) {
    u8 i = 0;
    u8 line = 0;

    while (pstr[i] != '\0') {
    206a:	88 89       	ldd	r24, Y+16	; 0x10
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	89 89       	ldd	r24, Y+17	; 0x11
    2072:	9a 89       	ldd	r25, Y+18	; 0x12
    2074:	fc 01       	movw	r30, r24
    2076:	e2 0f       	add	r30, r18
    2078:	f3 1f       	adc	r31, r19
    207a:	80 81       	ld	r24, Z
    207c:	88 23       	and	r24, r24
    207e:	09 f0       	breq	.+2      	; 0x2082 <H_LCD_void_sendString+0x158>
    2080:	63 cf       	rjmp	.-314    	; 0x1f48 <H_LCD_void_sendString+0x1e>
            // New line after every `LCD_COLUMNS` characters
        	H_LCD_void_gotoXY(line++,0);
			_delay_ms(1);
        }
    }
}
    2082:	62 96       	adiw	r28, 0x12	; 18
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <H_LCD_void_gotoXY>:


void H_LCD_void_gotoXY(u8 copy_u8Row, u8 copy_u8Col)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <H_LCD_void_gotoXY+0x6>
    209a:	00 d0       	rcall	.+0      	; 0x209c <H_LCD_void_gotoXY+0x8>
    209c:	00 d0       	rcall	.+0      	; 0x209e <H_LCD_void_gotoXY+0xa>
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	8d 83       	std	Y+5, r24	; 0x05
    20a4:	6e 83       	std	Y+6, r22	; 0x06
	// Row offsets for a 4x20 LCD
    u8 row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    20a6:	19 82       	std	Y+1, r1	; 0x01
    20a8:	80 e4       	ldi	r24, 0x40	; 64
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	84 e1       	ldi	r24, 0x14	; 20
    20ae:	8b 83       	std	Y+3, r24	; 0x03
    20b0:	84 e5       	ldi	r24, 0x54	; 84
    20b2:	8c 83       	std	Y+4, r24	; 0x04
    H_LCD_void_sendCommand(0x80 | (row_offsets[copy_u8Row] + copy_u8Col));
    20b4:	8d 81       	ldd	r24, Y+5	; 0x05
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	ce 01       	movw	r24, r28
    20bc:	01 96       	adiw	r24, 0x01	; 1
    20be:	fc 01       	movw	r30, r24
    20c0:	e2 0f       	add	r30, r18
    20c2:	f3 1f       	adc	r31, r19
    20c4:	90 81       	ld	r25, Z
    20c6:	8e 81       	ldd	r24, Y+6	; 0x06
    20c8:	89 0f       	add	r24, r25
    20ca:	80 68       	ori	r24, 0x80	; 128
    20cc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <H_LCD_void_sendCommand>
}
    20d0:	26 96       	adiw	r28, 0x06	; 6
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <H_LCD_void_sendIntNum>:


void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	68 97       	sbiw	r28, 0x18	; 24
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	6d 8b       	std	Y+21, r22	; 0x15
    20f8:	7e 8b       	std	Y+22, r23	; 0x16
    20fa:	8f 8b       	std	Y+23, r24	; 0x17
    20fc:	98 8f       	std	Y+24, r25	; 0x18
	// Buffer to store the converted integer as a string
    s8 buffer[20];
    // Convert the integer to a string
    itoa(copy_s32Num, buffer, 10);
    20fe:	8d 89       	ldd	r24, Y+21	; 0x15
    2100:	9e 89       	ldd	r25, Y+22	; 0x16
    2102:	9e 01       	movw	r18, r28
    2104:	2f 5f       	subi	r18, 0xFF	; 255
    2106:	3f 4f       	sbci	r19, 0xFF	; 255
    2108:	b9 01       	movw	r22, r18
    210a:	4a e0       	ldi	r20, 0x0A	; 10
    210c:	50 e0       	ldi	r21, 0x00	; 0
    210e:	0e 94 bf 13 	call	0x277e	; 0x277e <itoa>
    // Send the string to the LCD
    H_LCD_void_sendString(buffer);
    2112:	ce 01       	movw	r24, r28
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <H_LCD_void_sendString>
}
    211a:	68 96       	adiw	r28, 0x18	; 24
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <H_LCD_void_creatCustomChar>:

void H_LCD_void_creatCustomChar(const u8 *ArrPattern, u8 copy_u8charCode)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <H_LCD_void_creatCustomChar+0x6>
    2132:	00 d0       	rcall	.+0      	; 0x2134 <H_LCD_void_creatCustomChar+0x8>
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	9b 83       	std	Y+3, r25	; 0x03
    213a:	8a 83       	std	Y+2, r24	; 0x02
    213c:	6c 83       	std	Y+4, r22	; 0x04
    // Set CGRAM address to write the custom character (0 to 7)
    H_LCD_void_sendCommand(0x40 | (copy_u8charCode << 3));
    213e:	8c 81       	ldd	r24, Y+4	; 0x04
    2140:	88 2f       	mov	r24, r24
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	80 64       	ori	r24, 0x40	; 64
    2152:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <H_LCD_void_sendCommand>

    // Send the custom character pattern data
    for (u8 i = 0; i < 8; i++)
    2156:	19 82       	std	Y+1, r1	; 0x01
    2158:	0e c0       	rjmp	.+28     	; 0x2176 <H_LCD_void_creatCustomChar+0x4a>
    {
        H_LCD_void_sendData(ArrPattern[i]);
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	9b 81       	ldd	r25, Y+3	; 0x03
    2164:	fc 01       	movw	r30, r24
    2166:	e2 0f       	add	r30, r18
    2168:	f3 1f       	adc	r31, r19
    216a:	80 81       	ld	r24, Z
    216c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <H_LCD_void_sendData>
{
    // Set CGRAM address to write the custom character (0 to 7)
    H_LCD_void_sendCommand(0x40 | (copy_u8charCode << 3));

    // Send the custom character pattern data
    for (u8 i = 0; i < 8; i++)
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	8f 5f       	subi	r24, 0xFF	; 255
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	88 30       	cpi	r24, 0x08	; 8
    217a:	78 f3       	brcs	.-34     	; 0x215a <H_LCD_void_creatCustomChar+0x2e>
    {
        H_LCD_void_sendData(ArrPattern[i]);
    }
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <H_LCD_void_displayCustomChar>:

void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	0f 92       	push	r0
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	89 83       	std	Y+1, r24	; 0x01
    // Send the custom character using its character code (0 to 7)
    H_LCD_void_sendData(copy_u8charCode);
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <H_LCD_void_sendData>
}
    219c:	0f 90       	pop	r0
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <H_LCD_void_latchByte>:
/*******************************************************************************/
/*************************    Private Function      ****************************/
/*******************************************************************************/

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{	 
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	c7 54       	subi	r28, 0x47	; 71
    21ae:	d0 40       	sbci	r29, 0x00	; 0
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	8b af       	std	Y+59, r24	; 0x3b
	DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	62 e0       	ldi	r22, 0x02	; 2
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
		_delay_ms(5);

	#elif LCD_MODE == MODE_4BIT

		for(u8 i = 20; i>12;i-=2)
    21c6:	84 e1       	ldi	r24, 0x14	; 20
    21c8:	8a af       	std	Y+58, r24	; 0x3a
    21ca:	52 c0       	rjmp	.+164    	; 0x2270 <H_LCD_void_latchByte+0xcc>
		{
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-6)/2)));
    21cc:	8a ad       	ldd	r24, Y+58	; 0x3a
    21ce:	88 2f       	mov	r24, r24
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	fc 01       	movw	r30, r24
    21d4:	ea 58       	subi	r30, 0x8A	; 138
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	20 81       	ld	r18, Z
    21da:	24 96       	adiw	r28, 0x04	; 4
    21dc:	2f af       	std	Y+63, r18	; 0x3f
    21de:	24 97       	sbiw	r28, 0x04	; 4
    21e0:	8a ad       	ldd	r24, Y+58	; 0x3a
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	01 96       	adiw	r24, 0x01	; 1
    21e8:	fc 01       	movw	r30, r24
    21ea:	ea 58       	subi	r30, 0x8A	; 138
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	30 81       	ld	r19, Z
    21f0:	23 96       	adiw	r28, 0x03	; 3
    21f2:	3f af       	std	Y+63, r19	; 0x3f
    21f4:	23 97       	sbiw	r28, 0x03	; 3
    21f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	22 96       	adiw	r28, 0x02	; 2
    21fe:	3f af       	std	Y+63, r19	; 0x3f
    2200:	2e af       	std	Y+62, r18	; 0x3e
    2202:	22 97       	sbiw	r28, 0x02	; 2
    2204:	8a ad       	ldd	r24, Y+58	; 0x3a
    2206:	88 2f       	mov	r24, r24
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	06 97       	sbiw	r24, 0x06	; 6
    220c:	26 96       	adiw	r28, 0x06	; 6
    220e:	9f af       	std	Y+63, r25	; 0x3f
    2210:	8e af       	std	Y+62, r24	; 0x3e
    2212:	26 97       	sbiw	r28, 0x06	; 6
    2214:	26 96       	adiw	r28, 0x06	; 6
    2216:	8e ad       	ldd	r24, Y+62	; 0x3e
    2218:	9f ad       	ldd	r25, Y+63	; 0x3f
    221a:	26 97       	sbiw	r28, 0x06	; 6
    221c:	99 23       	and	r25, r25
    221e:	54 f4       	brge	.+20     	; 0x2234 <H_LCD_void_latchByte+0x90>
    2220:	26 96       	adiw	r28, 0x06	; 6
    2222:	2e ad       	ldd	r18, Y+62	; 0x3e
    2224:	3f ad       	ldd	r19, Y+63	; 0x3f
    2226:	26 97       	sbiw	r28, 0x06	; 6
    2228:	2f 5f       	subi	r18, 0xFF	; 255
    222a:	3f 4f       	sbci	r19, 0xFF	; 255
    222c:	26 96       	adiw	r28, 0x06	; 6
    222e:	3f af       	std	Y+63, r19	; 0x3f
    2230:	2e af       	std	Y+62, r18	; 0x3e
    2232:	26 97       	sbiw	r28, 0x06	; 6
    2234:	26 96       	adiw	r28, 0x06	; 6
    2236:	8e ad       	ldd	r24, Y+62	; 0x3e
    2238:	9f ad       	ldd	r25, Y+63	; 0x3f
    223a:	26 97       	sbiw	r28, 0x06	; 6
    223c:	95 95       	asr	r25
    223e:	87 95       	ror	r24
    2240:	22 96       	adiw	r28, 0x02	; 2
    2242:	2e ad       	ldd	r18, Y+62	; 0x3e
    2244:	3f ad       	ldd	r19, Y+63	; 0x3f
    2246:	22 97       	sbiw	r28, 0x02	; 2
    2248:	02 c0       	rjmp	.+4      	; 0x224e <H_LCD_void_latchByte+0xaa>
    224a:	35 95       	asr	r19
    224c:	27 95       	ror	r18
    224e:	8a 95       	dec	r24
    2250:	e2 f7       	brpl	.-8      	; 0x224a <H_LCD_void_latchByte+0xa6>
    2252:	c9 01       	movw	r24, r18
    2254:	98 2f       	mov	r25, r24
    2256:	91 70       	andi	r25, 0x01	; 1
    2258:	24 96       	adiw	r28, 0x04	; 4
    225a:	8f ad       	ldd	r24, Y+63	; 0x3f
    225c:	24 97       	sbiw	r28, 0x04	; 4
    225e:	23 96       	adiw	r28, 0x03	; 3
    2260:	6f ad       	ldd	r22, Y+63	; 0x3f
    2262:	23 97       	sbiw	r28, 0x03	; 3
    2264:	49 2f       	mov	r20, r25
    2266:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
		_delay_ms(5);

	#elif LCD_MODE == MODE_4BIT

		for(u8 i = 20; i>12;i-=2)
    226a:	8a ad       	ldd	r24, Y+58	; 0x3a
    226c:	82 50       	subi	r24, 0x02	; 2
    226e:	8a af       	std	Y+58, r24	; 0x3a
    2270:	8a ad       	ldd	r24, Y+58	; 0x3a
    2272:	8d 30       	cpi	r24, 0x0D	; 13
    2274:	08 f0       	brcs	.+2      	; 0x2278 <H_LCD_void_latchByte+0xd4>
    2276:	aa cf       	rjmp	.-172    	; 0x21cc <H_LCD_void_latchByte+0x28>
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-6)/2)));
		}

		// Falling Edge
		// Set Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,HIGH);
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	62 e0       	ldi	r22, 0x02	; 2
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_voidSetPinValue>
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	a0 e8       	ldi	r26, 0x80	; 128
    2288:	bf e3       	ldi	r27, 0x3F	; 63
    228a:	8d ab       	std	Y+53, r24	; 0x35
    228c:	9e ab       	std	Y+54, r25	; 0x36
    228e:	af ab       	std	Y+55, r26	; 0x37
    2290:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2292:	6d a9       	ldd	r22, Y+53	; 0x35
    2294:	7e a9       	ldd	r23, Y+54	; 0x36
    2296:	8f a9       	ldd	r24, Y+55	; 0x37
    2298:	98 ad       	ldd	r25, Y+56	; 0x38
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a e7       	ldi	r20, 0x7A	; 122
    22a0:	55 e4       	ldi	r21, 0x45	; 69
    22a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	89 ab       	std	Y+49, r24	; 0x31
    22ac:	9a ab       	std	Y+50, r25	; 0x32
    22ae:	ab ab       	std	Y+51, r26	; 0x33
    22b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22b2:	69 a9       	ldd	r22, Y+49	; 0x31
    22b4:	7a a9       	ldd	r23, Y+50	; 0x32
    22b6:	8b a9       	ldd	r24, Y+51	; 0x33
    22b8:	9c a9       	ldd	r25, Y+52	; 0x34
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <H_LCD_void_latchByte+0x130>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	98 ab       	std	Y+48, r25	; 0x30
    22d0:	8f a7       	std	Y+47, r24	; 0x2f
    22d2:	3f c0       	rjmp	.+126    	; 0x2352 <H_LCD_void_latchByte+0x1ae>
	else if (__tmp > 65535)
    22d4:	69 a9       	ldd	r22, Y+49	; 0x31
    22d6:	7a a9       	ldd	r23, Y+50	; 0x32
    22d8:	8b a9       	ldd	r24, Y+51	; 0x33
    22da:	9c a9       	ldd	r25, Y+52	; 0x34
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	57 e4       	ldi	r21, 0x47	; 71
    22e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22e8:	18 16       	cp	r1, r24
    22ea:	4c f5       	brge	.+82     	; 0x233e <H_LCD_void_latchByte+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ec:	6d a9       	ldd	r22, Y+53	; 0x35
    22ee:	7e a9       	ldd	r23, Y+54	; 0x36
    22f0:	8f a9       	ldd	r24, Y+55	; 0x37
    22f2:	98 ad       	ldd	r25, Y+56	; 0x38
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	98 ab       	std	Y+48, r25	; 0x30
    2312:	8f a7       	std	Y+47, r24	; 0x2f
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <H_LCD_void_latchByte+0x190>
    2316:	80 e9       	ldi	r24, 0x90	; 144
    2318:	91 e0       	ldi	r25, 0x01	; 1
    231a:	9e a7       	std	Y+46, r25	; 0x2e
    231c:	8d a7       	std	Y+45, r24	; 0x2d
    231e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2320:	9e a5       	ldd	r25, Y+46	; 0x2e
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <H_LCD_void_latchByte+0x17e>
    2326:	9e a7       	std	Y+46, r25	; 0x2e
    2328:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	8f a5       	ldd	r24, Y+47	; 0x2f
    232c:	98 a9       	ldd	r25, Y+48	; 0x30
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	98 ab       	std	Y+48, r25	; 0x30
    2332:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2334:	8f a5       	ldd	r24, Y+47	; 0x2f
    2336:	98 a9       	ldd	r25, Y+48	; 0x30
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	69 f7       	brne	.-38     	; 0x2316 <H_LCD_void_latchByte+0x172>
    233c:	14 c0       	rjmp	.+40     	; 0x2366 <H_LCD_void_latchByte+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233e:	69 a9       	ldd	r22, Y+49	; 0x31
    2340:	7a a9       	ldd	r23, Y+50	; 0x32
    2342:	8b a9       	ldd	r24, Y+51	; 0x33
    2344:	9c a9       	ldd	r25, Y+52	; 0x34
    2346:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	98 ab       	std	Y+48, r25	; 0x30
    2350:	8f a7       	std	Y+47, r24	; 0x2f
    2352:	8f a5       	ldd	r24, Y+47	; 0x2f
    2354:	98 a9       	ldd	r25, Y+48	; 0x30
    2356:	9c a7       	std	Y+44, r25	; 0x2c
    2358:	8b a7       	std	Y+43, r24	; 0x2b
    235a:	8b a5       	ldd	r24, Y+43	; 0x2b
    235c:	9c a5       	ldd	r25, Y+44	; 0x2c
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <H_LCD_void_latchByte+0x1ba>
    2362:	9c a7       	std	Y+44, r25	; 0x2c
    2364:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		// Reset Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	62 e0       	ldi	r22, 0x02	; 2
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_voidSetPinValue>
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	a0 ea       	ldi	r26, 0xA0	; 160
    2376:	b0 e4       	ldi	r27, 0x40	; 64
    2378:	8f a3       	std	Y+39, r24	; 0x27
    237a:	98 a7       	std	Y+40, r25	; 0x28
    237c:	a9 a7       	std	Y+41, r26	; 0x29
    237e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2380:	6f a1       	ldd	r22, Y+39	; 0x27
    2382:	78 a5       	ldd	r23, Y+40	; 0x28
    2384:	89 a5       	ldd	r24, Y+41	; 0x29
    2386:	9a a5       	ldd	r25, Y+42	; 0x2a
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4a e7       	ldi	r20, 0x7A	; 122
    238e:	55 e4       	ldi	r21, 0x45	; 69
    2390:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	8b a3       	std	Y+35, r24	; 0x23
    239a:	9c a3       	std	Y+36, r25	; 0x24
    239c:	ad a3       	std	Y+37, r26	; 0x25
    239e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23a0:	6b a1       	ldd	r22, Y+35	; 0x23
    23a2:	7c a1       	ldd	r23, Y+36	; 0x24
    23a4:	8d a1       	ldd	r24, Y+37	; 0x25
    23a6:	9e a1       	ldd	r25, Y+38	; 0x26
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e8       	ldi	r20, 0x80	; 128
    23ae:	5f e3       	ldi	r21, 0x3F	; 63
    23b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23b4:	88 23       	and	r24, r24
    23b6:	2c f4       	brge	.+10     	; 0x23c2 <H_LCD_void_latchByte+0x21e>
		__ticks = 1;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9a a3       	std	Y+34, r25	; 0x22
    23be:	89 a3       	std	Y+33, r24	; 0x21
    23c0:	3f c0       	rjmp	.+126    	; 0x2440 <H_LCD_void_latchByte+0x29c>
	else if (__tmp > 65535)
    23c2:	6b a1       	ldd	r22, Y+35	; 0x23
    23c4:	7c a1       	ldd	r23, Y+36	; 0x24
    23c6:	8d a1       	ldd	r24, Y+37	; 0x25
    23c8:	9e a1       	ldd	r25, Y+38	; 0x26
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	3f ef       	ldi	r19, 0xFF	; 255
    23ce:	4f e7       	ldi	r20, 0x7F	; 127
    23d0:	57 e4       	ldi	r21, 0x47	; 71
    23d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23d6:	18 16       	cp	r1, r24
    23d8:	4c f5       	brge	.+82     	; 0x242c <H_LCD_void_latchByte+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23da:	6f a1       	ldd	r22, Y+39	; 0x27
    23dc:	78 a5       	ldd	r23, Y+40	; 0x28
    23de:	89 a5       	ldd	r24, Y+41	; 0x29
    23e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e2       	ldi	r20, 0x20	; 32
    23e8:	51 e4       	ldi	r21, 0x41	; 65
    23ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	9a a3       	std	Y+34, r25	; 0x22
    2400:	89 a3       	std	Y+33, r24	; 0x21
    2402:	0f c0       	rjmp	.+30     	; 0x2422 <H_LCD_void_latchByte+0x27e>
    2404:	80 e9       	ldi	r24, 0x90	; 144
    2406:	91 e0       	ldi	r25, 0x01	; 1
    2408:	98 a3       	std	Y+32, r25	; 0x20
    240a:	8f 8f       	std	Y+31, r24	; 0x1f
    240c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    240e:	98 a1       	ldd	r25, Y+32	; 0x20
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <H_LCD_void_latchByte+0x26c>
    2414:	98 a3       	std	Y+32, r25	; 0x20
    2416:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2418:	89 a1       	ldd	r24, Y+33	; 0x21
    241a:	9a a1       	ldd	r25, Y+34	; 0x22
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	9a a3       	std	Y+34, r25	; 0x22
    2420:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2422:	89 a1       	ldd	r24, Y+33	; 0x21
    2424:	9a a1       	ldd	r25, Y+34	; 0x22
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	69 f7       	brne	.-38     	; 0x2404 <H_LCD_void_latchByte+0x260>
    242a:	14 c0       	rjmp	.+40     	; 0x2454 <H_LCD_void_latchByte+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242c:	6b a1       	ldd	r22, Y+35	; 0x23
    242e:	7c a1       	ldd	r23, Y+36	; 0x24
    2430:	8d a1       	ldd	r24, Y+37	; 0x25
    2432:	9e a1       	ldd	r25, Y+38	; 0x26
    2434:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9a a3       	std	Y+34, r25	; 0x22
    243e:	89 a3       	std	Y+33, r24	; 0x21
    2440:	89 a1       	ldd	r24, Y+33	; 0x21
    2442:	9a a1       	ldd	r25, Y+34	; 0x22
    2444:	9e 8f       	std	Y+30, r25	; 0x1e
    2446:	8d 8f       	std	Y+29, r24	; 0x1d
    2448:	8d 8d       	ldd	r24, Y+29	; 0x1d
    244a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <H_LCD_void_latchByte+0x2a8>
    2450:	9e 8f       	std	Y+30, r25	; 0x1e
    2452:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);


		for(u8 i = 20; i>12;i-=2)
    2454:	84 e1       	ldi	r24, 0x14	; 20
    2456:	89 af       	std	Y+57, r24	; 0x39
    2458:	46 c0       	rjmp	.+140    	; 0x24e6 <H_LCD_void_latchByte+0x342>
		{
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-14)/2)));
    245a:	89 ad       	ldd	r24, Y+57	; 0x39
    245c:	88 2f       	mov	r24, r24
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	fc 01       	movw	r30, r24
    2462:	ea 58       	subi	r30, 0x8A	; 138
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	30 81       	ld	r19, Z
    2468:	3f af       	std	Y+63, r19	; 0x3f
    246a:	89 ad       	ldd	r24, Y+57	; 0x39
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	fc 01       	movw	r30, r24
    2474:	ea 58       	subi	r30, 0x8A	; 138
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 81       	ld	r24, Z
    247a:	8e af       	std	Y+62, r24	; 0x3e
    247c:	8b ad       	ldd	r24, Y+59	; 0x3b
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	3d af       	std	Y+61, r19	; 0x3d
    2484:	2c af       	std	Y+60, r18	; 0x3c
    2486:	89 ad       	ldd	r24, Y+57	; 0x39
    2488:	88 2f       	mov	r24, r24
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	0e 97       	sbiw	r24, 0x0e	; 14
    248e:	28 96       	adiw	r28, 0x08	; 8
    2490:	9f af       	std	Y+63, r25	; 0x3f
    2492:	8e af       	std	Y+62, r24	; 0x3e
    2494:	28 97       	sbiw	r28, 0x08	; 8
    2496:	28 96       	adiw	r28, 0x08	; 8
    2498:	8e ad       	ldd	r24, Y+62	; 0x3e
    249a:	9f ad       	ldd	r25, Y+63	; 0x3f
    249c:	28 97       	sbiw	r28, 0x08	; 8
    249e:	99 23       	and	r25, r25
    24a0:	54 f4       	brge	.+20     	; 0x24b6 <H_LCD_void_latchByte+0x312>
    24a2:	28 96       	adiw	r28, 0x08	; 8
    24a4:	2e ad       	ldd	r18, Y+62	; 0x3e
    24a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    24a8:	28 97       	sbiw	r28, 0x08	; 8
    24aa:	2f 5f       	subi	r18, 0xFF	; 255
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	28 96       	adiw	r28, 0x08	; 8
    24b0:	3f af       	std	Y+63, r19	; 0x3f
    24b2:	2e af       	std	Y+62, r18	; 0x3e
    24b4:	28 97       	sbiw	r28, 0x08	; 8
    24b6:	28 96       	adiw	r28, 0x08	; 8
    24b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    24ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    24bc:	28 97       	sbiw	r28, 0x08	; 8
    24be:	95 95       	asr	r25
    24c0:	87 95       	ror	r24
    24c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    24c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <H_LCD_void_latchByte+0x328>
    24c8:	35 95       	asr	r19
    24ca:	27 95       	ror	r18
    24cc:	8a 95       	dec	r24
    24ce:	e2 f7       	brpl	.-8      	; 0x24c8 <H_LCD_void_latchByte+0x324>
    24d0:	c9 01       	movw	r24, r18
    24d2:	98 2f       	mov	r25, r24
    24d4:	91 70       	andi	r25, 0x01	; 1
    24d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    24d8:	6e ad       	ldd	r22, Y+62	; 0x3e
    24da:	49 2f       	mov	r20, r25
    24dc:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_voidSetPinValue>
		// Reset Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
		_delay_ms(5);


		for(u8 i = 20; i>12;i-=2)
    24e0:	89 ad       	ldd	r24, Y+57	; 0x39
    24e2:	82 50       	subi	r24, 0x02	; 2
    24e4:	89 af       	std	Y+57, r24	; 0x39
    24e6:	89 ad       	ldd	r24, Y+57	; 0x39
    24e8:	8d 30       	cpi	r24, 0x0D	; 13
    24ea:	08 f0       	brcs	.+2      	; 0x24ee <H_LCD_void_latchByte+0x34a>
    24ec:	b6 cf       	rjmp	.-148    	; 0x245a <H_LCD_void_latchByte+0x2b6>
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-14)/2)));
		}

		// Falling Edge
		// Set Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,HIGH);
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	62 e0       	ldi	r22, 0x02	; 2
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_voidSetPinValue>
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a0 e8       	ldi	r26, 0x80	; 128
    24fe:	bf e3       	ldi	r27, 0x3F	; 63
    2500:	89 8f       	std	Y+25, r24	; 0x19
    2502:	9a 8f       	std	Y+26, r25	; 0x1a
    2504:	ab 8f       	std	Y+27, r26	; 0x1b
    2506:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2508:	69 8d       	ldd	r22, Y+25	; 0x19
    250a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    250c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    250e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	4a e7       	ldi	r20, 0x7A	; 122
    2516:	55 e4       	ldi	r21, 0x45	; 69
    2518:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	8d 8b       	std	Y+21, r24	; 0x15
    2522:	9e 8b       	std	Y+22, r25	; 0x16
    2524:	af 8b       	std	Y+23, r26	; 0x17
    2526:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2528:	6d 89       	ldd	r22, Y+21	; 0x15
    252a:	7e 89       	ldd	r23, Y+22	; 0x16
    252c:	8f 89       	ldd	r24, Y+23	; 0x17
    252e:	98 8d       	ldd	r25, Y+24	; 0x18
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e8       	ldi	r20, 0x80	; 128
    2536:	5f e3       	ldi	r21, 0x3F	; 63
    2538:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    253c:	88 23       	and	r24, r24
    253e:	2c f4       	brge	.+10     	; 0x254a <H_LCD_void_latchByte+0x3a6>
		__ticks = 1;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9c 8b       	std	Y+20, r25	; 0x14
    2546:	8b 8b       	std	Y+19, r24	; 0x13
    2548:	3f c0       	rjmp	.+126    	; 0x25c8 <H_LCD_void_latchByte+0x424>
	else if (__tmp > 65535)
    254a:	6d 89       	ldd	r22, Y+21	; 0x15
    254c:	7e 89       	ldd	r23, Y+22	; 0x16
    254e:	8f 89       	ldd	r24, Y+23	; 0x17
    2550:	98 8d       	ldd	r25, Y+24	; 0x18
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	57 e4       	ldi	r21, 0x47	; 71
    255a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    255e:	18 16       	cp	r1, r24
    2560:	4c f5       	brge	.+82     	; 0x25b4 <H_LCD_void_latchByte+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2562:	69 8d       	ldd	r22, Y+25	; 0x19
    2564:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2566:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2568:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	9c 8b       	std	Y+20, r25	; 0x14
    2588:	8b 8b       	std	Y+19, r24	; 0x13
    258a:	0f c0       	rjmp	.+30     	; 0x25aa <H_LCD_void_latchByte+0x406>
    258c:	80 e9       	ldi	r24, 0x90	; 144
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	9a 8b       	std	Y+18, r25	; 0x12
    2592:	89 8b       	std	Y+17, r24	; 0x11
    2594:	89 89       	ldd	r24, Y+17	; 0x11
    2596:	9a 89       	ldd	r25, Y+18	; 0x12
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <H_LCD_void_latchByte+0x3f4>
    259c:	9a 8b       	std	Y+18, r25	; 0x12
    259e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a0:	8b 89       	ldd	r24, Y+19	; 0x13
    25a2:	9c 89       	ldd	r25, Y+20	; 0x14
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	9c 8b       	std	Y+20, r25	; 0x14
    25a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25aa:	8b 89       	ldd	r24, Y+19	; 0x13
    25ac:	9c 89       	ldd	r25, Y+20	; 0x14
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	69 f7       	brne	.-38     	; 0x258c <H_LCD_void_latchByte+0x3e8>
    25b2:	14 c0       	rjmp	.+40     	; 0x25dc <H_LCD_void_latchByte+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b4:	6d 89       	ldd	r22, Y+21	; 0x15
    25b6:	7e 89       	ldd	r23, Y+22	; 0x16
    25b8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ba:	98 8d       	ldd	r25, Y+24	; 0x18
    25bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9c 8b       	std	Y+20, r25	; 0x14
    25c6:	8b 8b       	std	Y+19, r24	; 0x13
    25c8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ca:	9c 89       	ldd	r25, Y+20	; 0x14
    25cc:	98 8b       	std	Y+16, r25	; 0x10
    25ce:	8f 87       	std	Y+15, r24	; 0x0f
    25d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d2:	98 89       	ldd	r25, Y+16	; 0x10
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <H_LCD_void_latchByte+0x430>
    25d8:	98 8b       	std	Y+16, r25	; 0x10
    25da:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		// Reset Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	62 e0       	ldi	r22, 0x02	; 2
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_voidSetPinValue>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 ea       	ldi	r26, 0xA0	; 160
    25ec:	b0 e4       	ldi	r27, 0x40	; 64
    25ee:	8b 87       	std	Y+11, r24	; 0x0b
    25f0:	9c 87       	std	Y+12, r25	; 0x0c
    25f2:	ad 87       	std	Y+13, r26	; 0x0d
    25f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a e7       	ldi	r20, 0x7A	; 122
    2604:	55 e4       	ldi	r21, 0x45	; 69
    2606:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8f 83       	std	Y+7, r24	; 0x07
    2610:	98 87       	std	Y+8, r25	; 0x08
    2612:	a9 87       	std	Y+9, r26	; 0x09
    2614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <H_LCD_void_latchByte+0x494>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <H_LCD_void_latchByte+0x512>
	else if (__tmp > 65535)
    2638:	6f 81       	ldd	r22, Y+7	; 0x07
    263a:	78 85       	ldd	r23, Y+8	; 0x08
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <H_LCD_void_latchByte+0x4fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	6b 85       	ldd	r22, Y+11	; 0x0b
    2652:	7c 85       	ldd	r23, Y+12	; 0x0c
    2654:	8d 85       	ldd	r24, Y+13	; 0x0d
    2656:	9e 85       	ldd	r25, Y+14	; 0x0e
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9e 83       	std	Y+6, r25	; 0x06
    2676:	8d 83       	std	Y+5, r24	; 0x05
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <H_LCD_void_latchByte+0x4f4>
    267a:	80 e9       	ldi	r24, 0x90	; 144
    267c:	91 e0       	ldi	r25, 0x01	; 1
    267e:	9c 83       	std	Y+4, r25	; 0x04
    2680:	8b 83       	std	Y+3, r24	; 0x03
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <H_LCD_void_latchByte+0x4e2>
    268a:	9c 83       	std	Y+4, r25	; 0x04
    268c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <H_LCD_void_latchByte+0x4d6>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <H_LCD_void_latchByte+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <H_LCD_void_latchByte+0x51e>
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);

	#endif

}	
    26ca:	c9 5b       	subi	r28, 0xB9	; 185
    26cc:	df 4f       	sbci	r29, 0xFF	; 255
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <main>:
#include "../inc/DIO_interface.h"
#include "../inc/LCD_interface.h"

u8 * TempString = {"HELLO MOHAMED"};
int main()
{
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_Init();
    26e6:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <H_LCD_void_Init>
//	H_LCD_void_gotoXY(2,7);
	H_LCD_void_sendString(TempString);
    26ea:	80 91 8c 00 	lds	r24, 0x008C
    26ee:	90 91 8d 00 	lds	r25, 0x008D
    26f2:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <H_LCD_void_sendString>
    26f6:	ff cf       	rjmp	.-2      	; 0x26f6 <main+0x18>

000026f8 <__udivmodqi4>:
    26f8:	99 1b       	sub	r25, r25
    26fa:	79 e0       	ldi	r23, 0x09	; 9
    26fc:	04 c0       	rjmp	.+8      	; 0x2706 <__udivmodqi4_ep>

000026fe <__udivmodqi4_loop>:
    26fe:	99 1f       	adc	r25, r25
    2700:	96 17       	cp	r25, r22
    2702:	08 f0       	brcs	.+2      	; 0x2706 <__udivmodqi4_ep>
    2704:	96 1b       	sub	r25, r22

00002706 <__udivmodqi4_ep>:
    2706:	88 1f       	adc	r24, r24
    2708:	7a 95       	dec	r23
    270a:	c9 f7       	brne	.-14     	; 0x26fe <__udivmodqi4_loop>
    270c:	80 95       	com	r24
    270e:	08 95       	ret

00002710 <__prologue_saves__>:
    2710:	2f 92       	push	r2
    2712:	3f 92       	push	r3
    2714:	4f 92       	push	r4
    2716:	5f 92       	push	r5
    2718:	6f 92       	push	r6
    271a:	7f 92       	push	r7
    271c:	8f 92       	push	r8
    271e:	9f 92       	push	r9
    2720:	af 92       	push	r10
    2722:	bf 92       	push	r11
    2724:	cf 92       	push	r12
    2726:	df 92       	push	r13
    2728:	ef 92       	push	r14
    272a:	ff 92       	push	r15
    272c:	0f 93       	push	r16
    272e:	1f 93       	push	r17
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	ca 1b       	sub	r28, r26
    273a:	db 0b       	sbc	r29, r27
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
    2746:	09 94       	ijmp

00002748 <__epilogue_restores__>:
    2748:	2a 88       	ldd	r2, Y+18	; 0x12
    274a:	39 88       	ldd	r3, Y+17	; 0x11
    274c:	48 88       	ldd	r4, Y+16	; 0x10
    274e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2750:	6e 84       	ldd	r6, Y+14	; 0x0e
    2752:	7d 84       	ldd	r7, Y+13	; 0x0d
    2754:	8c 84       	ldd	r8, Y+12	; 0x0c
    2756:	9b 84       	ldd	r9, Y+11	; 0x0b
    2758:	aa 84       	ldd	r10, Y+10	; 0x0a
    275a:	b9 84       	ldd	r11, Y+9	; 0x09
    275c:	c8 84       	ldd	r12, Y+8	; 0x08
    275e:	df 80       	ldd	r13, Y+7	; 0x07
    2760:	ee 80       	ldd	r14, Y+6	; 0x06
    2762:	fd 80       	ldd	r15, Y+5	; 0x05
    2764:	0c 81       	ldd	r16, Y+4	; 0x04
    2766:	1b 81       	ldd	r17, Y+3	; 0x03
    2768:	aa 81       	ldd	r26, Y+2	; 0x02
    276a:	b9 81       	ldd	r27, Y+1	; 0x01
    276c:	ce 0f       	add	r28, r30
    276e:	d1 1d       	adc	r29, r1
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	ed 01       	movw	r28, r26
    277c:	08 95       	ret

0000277e <itoa>:
    277e:	fb 01       	movw	r30, r22
    2780:	9f 01       	movw	r18, r30
    2782:	e8 94       	clt
    2784:	42 30       	cpi	r20, 0x02	; 2
    2786:	c4 f0       	brlt	.+48     	; 0x27b8 <itoa+0x3a>
    2788:	45 32       	cpi	r20, 0x25	; 37
    278a:	b4 f4       	brge	.+44     	; 0x27b8 <itoa+0x3a>
    278c:	4a 30       	cpi	r20, 0x0A	; 10
    278e:	29 f4       	brne	.+10     	; 0x279a <itoa+0x1c>
    2790:	97 fb       	bst	r25, 7
    2792:	1e f4       	brtc	.+6      	; 0x279a <itoa+0x1c>
    2794:	90 95       	com	r25
    2796:	81 95       	neg	r24
    2798:	9f 4f       	sbci	r25, 0xFF	; 255
    279a:	64 2f       	mov	r22, r20
    279c:	77 27       	eor	r23, r23
    279e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <__udivmodhi4>
    27a2:	80 5d       	subi	r24, 0xD0	; 208
    27a4:	8a 33       	cpi	r24, 0x3A	; 58
    27a6:	0c f0       	brlt	.+2      	; 0x27aa <itoa+0x2c>
    27a8:	89 5d       	subi	r24, 0xD9	; 217
    27aa:	81 93       	st	Z+, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	a1 f7       	brne	.-24     	; 0x279a <itoa+0x1c>
    27b2:	16 f4       	brtc	.+4      	; 0x27b8 <itoa+0x3a>
    27b4:	5d e2       	ldi	r21, 0x2D	; 45
    27b6:	51 93       	st	Z+, r21
    27b8:	10 82       	st	Z, r1
    27ba:	c9 01       	movw	r24, r18
    27bc:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <strrev>

000027c0 <strrev>:
    27c0:	dc 01       	movw	r26, r24
    27c2:	fc 01       	movw	r30, r24
    27c4:	67 2f       	mov	r22, r23
    27c6:	71 91       	ld	r23, Z+
    27c8:	77 23       	and	r23, r23
    27ca:	e1 f7       	brne	.-8      	; 0x27c4 <strrev+0x4>
    27cc:	32 97       	sbiw	r30, 0x02	; 2
    27ce:	04 c0       	rjmp	.+8      	; 0x27d8 <strrev+0x18>
    27d0:	7c 91       	ld	r23, X
    27d2:	6d 93       	st	X+, r22
    27d4:	70 83       	st	Z, r23
    27d6:	62 91       	ld	r22, -Z
    27d8:	ae 17       	cp	r26, r30
    27da:	bf 07       	cpc	r27, r31
    27dc:	c8 f3       	brcs	.-14     	; 0x27d0 <strrev+0x10>
    27de:	08 95       	ret

000027e0 <__udivmodhi4>:
    27e0:	aa 1b       	sub	r26, r26
    27e2:	bb 1b       	sub	r27, r27
    27e4:	51 e1       	ldi	r21, 0x11	; 17
    27e6:	07 c0       	rjmp	.+14     	; 0x27f6 <__udivmodhi4_ep>

000027e8 <__udivmodhi4_loop>:
    27e8:	aa 1f       	adc	r26, r26
    27ea:	bb 1f       	adc	r27, r27
    27ec:	a6 17       	cp	r26, r22
    27ee:	b7 07       	cpc	r27, r23
    27f0:	10 f0       	brcs	.+4      	; 0x27f6 <__udivmodhi4_ep>
    27f2:	a6 1b       	sub	r26, r22
    27f4:	b7 0b       	sbc	r27, r23

000027f6 <__udivmodhi4_ep>:
    27f6:	88 1f       	adc	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	5a 95       	dec	r21
    27fc:	a9 f7       	brne	.-22     	; 0x27e8 <__udivmodhi4_loop>
    27fe:	80 95       	com	r24
    2800:	90 95       	com	r25
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	08 95       	ret

00002808 <_exit>:
    2808:	f8 94       	cli

0000280a <__stop_program>:
    280a:	ff cf       	rjmp	.-2      	; 0x280a <__stop_program>
