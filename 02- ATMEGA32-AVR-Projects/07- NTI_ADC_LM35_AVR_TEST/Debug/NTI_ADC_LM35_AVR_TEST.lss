
NTI_ADC_LM35_AVR_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b8  00800060  00003c9c  00003d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800218  00800218  00003ee8  2**0
                  ALLOC
  3 .stab         00002eb0  00000000  00000000  00003ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d06  00000000  00000000  00006d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00008c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00008e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000dc84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000de64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000e162  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 3a 1b 	jmp	0x3674	; 0x3674 <__vector_4>
      14:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 07 1c 	call	0x380e	; 0x380e <main>
      8a:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 eb       	ldi	r26, 0xB9	; 185
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 eb       	ldi	r24, 0xB9	; 185
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 eb       	ldi	r22, 0xB9	; 185
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	ef 53       	subi	r30, 0x3F	; 63
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <MADC_Init>:
			   ADC_ADJUST_t Copy_ADC_Adjust		 	,
			   ADC_PRESCALER_t Copy_ADC_Prescaler	,
			   ADC_TRIGGER_t Copy_ADC_Trigger    	,
			   ADC_TRIG_MOD_t Copy_ADC_Trigger_Mode
			   )
{
     e8e:	0f 93       	push	r16
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <MADC_Init+0x8>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <MADC_Init+0xa>
     e98:	0f 92       	push	r0
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	6a 83       	std	Y+2, r22	; 0x02
     ea2:	4b 83       	std	Y+3, r20	; 0x03
     ea4:	2c 83       	std	Y+4, r18	; 0x04
     ea6:	0d 83       	std	Y+5, r16	; 0x05
	/******* FOR ADJUST *********/
	if (Copy_ADC_Adjust == ADC_LEFT_ADJUST)
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	88 23       	and	r24, r24
     eac:	51 f4       	brne	.+20     	; 0xec2 <MADC_Init+0x34>
	{
		SET_BIT(ADC->ADMUX ,ADLAR_BIT);
     eae:	a4 e2       	ldi	r26, 0x24	; 36
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e4 e2       	ldi	r30, 0x24	; 36
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	83 81       	ldd	r24, Z+3	; 0x03
     eb8:	80 62       	ori	r24, 0x20	; 32
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	8c 93       	st	X, r24
     ebe:	13 97       	sbiw	r26, 0x03	; 3
     ec0:	0b c0       	rjmp	.+22     	; 0xed8 <MADC_Init+0x4a>
	}
	else if(Copy_ADC_Adjust == ADC_RIGHT_ADJUST)
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	41 f4       	brne	.+16     	; 0xed8 <MADC_Init+0x4a>
	{
		CLR_BIT(ADC->ADMUX ,ADLAR_BIT);
     ec8:	a4 e2       	ldi	r26, 0x24	; 36
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e4 e2       	ldi	r30, 0x24	; 36
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	83 81       	ldd	r24, Z+3	; 0x03
     ed2:	8f 7d       	andi	r24, 0xDF	; 223
     ed4:	13 96       	adiw	r26, 0x03	; 3
     ed6:	8c 93       	st	X, r24
	}
	
	/********** FOR VREF *********/
	/* Bit Masking */
	ADC->ADMUX &= 0b00111111;
     ed8:	a4 e2       	ldi	r26, 0x24	; 36
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e4 e2       	ldi	r30, 0x24	; 36
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	83 81       	ldd	r24, Z+3	; 0x03
     ee2:	8f 73       	andi	r24, 0x3F	; 63
     ee4:	13 96       	adiw	r26, 0x03	; 3
     ee6:	8c 93       	st	X, r24
	/* Assign VREF Value */
	ADC->ADMUX |= (Copy_ADC_VREF << 6);
     ee8:	a4 e2       	ldi	r26, 0x24	; 36
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e4 e2       	ldi	r30, 0x24	; 36
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	83 81       	ldd	r24, Z+3	; 0x03
     ef2:	28 2f       	mov	r18, r24
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	00 24       	eor	r0, r0
     efc:	96 95       	lsr	r25
     efe:	87 95       	ror	r24
     f00:	07 94       	ror	r0
     f02:	96 95       	lsr	r25
     f04:	87 95       	ror	r24
     f06:	07 94       	ror	r0
     f08:	98 2f       	mov	r25, r24
     f0a:	80 2d       	mov	r24, r0
     f0c:	82 2b       	or	r24, r18
     f0e:	13 96       	adiw	r26, 0x03	; 3
     f10:	8c 93       	st	X, r24
     f12:	13 97       	sbiw	r26, 0x03	; 3
	

	/******* FOR TRIGGER *********/
	if (Copy_ADC_Trigger == ADC_AUTO_TRIGGER_ON)
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	31 f5       	brne	.+76     	; 0xf66 <MADC_Init+0xd8>
	{
		SET_BIT(ADC->ADCSRA ,ADATE_BIT);
     f1a:	a4 e2       	ldi	r26, 0x24	; 36
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e4 e2       	ldi	r30, 0x24	; 36
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	80 62       	ori	r24, 0x20	; 32
     f26:	12 96       	adiw	r26, 0x02	; 2
     f28:	8c 93       	st	X, r24

		/******* FOR TRIGGER MODE *********/
		/* Bit Masking */
		ADC->SFIOR &= 0b00011111;
     f2a:	a4 e2       	ldi	r26, 0x24	; 36
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e4 e2       	ldi	r30, 0x24	; 36
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	85 a5       	ldd	r24, Z+45	; 0x2d
     f34:	8f 71       	andi	r24, 0x1F	; 31
     f36:	9d 96       	adiw	r26, 0x2d	; 45
     f38:	8c 93       	st	X, r24
		/* Assign TRIGGER MODE Value */
		ADC->SFIOR |= (Copy_ADC_Trigger_Mode << 5);
     f3a:	a4 e2       	ldi	r26, 0x24	; 36
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e4 e2       	ldi	r30, 0x24	; 36
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	85 a5       	ldd	r24, Z+45	; 0x2d
     f44:	28 2f       	mov	r18, r24
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	88 2f       	mov	r24, r24
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	82 95       	swap	r24
     f52:	92 95       	swap	r25
     f54:	90 7f       	andi	r25, 0xF0	; 240
     f56:	98 27       	eor	r25, r24
     f58:	80 7f       	andi	r24, 0xF0	; 240
     f5a:	98 27       	eor	r25, r24
     f5c:	82 2b       	or	r24, r18
     f5e:	9d 96       	adiw	r26, 0x2d	; 45
     f60:	8c 93       	st	X, r24
     f62:	9d 97       	sbiw	r26, 0x2d	; 45
     f64:	0b c0       	rjmp	.+22     	; 0xf7c <MADC_Init+0xee>

	}
	else if(Copy_ADC_Trigger == ADC_AUTO_TRIGGER_OFF)
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	88 23       	and	r24, r24
     f6a:	41 f4       	brne	.+16     	; 0xf7c <MADC_Init+0xee>
	{
		CLR_BIT(ADC->ADCSRA ,ADATE_BIT);
     f6c:	a4 e2       	ldi	r26, 0x24	; 36
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e4 e2       	ldi	r30, 0x24	; 36
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	8f 7d       	andi	r24, 0xDF	; 223
     f78:	12 96       	adiw	r26, 0x02	; 2
     f7a:	8c 93       	st	X, r24
	}

	/******* FOR PRESCALER *********/
	/* Bit Masking */
	ADC->ADCSRA &= 0b11111000;
     f7c:	a4 e2       	ldi	r26, 0x24	; 36
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e4 e2       	ldi	r30, 0x24	; 36
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	82 81       	ldd	r24, Z+2	; 0x02
     f86:	88 7f       	andi	r24, 0xF8	; 248
     f88:	12 96       	adiw	r26, 0x02	; 2
     f8a:	8c 93       	st	X, r24
	/* Assign PRESCALER Value */
	ADC->ADCSRA |= Copy_ADC_Prescaler;
     f8c:	a4 e2       	ldi	r26, 0x24	; 36
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e4 e2       	ldi	r30, 0x24	; 36
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	92 81       	ldd	r25, Z+2	; 0x02
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	89 2b       	or	r24, r25
     f9a:	12 96       	adiw	r26, 0x02	; 2
     f9c:	8c 93       	st	X, r24
	
	
	/******* FOR ADC ENABLE *********/
	SET_BIT(ADC->ADCSRA ,ADEN_BIT);
     f9e:	a4 e2       	ldi	r26, 0x24	; 36
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e4 e2       	ldi	r30, 0x24	; 36
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	80 68       	ori	r24, 0x80	; 128
     faa:	12 96       	adiw	r26, 0x02	; 2
     fac:	8c 93       	st	X, r24
     fae:	12 97       	sbiw	r26, 0x02	; 2

}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	0f 91       	pop	r16
     fc0:	08 95       	ret

00000fc2 <MADC_getDigitalValueSynchNonBlocking>:

void MADC_getDigitalValueSynchNonBlocking (ADC_CHANNELS_t Copy_ADC_Channel,u16 * ADC_GET_Data)
{	
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <MADC_getDigitalValueSynchNonBlocking+0x6>
     fc8:	0f 92       	push	r0
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	7b 83       	std	Y+3, r23	; 0x03
     fd2:	6a 83       	std	Y+2, r22	; 0x02
	/* Bit Masking */
	ADC->ADMUX &= 0b11100000;
     fd4:	a4 e2       	ldi	r26, 0x24	; 36
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e4 e2       	ldi	r30, 0x24	; 36
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	83 81       	ldd	r24, Z+3	; 0x03
     fde:	80 7e       	andi	r24, 0xE0	; 224
     fe0:	13 96       	adiw	r26, 0x03	; 3
     fe2:	8c 93       	st	X, r24
	/* Assign Channel Value */
	ADC->ADMUX |= Copy_ADC_Channel;
     fe4:	a4 e2       	ldi	r26, 0x24	; 36
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e4 e2       	ldi	r30, 0x24	; 36
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	93 81       	ldd	r25, Z+3	; 0x03
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	89 2b       	or	r24, r25
     ff2:	13 96       	adiw	r26, 0x03	; 3
     ff4:	8c 93       	st	X, r24
     ff6:	13 97       	sbiw	r26, 0x03	; 3
		
	/**** The conversion is complete ****/
	if(GET_BIT(ADC->ADCSRA ,ADSC_BIT) == 0)
     ff8:	e4 e2       	ldi	r30, 0x24	; 36
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	82 95       	swap	r24
    1000:	86 95       	lsr	r24
    1002:	86 95       	lsr	r24
    1004:	83 70       	andi	r24, 0x03	; 3
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	81 70       	andi	r24, 0x01	; 1
    100c:	90 70       	andi	r25, 0x00	; 0
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	31 f4       	brne	.+12     	; 0x101e <MADC_getDigitalValueSynchNonBlocking+0x5c>
	{
		*ADC_GET_Data = MADC_getDigitalValue();
    1012:	0e 94 1e 08 	call	0x103c	; 0x103c <MADC_getDigitalValue>
    1016:	ea 81       	ldd	r30, Y+2	; 0x02
    1018:	fb 81       	ldd	r31, Y+3	; 0x03
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
	}

	/* Start Conversion */
	SET_BIT(ADC->ADCSRA ,ADSC_BIT);
    101e:	a4 e2       	ldi	r26, 0x24	; 36
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e4 e2       	ldi	r30, 0x24	; 36
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	80 64       	ori	r24, 0x40	; 64
    102a:	12 96       	adiw	r26, 0x02	; 2
    102c:	8c 93       	st	X, r24
    102e:	12 97       	sbiw	r26, 0x02	; 2

}
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <MADC_getDigitalValue>:

u16 MADC_getDigitalValue(void)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	0f 92       	push	r0
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
	u8 TempADC_Data = 0;
    1046:	19 82       	std	Y+1, r1	; 0x01
	TempADC_Data = ADC->ADCL;
    1048:	e4 e2       	ldi	r30, 0x24	; 36
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	89 83       	std	Y+1, r24	; 0x01
	return (TempADC_Data|((ADC->ADCH)<<8));
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	e4 e2       	ldi	r30, 0x24	; 36
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	81 81       	ldd	r24, Z+1	; 0x01
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	98 2f       	mov	r25, r24
    1062:	88 27       	eor	r24, r24
    1064:	82 2b       	or	r24, r18
    1066:	93 2b       	or	r25, r19
}
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <MADC_getDigitalValueAsynchCallBack>:

/************  CallBack Functions Declerations  *************/

void MADC_getDigitalValueAsynchCallBack(ADC_CHANNELS_t Copy_ADC_Channel ,void (*ptr)(void))
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <MADC_getDigitalValueAsynchCallBack+0x6>
    1076:	0f 92       	push	r0
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	7b 83       	std	Y+3, r23	; 0x03
    1080:	6a 83       	std	Y+2, r22	; 0x02
	/* Bit Masking */
	ADC->ADMUX &= 0b11100000;
    1082:	a4 e2       	ldi	r26, 0x24	; 36
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e4 e2       	ldi	r30, 0x24	; 36
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	83 81       	ldd	r24, Z+3	; 0x03
    108c:	80 7e       	andi	r24, 0xE0	; 224
    108e:	13 96       	adiw	r26, 0x03	; 3
    1090:	8c 93       	st	X, r24
	/* Assign Channel Value */
	ADC->ADMUX |= Copy_ADC_Channel;
    1092:	a4 e2       	ldi	r26, 0x24	; 36
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e4 e2       	ldi	r30, 0x24	; 36
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	93 81       	ldd	r25, Z+3	; 0x03
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	89 2b       	or	r24, r25
    10a0:	13 96       	adiw	r26, 0x03	; 3
    10a2:	8c 93       	st	X, r24
    10a4:	13 97       	sbiw	r26, 0x03	; 3

	if(ptr != NULL)
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	9b 81       	ldd	r25, Y+3	; 0x03
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	b9 f0       	breq	.+46     	; 0x10dc <MADC_getDigitalValueAsynchCallBack+0x6c>
	{
		ADC_CallBack = ptr ;
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	9b 81       	ldd	r25, Y+3	; 0x03
    10b2:	90 93 19 02 	sts	0x0219, r25
    10b6:	80 93 18 02 	sts	0x0218, r24

		/* Enable Interrupt */
		SET_BIT(ADC->ADCSRA ,ADIE_BIT);
    10ba:	a4 e2       	ldi	r26, 0x24	; 36
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e4 e2       	ldi	r30, 0x24	; 36
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	88 60       	ori	r24, 0x08	; 8
    10c6:	12 96       	adiw	r26, 0x02	; 2
    10c8:	8c 93       	st	X, r24
		
		/* Start Conversion */
		SET_BIT(ADC->ADCSRA ,ADSC_BIT);
    10ca:	a4 e2       	ldi	r26, 0x24	; 36
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e4 e2       	ldi	r30, 0x24	; 36
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	82 81       	ldd	r24, Z+2	; 0x02
    10d4:	80 64       	ori	r24, 0x40	; 64
    10d6:	12 96       	adiw	r26, 0x02	; 2
    10d8:	8c 93       	st	X, r24
    10da:	12 97       	sbiw	r26, 0x02	; 2

	}
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <__vector_16>:


/*************************  ADC Complete ***************************/
ADC_IRQHandler
{
    10e8:	1f 92       	push	r1
    10ea:	0f 92       	push	r0
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	0f 92       	push	r0
    10f0:	11 24       	eor	r1, r1
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	ef 93       	push	r30
    1108:	ff 93       	push	r31
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
	ADC_CallBack();
    1112:	e0 91 18 02 	lds	r30, 0x0218
    1116:	f0 91 19 02 	lds	r31, 0x0219
    111a:	09 95       	icall

}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	0f 90       	pop	r0
    113e:	1f 90       	pop	r1
    1140:	18 95       	reti

00001142 <DIO_voidSetPinDirection>:
#include "../inc/DIO_config.h"
#include "../inc/DIO_interface.h"
#include "../inc/DIO_private.h"

void DIO_voidSetPinDirection(PORT_t Copy_PortId,PIN_t Copy_PinId,DIRECTION_t Copy_Direction)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	2d 97       	sbiw	r28, 0x0d	; 13
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	6a 83       	std	Y+2, r22	; 0x02
    115a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_PortId)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3d 87       	std	Y+13, r19	; 0x0d
    1164:	2c 87       	std	Y+12, r18	; 0x0c
    1166:	8c 85       	ldd	r24, Y+12	; 0x0c
    1168:	9d 85       	ldd	r25, Y+13	; 0x0d
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <DIO_voidSetPinDirection+0x30>
    1170:	b8 c0       	rjmp	.+368    	; 0x12e2 <DIO_voidSetPinDirection+0x1a0>
    1172:	2c 85       	ldd	r18, Y+12	; 0x0c
    1174:	3d 85       	ldd	r19, Y+13	; 0x0d
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	2c f4       	brge	.+10     	; 0x1186 <DIO_voidSetPinDirection+0x44>
    117c:	8c 85       	ldd	r24, Y+12	; 0x0c
    117e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	71 f0       	breq	.+28     	; 0x11a0 <DIO_voidSetPinDirection+0x5e>
    1184:	90 c2       	rjmp	.+1312   	; 0x16a6 <DIO_voidSetPinDirection+0x564>
    1186:	2c 85       	ldd	r18, Y+12	; 0x0c
    1188:	3d 85       	ldd	r19, Y+13	; 0x0d
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	09 f4       	brne	.+2      	; 0x1192 <DIO_voidSetPinDirection+0x50>
    1190:	49 c1       	rjmp	.+658    	; 0x1424 <DIO_voidSetPinDirection+0x2e2>
    1192:	8c 85       	ldd	r24, Y+12	; 0x0c
    1194:	9d 85       	ldd	r25, Y+13	; 0x0d
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	91 05       	cpc	r25, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <DIO_voidSetPinDirection+0x5c>
    119c:	e4 c1       	rjmp	.+968    	; 0x1566 <DIO_voidSetPinDirection+0x424>
    119e:	83 c2       	rjmp	.+1286   	; 0x16a6 <DIO_voidSetPinDirection+0x564>
	{
		case PORT_A:
			switch(Copy_PinId)
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3b 87       	std	Y+11, r19	; 0x0b
    11a8:	2a 87       	std	Y+10, r18	; 0x0a
    11aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	91 05       	cpc	r25, r1
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <DIO_voidSetPinDirection+0x74>
    11b4:	51 c0       	rjmp	.+162    	; 0x1258 <DIO_voidSetPinDirection+0x116>
    11b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    11b8:	3b 85       	ldd	r19, Y+11	; 0x0b
    11ba:	24 30       	cpi	r18, 0x04	; 4
    11bc:	31 05       	cpc	r19, r1
    11be:	7c f4       	brge	.+30     	; 0x11de <DIO_voidSetPinDirection+0x9c>
    11c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    11c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	91 05       	cpc	r25, r1
    11c8:	71 f1       	breq	.+92     	; 0x1226 <DIO_voidSetPinDirection+0xe4>
    11ca:	2a 85       	ldd	r18, Y+10	; 0x0a
    11cc:	3b 85       	ldd	r19, Y+11	; 0x0b
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	ac f5       	brge	.+106    	; 0x123e <DIO_voidSetPinDirection+0xfc>
    11d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	d1 f0       	breq	.+52     	; 0x1210 <DIO_voidSetPinDirection+0xce>
    11dc:	64 c2       	rjmp	.+1224   	; 0x16a6 <DIO_voidSetPinDirection+0x564>
    11de:	2a 85       	ldd	r18, Y+10	; 0x0a
    11e0:	3b 85       	ldd	r19, Y+11	; 0x0b
    11e2:	25 30       	cpi	r18, 0x05	; 5
    11e4:	31 05       	cpc	r19, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <DIO_voidSetPinDirection+0xa8>
    11e8:	52 c0       	rjmp	.+164    	; 0x128e <DIO_voidSetPinDirection+0x14c>
    11ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ee:	85 30       	cpi	r24, 0x05	; 5
    11f0:	91 05       	cpc	r25, r1
    11f2:	0c f4       	brge	.+2      	; 0x11f6 <DIO_voidSetPinDirection+0xb4>
    11f4:	3f c0       	rjmp	.+126    	; 0x1274 <DIO_voidSetPinDirection+0x132>
    11f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    11f8:	3b 85       	ldd	r19, Y+11	; 0x0b
    11fa:	26 30       	cpi	r18, 0x06	; 6
    11fc:	31 05       	cpc	r19, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <DIO_voidSetPinDirection+0xc0>
    1200:	54 c0       	rjmp	.+168    	; 0x12aa <DIO_voidSetPinDirection+0x168>
    1202:	8a 85       	ldd	r24, Y+10	; 0x0a
    1204:	9b 85       	ldd	r25, Y+11	; 0x0b
    1206:	87 30       	cpi	r24, 0x07	; 7
    1208:	91 05       	cpc	r25, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <DIO_voidSetPinDirection+0xcc>
    120c:	5d c0       	rjmp	.+186    	; 0x12c8 <DIO_voidSetPinDirection+0x186>
    120e:	4b c2       	rjmp	.+1174   	; 0x16a6 <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRA.Bit.B0 = Copy_Direction;
    1210:	e0 e3       	ldi	r30, 0x30	; 48
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	81 70       	andi	r24, 0x01	; 1
    1218:	98 2f       	mov	r25, r24
    121a:	91 70       	andi	r25, 0x01	; 1
    121c:	82 85       	ldd	r24, Z+10	; 0x0a
    121e:	8e 7f       	andi	r24, 0xFE	; 254
    1220:	89 2b       	or	r24, r25
    1222:	82 87       	std	Z+10, r24	; 0x0a
    1224:	40 c2       	rjmp	.+1152   	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRA.Bit.B1 = Copy_Direction;
    1226:	e0 e3       	ldi	r30, 0x30	; 48
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	81 70       	andi	r24, 0x01	; 1
    1230:	98 2f       	mov	r25, r24
    1232:	99 0f       	add	r25, r25
    1234:	82 85       	ldd	r24, Z+10	; 0x0a
    1236:	8d 7f       	andi	r24, 0xFD	; 253
    1238:	89 2b       	or	r24, r25
    123a:	82 87       	std	Z+10, r24	; 0x0a
    123c:	34 c2       	rjmp	.+1128   	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRA.Bit.B2 = Copy_Direction;
    123e:	e0 e3       	ldi	r30, 0x30	; 48
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	81 70       	andi	r24, 0x01	; 1
    1246:	81 70       	andi	r24, 0x01	; 1
    1248:	98 2f       	mov	r25, r24
    124a:	99 0f       	add	r25, r25
    124c:	99 0f       	add	r25, r25
    124e:	82 85       	ldd	r24, Z+10	; 0x0a
    1250:	8b 7f       	andi	r24, 0xFB	; 251
    1252:	89 2b       	or	r24, r25
    1254:	82 87       	std	Z+10, r24	; 0x0a
    1256:	27 c2       	rjmp	.+1102   	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRA.Bit.B3 = Copy_Direction;
    1258:	e0 e3       	ldi	r30, 0x30	; 48
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	81 70       	andi	r24, 0x01	; 1
    1260:	81 70       	andi	r24, 0x01	; 1
    1262:	98 2f       	mov	r25, r24
    1264:	99 0f       	add	r25, r25
    1266:	99 0f       	add	r25, r25
    1268:	99 0f       	add	r25, r25
    126a:	82 85       	ldd	r24, Z+10	; 0x0a
    126c:	87 7f       	andi	r24, 0xF7	; 247
    126e:	89 2b       	or	r24, r25
    1270:	82 87       	std	Z+10, r24	; 0x0a
    1272:	19 c2       	rjmp	.+1074   	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRA.Bit.B4 = Copy_Direction;
    1274:	e0 e3       	ldi	r30, 0x30	; 48
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	81 70       	andi	r24, 0x01	; 1
    127c:	81 70       	andi	r24, 0x01	; 1
    127e:	98 2f       	mov	r25, r24
    1280:	92 95       	swap	r25
    1282:	90 7f       	andi	r25, 0xF0	; 240
    1284:	82 85       	ldd	r24, Z+10	; 0x0a
    1286:	8f 7e       	andi	r24, 0xEF	; 239
    1288:	89 2b       	or	r24, r25
    128a:	82 87       	std	Z+10, r24	; 0x0a
    128c:	0c c2       	rjmp	.+1048   	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRA.Bit.B5 = Copy_Direction;
    128e:	e0 e3       	ldi	r30, 0x30	; 48
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	81 70       	andi	r24, 0x01	; 1
    1296:	81 70       	andi	r24, 0x01	; 1
    1298:	98 2f       	mov	r25, r24
    129a:	92 95       	swap	r25
    129c:	99 0f       	add	r25, r25
    129e:	90 7e       	andi	r25, 0xE0	; 224
    12a0:	82 85       	ldd	r24, Z+10	; 0x0a
    12a2:	8f 7d       	andi	r24, 0xDF	; 223
    12a4:	89 2b       	or	r24, r25
    12a6:	82 87       	std	Z+10, r24	; 0x0a
    12a8:	fe c1       	rjmp	.+1020   	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRA.Bit.B6 = Copy_Direction;
    12aa:	e0 e3       	ldi	r30, 0x30	; 48
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	81 70       	andi	r24, 0x01	; 1
    12b2:	81 70       	andi	r24, 0x01	; 1
    12b4:	98 2f       	mov	r25, r24
    12b6:	92 95       	swap	r25
    12b8:	99 0f       	add	r25, r25
    12ba:	99 0f       	add	r25, r25
    12bc:	90 7c       	andi	r25, 0xC0	; 192
    12be:	82 85       	ldd	r24, Z+10	; 0x0a
    12c0:	8f 7b       	andi	r24, 0xBF	; 191
    12c2:	89 2b       	or	r24, r25
    12c4:	82 87       	std	Z+10, r24	; 0x0a
    12c6:	ef c1       	rjmp	.+990    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRA.Bit.B7 = Copy_Direction;
    12c8:	e0 e3       	ldi	r30, 0x30	; 48
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	81 70       	andi	r24, 0x01	; 1
    12d0:	98 2f       	mov	r25, r24
    12d2:	97 95       	ror	r25
    12d4:	99 27       	eor	r25, r25
    12d6:	97 95       	ror	r25
    12d8:	82 85       	ldd	r24, Z+10	; 0x0a
    12da:	8f 77       	andi	r24, 0x7F	; 127
    12dc:	89 2b       	or	r24, r25
    12de:	82 87       	std	Z+10, r24	; 0x0a
    12e0:	e2 c1       	rjmp	.+964    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
				default: break;
			}
			break;

		case PORT_B:
			switch(Copy_PinId)
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	39 87       	std	Y+9, r19	; 0x09
    12ea:	28 87       	std	Y+8, r18	; 0x08
    12ec:	88 85       	ldd	r24, Y+8	; 0x08
    12ee:	99 85       	ldd	r25, Y+9	; 0x09
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 05       	cpc	r25, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <DIO_voidSetPinDirection+0x1b6>
    12f6:	51 c0       	rjmp	.+162    	; 0x139a <DIO_voidSetPinDirection+0x258>
    12f8:	28 85       	ldd	r18, Y+8	; 0x08
    12fa:	39 85       	ldd	r19, Y+9	; 0x09
    12fc:	24 30       	cpi	r18, 0x04	; 4
    12fe:	31 05       	cpc	r19, r1
    1300:	7c f4       	brge	.+30     	; 0x1320 <DIO_voidSetPinDirection+0x1de>
    1302:	88 85       	ldd	r24, Y+8	; 0x08
    1304:	99 85       	ldd	r25, Y+9	; 0x09
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	91 05       	cpc	r25, r1
    130a:	71 f1       	breq	.+92     	; 0x1368 <DIO_voidSetPinDirection+0x226>
    130c:	28 85       	ldd	r18, Y+8	; 0x08
    130e:	39 85       	ldd	r19, Y+9	; 0x09
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	ac f5       	brge	.+106    	; 0x1380 <DIO_voidSetPinDirection+0x23e>
    1316:	88 85       	ldd	r24, Y+8	; 0x08
    1318:	99 85       	ldd	r25, Y+9	; 0x09
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	d1 f0       	breq	.+52     	; 0x1352 <DIO_voidSetPinDirection+0x210>
    131e:	c3 c1       	rjmp	.+902    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
    1320:	28 85       	ldd	r18, Y+8	; 0x08
    1322:	39 85       	ldd	r19, Y+9	; 0x09
    1324:	25 30       	cpi	r18, 0x05	; 5
    1326:	31 05       	cpc	r19, r1
    1328:	09 f4       	brne	.+2      	; 0x132c <DIO_voidSetPinDirection+0x1ea>
    132a:	52 c0       	rjmp	.+164    	; 0x13d0 <DIO_voidSetPinDirection+0x28e>
    132c:	88 85       	ldd	r24, Y+8	; 0x08
    132e:	99 85       	ldd	r25, Y+9	; 0x09
    1330:	85 30       	cpi	r24, 0x05	; 5
    1332:	91 05       	cpc	r25, r1
    1334:	0c f4       	brge	.+2      	; 0x1338 <DIO_voidSetPinDirection+0x1f6>
    1336:	3f c0       	rjmp	.+126    	; 0x13b6 <DIO_voidSetPinDirection+0x274>
    1338:	28 85       	ldd	r18, Y+8	; 0x08
    133a:	39 85       	ldd	r19, Y+9	; 0x09
    133c:	26 30       	cpi	r18, 0x06	; 6
    133e:	31 05       	cpc	r19, r1
    1340:	09 f4       	brne	.+2      	; 0x1344 <DIO_voidSetPinDirection+0x202>
    1342:	54 c0       	rjmp	.+168    	; 0x13ec <DIO_voidSetPinDirection+0x2aa>
    1344:	88 85       	ldd	r24, Y+8	; 0x08
    1346:	99 85       	ldd	r25, Y+9	; 0x09
    1348:	87 30       	cpi	r24, 0x07	; 7
    134a:	91 05       	cpc	r25, r1
    134c:	09 f4       	brne	.+2      	; 0x1350 <DIO_voidSetPinDirection+0x20e>
    134e:	5d c0       	rjmp	.+186    	; 0x140a <DIO_voidSetPinDirection+0x2c8>
    1350:	aa c1       	rjmp	.+852    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRB.Bit.B0 = Copy_Direction;
    1352:	e0 e3       	ldi	r30, 0x30	; 48
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	81 70       	andi	r24, 0x01	; 1
    135a:	98 2f       	mov	r25, r24
    135c:	91 70       	andi	r25, 0x01	; 1
    135e:	87 81       	ldd	r24, Z+7	; 0x07
    1360:	8e 7f       	andi	r24, 0xFE	; 254
    1362:	89 2b       	or	r24, r25
    1364:	87 83       	std	Z+7, r24	; 0x07
    1366:	9f c1       	rjmp	.+830    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRB.Bit.B1 = Copy_Direction;
    1368:	e0 e3       	ldi	r30, 0x30	; 48
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	81 70       	andi	r24, 0x01	; 1
    1370:	81 70       	andi	r24, 0x01	; 1
    1372:	98 2f       	mov	r25, r24
    1374:	99 0f       	add	r25, r25
    1376:	87 81       	ldd	r24, Z+7	; 0x07
    1378:	8d 7f       	andi	r24, 0xFD	; 253
    137a:	89 2b       	or	r24, r25
    137c:	87 83       	std	Z+7, r24	; 0x07
    137e:	93 c1       	rjmp	.+806    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRB.Bit.B2 = Copy_Direction;
    1380:	e0 e3       	ldi	r30, 0x30	; 48
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	81 70       	andi	r24, 0x01	; 1
    1388:	81 70       	andi	r24, 0x01	; 1
    138a:	98 2f       	mov	r25, r24
    138c:	99 0f       	add	r25, r25
    138e:	99 0f       	add	r25, r25
    1390:	87 81       	ldd	r24, Z+7	; 0x07
    1392:	8b 7f       	andi	r24, 0xFB	; 251
    1394:	89 2b       	or	r24, r25
    1396:	87 83       	std	Z+7, r24	; 0x07
    1398:	86 c1       	rjmp	.+780    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRB.Bit.B3 = Copy_Direction;
    139a:	e0 e3       	ldi	r30, 0x30	; 48
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	81 70       	andi	r24, 0x01	; 1
    13a2:	81 70       	andi	r24, 0x01	; 1
    13a4:	98 2f       	mov	r25, r24
    13a6:	99 0f       	add	r25, r25
    13a8:	99 0f       	add	r25, r25
    13aa:	99 0f       	add	r25, r25
    13ac:	87 81       	ldd	r24, Z+7	; 0x07
    13ae:	87 7f       	andi	r24, 0xF7	; 247
    13b0:	89 2b       	or	r24, r25
    13b2:	87 83       	std	Z+7, r24	; 0x07
    13b4:	78 c1       	rjmp	.+752    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRB.Bit.B4 = Copy_Direction;
    13b6:	e0 e3       	ldi	r30, 0x30	; 48
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	81 70       	andi	r24, 0x01	; 1
    13be:	81 70       	andi	r24, 0x01	; 1
    13c0:	98 2f       	mov	r25, r24
    13c2:	92 95       	swap	r25
    13c4:	90 7f       	andi	r25, 0xF0	; 240
    13c6:	87 81       	ldd	r24, Z+7	; 0x07
    13c8:	8f 7e       	andi	r24, 0xEF	; 239
    13ca:	89 2b       	or	r24, r25
    13cc:	87 83       	std	Z+7, r24	; 0x07
    13ce:	6b c1       	rjmp	.+726    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRB.Bit.B5 = Copy_Direction;
    13d0:	e0 e3       	ldi	r30, 0x30	; 48
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	81 70       	andi	r24, 0x01	; 1
    13d8:	81 70       	andi	r24, 0x01	; 1
    13da:	98 2f       	mov	r25, r24
    13dc:	92 95       	swap	r25
    13de:	99 0f       	add	r25, r25
    13e0:	90 7e       	andi	r25, 0xE0	; 224
    13e2:	87 81       	ldd	r24, Z+7	; 0x07
    13e4:	8f 7d       	andi	r24, 0xDF	; 223
    13e6:	89 2b       	or	r24, r25
    13e8:	87 83       	std	Z+7, r24	; 0x07
    13ea:	5d c1       	rjmp	.+698    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRB.Bit.B6 = Copy_Direction;
    13ec:	e0 e3       	ldi	r30, 0x30	; 48
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	81 70       	andi	r24, 0x01	; 1
    13f4:	81 70       	andi	r24, 0x01	; 1
    13f6:	98 2f       	mov	r25, r24
    13f8:	92 95       	swap	r25
    13fa:	99 0f       	add	r25, r25
    13fc:	99 0f       	add	r25, r25
    13fe:	90 7c       	andi	r25, 0xC0	; 192
    1400:	87 81       	ldd	r24, Z+7	; 0x07
    1402:	8f 7b       	andi	r24, 0xBF	; 191
    1404:	89 2b       	or	r24, r25
    1406:	87 83       	std	Z+7, r24	; 0x07
    1408:	4e c1       	rjmp	.+668    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRB.Bit.B7 = Copy_Direction;
    140a:	e0 e3       	ldi	r30, 0x30	; 48
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	81 70       	andi	r24, 0x01	; 1
    1412:	98 2f       	mov	r25, r24
    1414:	97 95       	ror	r25
    1416:	99 27       	eor	r25, r25
    1418:	97 95       	ror	r25
    141a:	87 81       	ldd	r24, Z+7	; 0x07
    141c:	8f 77       	andi	r24, 0x7F	; 127
    141e:	89 2b       	or	r24, r25
    1420:	87 83       	std	Z+7, r24	; 0x07
    1422:	41 c1       	rjmp	.+642    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
			}
			break;


		case PORT_C:
			switch(Copy_PinId)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	3f 83       	std	Y+7, r19	; 0x07
    142c:	2e 83       	std	Y+6, r18	; 0x06
    142e:	8e 81       	ldd	r24, Y+6	; 0x06
    1430:	9f 81       	ldd	r25, Y+7	; 0x07
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	91 05       	cpc	r25, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <DIO_voidSetPinDirection+0x2f8>
    1438:	51 c0       	rjmp	.+162    	; 0x14dc <DIO_voidSetPinDirection+0x39a>
    143a:	2e 81       	ldd	r18, Y+6	; 0x06
    143c:	3f 81       	ldd	r19, Y+7	; 0x07
    143e:	24 30       	cpi	r18, 0x04	; 4
    1440:	31 05       	cpc	r19, r1
    1442:	7c f4       	brge	.+30     	; 0x1462 <DIO_voidSetPinDirection+0x320>
    1444:	8e 81       	ldd	r24, Y+6	; 0x06
    1446:	9f 81       	ldd	r25, Y+7	; 0x07
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	71 f1       	breq	.+92     	; 0x14aa <DIO_voidSetPinDirection+0x368>
    144e:	2e 81       	ldd	r18, Y+6	; 0x06
    1450:	3f 81       	ldd	r19, Y+7	; 0x07
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	ac f5       	brge	.+106    	; 0x14c2 <DIO_voidSetPinDirection+0x380>
    1458:	8e 81       	ldd	r24, Y+6	; 0x06
    145a:	9f 81       	ldd	r25, Y+7	; 0x07
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	d1 f0       	breq	.+52     	; 0x1494 <DIO_voidSetPinDirection+0x352>
    1460:	22 c1       	rjmp	.+580    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
    1462:	2e 81       	ldd	r18, Y+6	; 0x06
    1464:	3f 81       	ldd	r19, Y+7	; 0x07
    1466:	25 30       	cpi	r18, 0x05	; 5
    1468:	31 05       	cpc	r19, r1
    146a:	09 f4       	brne	.+2      	; 0x146e <DIO_voidSetPinDirection+0x32c>
    146c:	52 c0       	rjmp	.+164    	; 0x1512 <DIO_voidSetPinDirection+0x3d0>
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	9f 81       	ldd	r25, Y+7	; 0x07
    1472:	85 30       	cpi	r24, 0x05	; 5
    1474:	91 05       	cpc	r25, r1
    1476:	0c f4       	brge	.+2      	; 0x147a <DIO_voidSetPinDirection+0x338>
    1478:	3f c0       	rjmp	.+126    	; 0x14f8 <DIO_voidSetPinDirection+0x3b6>
    147a:	2e 81       	ldd	r18, Y+6	; 0x06
    147c:	3f 81       	ldd	r19, Y+7	; 0x07
    147e:	26 30       	cpi	r18, 0x06	; 6
    1480:	31 05       	cpc	r19, r1
    1482:	09 f4       	brne	.+2      	; 0x1486 <DIO_voidSetPinDirection+0x344>
    1484:	54 c0       	rjmp	.+168    	; 0x152e <DIO_voidSetPinDirection+0x3ec>
    1486:	8e 81       	ldd	r24, Y+6	; 0x06
    1488:	9f 81       	ldd	r25, Y+7	; 0x07
    148a:	87 30       	cpi	r24, 0x07	; 7
    148c:	91 05       	cpc	r25, r1
    148e:	09 f4       	brne	.+2      	; 0x1492 <DIO_voidSetPinDirection+0x350>
    1490:	5d c0       	rjmp	.+186    	; 0x154c <DIO_voidSetPinDirection+0x40a>
    1492:	09 c1       	rjmp	.+530    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRC.Bit.B0 = Copy_Direction;
    1494:	e0 e3       	ldi	r30, 0x30	; 48
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	98 2f       	mov	r25, r24
    149e:	91 70       	andi	r25, 0x01	; 1
    14a0:	84 81       	ldd	r24, Z+4	; 0x04
    14a2:	8e 7f       	andi	r24, 0xFE	; 254
    14a4:	89 2b       	or	r24, r25
    14a6:	84 83       	std	Z+4, r24	; 0x04
    14a8:	fe c0       	rjmp	.+508    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRC.Bit.B1 = Copy_Direction;
    14aa:	e0 e3       	ldi	r30, 0x30	; 48
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	81 70       	andi	r24, 0x01	; 1
    14b2:	81 70       	andi	r24, 0x01	; 1
    14b4:	98 2f       	mov	r25, r24
    14b6:	99 0f       	add	r25, r25
    14b8:	84 81       	ldd	r24, Z+4	; 0x04
    14ba:	8d 7f       	andi	r24, 0xFD	; 253
    14bc:	89 2b       	or	r24, r25
    14be:	84 83       	std	Z+4, r24	; 0x04
    14c0:	f2 c0       	rjmp	.+484    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRC.Bit.B2 = Copy_Direction;
    14c2:	e0 e3       	ldi	r30, 0x30	; 48
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	81 70       	andi	r24, 0x01	; 1
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	98 2f       	mov	r25, r24
    14ce:	99 0f       	add	r25, r25
    14d0:	99 0f       	add	r25, r25
    14d2:	84 81       	ldd	r24, Z+4	; 0x04
    14d4:	8b 7f       	andi	r24, 0xFB	; 251
    14d6:	89 2b       	or	r24, r25
    14d8:	84 83       	std	Z+4, r24	; 0x04
    14da:	e5 c0       	rjmp	.+458    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRC.Bit.B3 = Copy_Direction;
    14dc:	e0 e3       	ldi	r30, 0x30	; 48
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	81 70       	andi	r24, 0x01	; 1
    14e4:	81 70       	andi	r24, 0x01	; 1
    14e6:	98 2f       	mov	r25, r24
    14e8:	99 0f       	add	r25, r25
    14ea:	99 0f       	add	r25, r25
    14ec:	99 0f       	add	r25, r25
    14ee:	84 81       	ldd	r24, Z+4	; 0x04
    14f0:	87 7f       	andi	r24, 0xF7	; 247
    14f2:	89 2b       	or	r24, r25
    14f4:	84 83       	std	Z+4, r24	; 0x04
    14f6:	d7 c0       	rjmp	.+430    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRC.Bit.B4 = Copy_Direction;
    14f8:	e0 e3       	ldi	r30, 0x30	; 48
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	81 70       	andi	r24, 0x01	; 1
    1502:	98 2f       	mov	r25, r24
    1504:	92 95       	swap	r25
    1506:	90 7f       	andi	r25, 0xF0	; 240
    1508:	84 81       	ldd	r24, Z+4	; 0x04
    150a:	8f 7e       	andi	r24, 0xEF	; 239
    150c:	89 2b       	or	r24, r25
    150e:	84 83       	std	Z+4, r24	; 0x04
    1510:	ca c0       	rjmp	.+404    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRC.Bit.B5 = Copy_Direction;
    1512:	e0 e3       	ldi	r30, 0x30	; 48
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	81 70       	andi	r24, 0x01	; 1
    151a:	81 70       	andi	r24, 0x01	; 1
    151c:	98 2f       	mov	r25, r24
    151e:	92 95       	swap	r25
    1520:	99 0f       	add	r25, r25
    1522:	90 7e       	andi	r25, 0xE0	; 224
    1524:	84 81       	ldd	r24, Z+4	; 0x04
    1526:	8f 7d       	andi	r24, 0xDF	; 223
    1528:	89 2b       	or	r24, r25
    152a:	84 83       	std	Z+4, r24	; 0x04
    152c:	bc c0       	rjmp	.+376    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRC.Bit.B6 = Copy_Direction;
    152e:	e0 e3       	ldi	r30, 0x30	; 48
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	81 70       	andi	r24, 0x01	; 1
    1536:	81 70       	andi	r24, 0x01	; 1
    1538:	98 2f       	mov	r25, r24
    153a:	92 95       	swap	r25
    153c:	99 0f       	add	r25, r25
    153e:	99 0f       	add	r25, r25
    1540:	90 7c       	andi	r25, 0xC0	; 192
    1542:	84 81       	ldd	r24, Z+4	; 0x04
    1544:	8f 7b       	andi	r24, 0xBF	; 191
    1546:	89 2b       	or	r24, r25
    1548:	84 83       	std	Z+4, r24	; 0x04
    154a:	ad c0       	rjmp	.+346    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRC.Bit.B7 = Copy_Direction;
    154c:	e0 e3       	ldi	r30, 0x30	; 48
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	81 70       	andi	r24, 0x01	; 1
    1554:	98 2f       	mov	r25, r24
    1556:	97 95       	ror	r25
    1558:	99 27       	eor	r25, r25
    155a:	97 95       	ror	r25
    155c:	84 81       	ldd	r24, Z+4	; 0x04
    155e:	8f 77       	andi	r24, 0x7F	; 127
    1560:	89 2b       	or	r24, r25
    1562:	84 83       	std	Z+4, r24	; 0x04
    1564:	a0 c0       	rjmp	.+320    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
				default: break;
			}
			break;

		case PORT_D:
			switch(Copy_PinId)
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3d 83       	std	Y+5, r19	; 0x05
    156e:	2c 83       	std	Y+4, r18	; 0x04
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <DIO_voidSetPinDirection+0x43a>
    157a:	51 c0       	rjmp	.+162    	; 0x161e <DIO_voidSetPinDirection+0x4dc>
    157c:	2c 81       	ldd	r18, Y+4	; 0x04
    157e:	3d 81       	ldd	r19, Y+5	; 0x05
    1580:	24 30       	cpi	r18, 0x04	; 4
    1582:	31 05       	cpc	r19, r1
    1584:	7c f4       	brge	.+30     	; 0x15a4 <DIO_voidSetPinDirection+0x462>
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	91 05       	cpc	r25, r1
    158e:	71 f1       	breq	.+92     	; 0x15ec <DIO_voidSetPinDirection+0x4aa>
    1590:	2c 81       	ldd	r18, Y+4	; 0x04
    1592:	3d 81       	ldd	r19, Y+5	; 0x05
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	ac f5       	brge	.+106    	; 0x1604 <DIO_voidSetPinDirection+0x4c2>
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	d1 f0       	breq	.+52     	; 0x15d6 <DIO_voidSetPinDirection+0x494>
    15a2:	81 c0       	rjmp	.+258    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
    15a4:	2c 81       	ldd	r18, Y+4	; 0x04
    15a6:	3d 81       	ldd	r19, Y+5	; 0x05
    15a8:	25 30       	cpi	r18, 0x05	; 5
    15aa:	31 05       	cpc	r19, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <DIO_voidSetPinDirection+0x46e>
    15ae:	52 c0       	rjmp	.+164    	; 0x1654 <DIO_voidSetPinDirection+0x512>
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	85 30       	cpi	r24, 0x05	; 5
    15b6:	91 05       	cpc	r25, r1
    15b8:	0c f4       	brge	.+2      	; 0x15bc <DIO_voidSetPinDirection+0x47a>
    15ba:	3f c0       	rjmp	.+126    	; 0x163a <DIO_voidSetPinDirection+0x4f8>
    15bc:	2c 81       	ldd	r18, Y+4	; 0x04
    15be:	3d 81       	ldd	r19, Y+5	; 0x05
    15c0:	26 30       	cpi	r18, 0x06	; 6
    15c2:	31 05       	cpc	r19, r1
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <DIO_voidSetPinDirection+0x486>
    15c6:	54 c0       	rjmp	.+168    	; 0x1670 <DIO_voidSetPinDirection+0x52e>
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	9d 81       	ldd	r25, Y+5	; 0x05
    15cc:	87 30       	cpi	r24, 0x07	; 7
    15ce:	91 05       	cpc	r25, r1
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <DIO_voidSetPinDirection+0x492>
    15d2:	5d c0       	rjmp	.+186    	; 0x168e <DIO_voidSetPinDirection+0x54c>
    15d4:	68 c0       	rjmp	.+208    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
			{
				case PIN_0 :
						DIO->DDRD.Bit.B0 = Copy_Direction;
    15d6:	e0 e3       	ldi	r30, 0x30	; 48
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	81 70       	andi	r24, 0x01	; 1
    15de:	98 2f       	mov	r25, r24
    15e0:	91 70       	andi	r25, 0x01	; 1
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	8e 7f       	andi	r24, 0xFE	; 254
    15e6:	89 2b       	or	r24, r25
    15e8:	81 83       	std	Z+1, r24	; 0x01
    15ea:	5d c0       	rjmp	.+186    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_1 :
						DIO->DDRD.Bit.B1 = Copy_Direction;
    15ec:	e0 e3       	ldi	r30, 0x30	; 48
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	81 70       	andi	r24, 0x01	; 1
    15f6:	98 2f       	mov	r25, r24
    15f8:	99 0f       	add	r25, r25
    15fa:	81 81       	ldd	r24, Z+1	; 0x01
    15fc:	8d 7f       	andi	r24, 0xFD	; 253
    15fe:	89 2b       	or	r24, r25
    1600:	81 83       	std	Z+1, r24	; 0x01
    1602:	51 c0       	rjmp	.+162    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_2 :
						DIO->DDRD.Bit.B2 = Copy_Direction;
    1604:	e0 e3       	ldi	r30, 0x30	; 48
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	81 70       	andi	r24, 0x01	; 1
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	98 2f       	mov	r25, r24
    1610:	99 0f       	add	r25, r25
    1612:	99 0f       	add	r25, r25
    1614:	81 81       	ldd	r24, Z+1	; 0x01
    1616:	8b 7f       	andi	r24, 0xFB	; 251
    1618:	89 2b       	or	r24, r25
    161a:	81 83       	std	Z+1, r24	; 0x01
    161c:	44 c0       	rjmp	.+136    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_3 :
						DIO->DDRD.Bit.B3 = Copy_Direction;
    161e:	e0 e3       	ldi	r30, 0x30	; 48
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	81 70       	andi	r24, 0x01	; 1
    1626:	81 70       	andi	r24, 0x01	; 1
    1628:	98 2f       	mov	r25, r24
    162a:	99 0f       	add	r25, r25
    162c:	99 0f       	add	r25, r25
    162e:	99 0f       	add	r25, r25
    1630:	81 81       	ldd	r24, Z+1	; 0x01
    1632:	87 7f       	andi	r24, 0xF7	; 247
    1634:	89 2b       	or	r24, r25
    1636:	81 83       	std	Z+1, r24	; 0x01
    1638:	36 c0       	rjmp	.+108    	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_4 :
						DIO->DDRD.Bit.B4 = Copy_Direction;
    163a:	e0 e3       	ldi	r30, 0x30	; 48
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	81 70       	andi	r24, 0x01	; 1
    1642:	81 70       	andi	r24, 0x01	; 1
    1644:	98 2f       	mov	r25, r24
    1646:	92 95       	swap	r25
    1648:	90 7f       	andi	r25, 0xF0	; 240
    164a:	81 81       	ldd	r24, Z+1	; 0x01
    164c:	8f 7e       	andi	r24, 0xEF	; 239
    164e:	89 2b       	or	r24, r25
    1650:	81 83       	std	Z+1, r24	; 0x01
    1652:	29 c0       	rjmp	.+82     	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_5 :
						DIO->DDRD.Bit.B5 = Copy_Direction;
    1654:	e0 e3       	ldi	r30, 0x30	; 48
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	81 70       	andi	r24, 0x01	; 1
    165c:	81 70       	andi	r24, 0x01	; 1
    165e:	98 2f       	mov	r25, r24
    1660:	92 95       	swap	r25
    1662:	99 0f       	add	r25, r25
    1664:	90 7e       	andi	r25, 0xE0	; 224
    1666:	81 81       	ldd	r24, Z+1	; 0x01
    1668:	8f 7d       	andi	r24, 0xDF	; 223
    166a:	89 2b       	or	r24, r25
    166c:	81 83       	std	Z+1, r24	; 0x01
    166e:	1b c0       	rjmp	.+54     	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_6 :
						DIO->DDRD.Bit.B6 = Copy_Direction;
    1670:	e0 e3       	ldi	r30, 0x30	; 48
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	81 70       	andi	r24, 0x01	; 1
    1678:	81 70       	andi	r24, 0x01	; 1
    167a:	98 2f       	mov	r25, r24
    167c:	92 95       	swap	r25
    167e:	99 0f       	add	r25, r25
    1680:	99 0f       	add	r25, r25
    1682:	90 7c       	andi	r25, 0xC0	; 192
    1684:	81 81       	ldd	r24, Z+1	; 0x01
    1686:	8f 7b       	andi	r24, 0xBF	; 191
    1688:	89 2b       	or	r24, r25
    168a:	81 83       	std	Z+1, r24	; 0x01
    168c:	0c c0       	rjmp	.+24     	; 0x16a6 <DIO_voidSetPinDirection+0x564>
						break;
				case PIN_7 :
						DIO->DDRD.Bit.B7 = Copy_Direction;
    168e:	e0 e3       	ldi	r30, 0x30	; 48
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	81 70       	andi	r24, 0x01	; 1
    1696:	98 2f       	mov	r25, r24
    1698:	97 95       	ror	r25
    169a:	99 27       	eor	r25, r25
    169c:	97 95       	ror	r25
    169e:	81 81       	ldd	r24, Z+1	; 0x01
    16a0:	8f 77       	andi	r24, 0x7F	; 127
    16a2:	89 2b       	or	r24, r25
    16a4:	81 83       	std	Z+1, r24	; 0x01
						break;
				default: break;
			}
			break;
	}
}
    16a6:	2d 96       	adiw	r28, 0x0d	; 13
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <DIO_voidSetPinValue>:




void DIO_voidSetPinValue(PORT_t Copy_PortId,PIN_t Copy_PinId,VALUE_t Copy_Value)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	2d 97       	sbiw	r28, 0x0d	; 13
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	6a 83       	std	Y+2, r22	; 0x02
    16d0:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_PortId)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3d 87       	std	Y+13, r19	; 0x0d
    16da:	2c 87       	std	Y+12, r18	; 0x0c
    16dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    16de:	9d 85       	ldd	r25, Y+13	; 0x0d
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <DIO_voidSetPinValue+0x30>
    16e6:	b8 c0       	rjmp	.+368    	; 0x1858 <DIO_voidSetPinValue+0x1a0>
    16e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ea:	3d 85       	ldd	r19, Y+13	; 0x0d
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	2c f4       	brge	.+10     	; 0x16fc <DIO_voidSetPinValue+0x44>
    16f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    16f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	71 f0       	breq	.+28     	; 0x1716 <DIO_voidSetPinValue+0x5e>
    16fa:	90 c2       	rjmp	.+1312   	; 0x1c1c <DIO_voidSetPinValue+0x564>
    16fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    16fe:	3d 85       	ldd	r19, Y+13	; 0x0d
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	09 f4       	brne	.+2      	; 0x1708 <DIO_voidSetPinValue+0x50>
    1706:	49 c1       	rjmp	.+658    	; 0x199a <DIO_voidSetPinValue+0x2e2>
    1708:	8c 85       	ldd	r24, Y+12	; 0x0c
    170a:	9d 85       	ldd	r25, Y+13	; 0x0d
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	91 05       	cpc	r25, r1
    1710:	09 f4       	brne	.+2      	; 0x1714 <DIO_voidSetPinValue+0x5c>
    1712:	e4 c1       	rjmp	.+968    	; 0x1adc <DIO_voidSetPinValue+0x424>
    1714:	83 c2       	rjmp	.+1286   	; 0x1c1c <DIO_voidSetPinValue+0x564>
	{
		case PORT_A:
			switch(Copy_PinId)
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	3b 87       	std	Y+11, r19	; 0x0b
    171e:	2a 87       	std	Y+10, r18	; 0x0a
    1720:	8a 85       	ldd	r24, Y+10	; 0x0a
    1722:	9b 85       	ldd	r25, Y+11	; 0x0b
    1724:	83 30       	cpi	r24, 0x03	; 3
    1726:	91 05       	cpc	r25, r1
    1728:	09 f4       	brne	.+2      	; 0x172c <DIO_voidSetPinValue+0x74>
    172a:	51 c0       	rjmp	.+162    	; 0x17ce <DIO_voidSetPinValue+0x116>
    172c:	2a 85       	ldd	r18, Y+10	; 0x0a
    172e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1730:	24 30       	cpi	r18, 0x04	; 4
    1732:	31 05       	cpc	r19, r1
    1734:	7c f4       	brge	.+30     	; 0x1754 <DIO_voidSetPinValue+0x9c>
    1736:	8a 85       	ldd	r24, Y+10	; 0x0a
    1738:	9b 85       	ldd	r25, Y+11	; 0x0b
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	71 f1       	breq	.+92     	; 0x179c <DIO_voidSetPinValue+0xe4>
    1740:	2a 85       	ldd	r18, Y+10	; 0x0a
    1742:	3b 85       	ldd	r19, Y+11	; 0x0b
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	ac f5       	brge	.+106    	; 0x17b4 <DIO_voidSetPinValue+0xfc>
    174a:	8a 85       	ldd	r24, Y+10	; 0x0a
    174c:	9b 85       	ldd	r25, Y+11	; 0x0b
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	d1 f0       	breq	.+52     	; 0x1786 <DIO_voidSetPinValue+0xce>
    1752:	64 c2       	rjmp	.+1224   	; 0x1c1c <DIO_voidSetPinValue+0x564>
    1754:	2a 85       	ldd	r18, Y+10	; 0x0a
    1756:	3b 85       	ldd	r19, Y+11	; 0x0b
    1758:	25 30       	cpi	r18, 0x05	; 5
    175a:	31 05       	cpc	r19, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <DIO_voidSetPinValue+0xa8>
    175e:	52 c0       	rjmp	.+164    	; 0x1804 <DIO_voidSetPinValue+0x14c>
    1760:	8a 85       	ldd	r24, Y+10	; 0x0a
    1762:	9b 85       	ldd	r25, Y+11	; 0x0b
    1764:	85 30       	cpi	r24, 0x05	; 5
    1766:	91 05       	cpc	r25, r1
    1768:	0c f4       	brge	.+2      	; 0x176c <DIO_voidSetPinValue+0xb4>
    176a:	3f c0       	rjmp	.+126    	; 0x17ea <DIO_voidSetPinValue+0x132>
    176c:	2a 85       	ldd	r18, Y+10	; 0x0a
    176e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1770:	26 30       	cpi	r18, 0x06	; 6
    1772:	31 05       	cpc	r19, r1
    1774:	09 f4       	brne	.+2      	; 0x1778 <DIO_voidSetPinValue+0xc0>
    1776:	54 c0       	rjmp	.+168    	; 0x1820 <DIO_voidSetPinValue+0x168>
    1778:	8a 85       	ldd	r24, Y+10	; 0x0a
    177a:	9b 85       	ldd	r25, Y+11	; 0x0b
    177c:	87 30       	cpi	r24, 0x07	; 7
    177e:	91 05       	cpc	r25, r1
    1780:	09 f4       	brne	.+2      	; 0x1784 <DIO_voidSetPinValue+0xcc>
    1782:	5d c0       	rjmp	.+186    	; 0x183e <DIO_voidSetPinValue+0x186>
    1784:	4b c2       	rjmp	.+1174   	; 0x1c1c <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTA.Bit.B0 = Copy_Value;
    1786:	e0 e3       	ldi	r30, 0x30	; 48
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	81 70       	andi	r24, 0x01	; 1
    178e:	98 2f       	mov	r25, r24
    1790:	91 70       	andi	r25, 0x01	; 1
    1792:	83 85       	ldd	r24, Z+11	; 0x0b
    1794:	8e 7f       	andi	r24, 0xFE	; 254
    1796:	89 2b       	or	r24, r25
    1798:	83 87       	std	Z+11, r24	; 0x0b
    179a:	40 c2       	rjmp	.+1152   	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTA.Bit.B1 = Copy_Value;
    179c:	e0 e3       	ldi	r30, 0x30	; 48
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	81 70       	andi	r24, 0x01	; 1
    17a4:	81 70       	andi	r24, 0x01	; 1
    17a6:	98 2f       	mov	r25, r24
    17a8:	99 0f       	add	r25, r25
    17aa:	83 85       	ldd	r24, Z+11	; 0x0b
    17ac:	8d 7f       	andi	r24, 0xFD	; 253
    17ae:	89 2b       	or	r24, r25
    17b0:	83 87       	std	Z+11, r24	; 0x0b
    17b2:	34 c2       	rjmp	.+1128   	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTA.Bit.B2 = Copy_Value;
    17b4:	e0 e3       	ldi	r30, 0x30	; 48
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	81 70       	andi	r24, 0x01	; 1
    17bc:	81 70       	andi	r24, 0x01	; 1
    17be:	98 2f       	mov	r25, r24
    17c0:	99 0f       	add	r25, r25
    17c2:	99 0f       	add	r25, r25
    17c4:	83 85       	ldd	r24, Z+11	; 0x0b
    17c6:	8b 7f       	andi	r24, 0xFB	; 251
    17c8:	89 2b       	or	r24, r25
    17ca:	83 87       	std	Z+11, r24	; 0x0b
    17cc:	27 c2       	rjmp	.+1102   	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTA.Bit.B3 = Copy_Value;
    17ce:	e0 e3       	ldi	r30, 0x30	; 48
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	81 70       	andi	r24, 0x01	; 1
    17d6:	81 70       	andi	r24, 0x01	; 1
    17d8:	98 2f       	mov	r25, r24
    17da:	99 0f       	add	r25, r25
    17dc:	99 0f       	add	r25, r25
    17de:	99 0f       	add	r25, r25
    17e0:	83 85       	ldd	r24, Z+11	; 0x0b
    17e2:	87 7f       	andi	r24, 0xF7	; 247
    17e4:	89 2b       	or	r24, r25
    17e6:	83 87       	std	Z+11, r24	; 0x0b
    17e8:	19 c2       	rjmp	.+1074   	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTA.Bit.B4 = Copy_Value;
    17ea:	e0 e3       	ldi	r30, 0x30	; 48
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	81 70       	andi	r24, 0x01	; 1
    17f2:	81 70       	andi	r24, 0x01	; 1
    17f4:	98 2f       	mov	r25, r24
    17f6:	92 95       	swap	r25
    17f8:	90 7f       	andi	r25, 0xF0	; 240
    17fa:	83 85       	ldd	r24, Z+11	; 0x0b
    17fc:	8f 7e       	andi	r24, 0xEF	; 239
    17fe:	89 2b       	or	r24, r25
    1800:	83 87       	std	Z+11, r24	; 0x0b
    1802:	0c c2       	rjmp	.+1048   	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTA.Bit.B5 = Copy_Value;
    1804:	e0 e3       	ldi	r30, 0x30	; 48
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	81 70       	andi	r24, 0x01	; 1
    180c:	81 70       	andi	r24, 0x01	; 1
    180e:	98 2f       	mov	r25, r24
    1810:	92 95       	swap	r25
    1812:	99 0f       	add	r25, r25
    1814:	90 7e       	andi	r25, 0xE0	; 224
    1816:	83 85       	ldd	r24, Z+11	; 0x0b
    1818:	8f 7d       	andi	r24, 0xDF	; 223
    181a:	89 2b       	or	r24, r25
    181c:	83 87       	std	Z+11, r24	; 0x0b
    181e:	fe c1       	rjmp	.+1020   	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTA.Bit.B6 = Copy_Value;
    1820:	e0 e3       	ldi	r30, 0x30	; 48
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	81 70       	andi	r24, 0x01	; 1
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	98 2f       	mov	r25, r24
    182c:	92 95       	swap	r25
    182e:	99 0f       	add	r25, r25
    1830:	99 0f       	add	r25, r25
    1832:	90 7c       	andi	r25, 0xC0	; 192
    1834:	83 85       	ldd	r24, Z+11	; 0x0b
    1836:	8f 7b       	andi	r24, 0xBF	; 191
    1838:	89 2b       	or	r24, r25
    183a:	83 87       	std	Z+11, r24	; 0x0b
    183c:	ef c1       	rjmp	.+990    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTA.Bit.B7 = Copy_Value;
    183e:	e0 e3       	ldi	r30, 0x30	; 48
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	81 70       	andi	r24, 0x01	; 1
    1846:	98 2f       	mov	r25, r24
    1848:	97 95       	ror	r25
    184a:	99 27       	eor	r25, r25
    184c:	97 95       	ror	r25
    184e:	83 85       	ldd	r24, Z+11	; 0x0b
    1850:	8f 77       	andi	r24, 0x7F	; 127
    1852:	89 2b       	or	r24, r25
    1854:	83 87       	std	Z+11, r24	; 0x0b
    1856:	e2 c1       	rjmp	.+964    	; 0x1c1c <DIO_voidSetPinValue+0x564>
				default: break;
			}
			break;

		case PORT_B:
			switch(Copy_PinId)
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	39 87       	std	Y+9, r19	; 0x09
    1860:	28 87       	std	Y+8, r18	; 0x08
    1862:	88 85       	ldd	r24, Y+8	; 0x08
    1864:	99 85       	ldd	r25, Y+9	; 0x09
    1866:	83 30       	cpi	r24, 0x03	; 3
    1868:	91 05       	cpc	r25, r1
    186a:	09 f4       	brne	.+2      	; 0x186e <DIO_voidSetPinValue+0x1b6>
    186c:	51 c0       	rjmp	.+162    	; 0x1910 <DIO_voidSetPinValue+0x258>
    186e:	28 85       	ldd	r18, Y+8	; 0x08
    1870:	39 85       	ldd	r19, Y+9	; 0x09
    1872:	24 30       	cpi	r18, 0x04	; 4
    1874:	31 05       	cpc	r19, r1
    1876:	7c f4       	brge	.+30     	; 0x1896 <DIO_voidSetPinValue+0x1de>
    1878:	88 85       	ldd	r24, Y+8	; 0x08
    187a:	99 85       	ldd	r25, Y+9	; 0x09
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	91 05       	cpc	r25, r1
    1880:	71 f1       	breq	.+92     	; 0x18de <DIO_voidSetPinValue+0x226>
    1882:	28 85       	ldd	r18, Y+8	; 0x08
    1884:	39 85       	ldd	r19, Y+9	; 0x09
    1886:	22 30       	cpi	r18, 0x02	; 2
    1888:	31 05       	cpc	r19, r1
    188a:	ac f5       	brge	.+106    	; 0x18f6 <DIO_voidSetPinValue+0x23e>
    188c:	88 85       	ldd	r24, Y+8	; 0x08
    188e:	99 85       	ldd	r25, Y+9	; 0x09
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	d1 f0       	breq	.+52     	; 0x18c8 <DIO_voidSetPinValue+0x210>
    1894:	c3 c1       	rjmp	.+902    	; 0x1c1c <DIO_voidSetPinValue+0x564>
    1896:	28 85       	ldd	r18, Y+8	; 0x08
    1898:	39 85       	ldd	r19, Y+9	; 0x09
    189a:	25 30       	cpi	r18, 0x05	; 5
    189c:	31 05       	cpc	r19, r1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <DIO_voidSetPinValue+0x1ea>
    18a0:	52 c0       	rjmp	.+164    	; 0x1946 <DIO_voidSetPinValue+0x28e>
    18a2:	88 85       	ldd	r24, Y+8	; 0x08
    18a4:	99 85       	ldd	r25, Y+9	; 0x09
    18a6:	85 30       	cpi	r24, 0x05	; 5
    18a8:	91 05       	cpc	r25, r1
    18aa:	0c f4       	brge	.+2      	; 0x18ae <DIO_voidSetPinValue+0x1f6>
    18ac:	3f c0       	rjmp	.+126    	; 0x192c <DIO_voidSetPinValue+0x274>
    18ae:	28 85       	ldd	r18, Y+8	; 0x08
    18b0:	39 85       	ldd	r19, Y+9	; 0x09
    18b2:	26 30       	cpi	r18, 0x06	; 6
    18b4:	31 05       	cpc	r19, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <DIO_voidSetPinValue+0x202>
    18b8:	54 c0       	rjmp	.+168    	; 0x1962 <DIO_voidSetPinValue+0x2aa>
    18ba:	88 85       	ldd	r24, Y+8	; 0x08
    18bc:	99 85       	ldd	r25, Y+9	; 0x09
    18be:	87 30       	cpi	r24, 0x07	; 7
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <DIO_voidSetPinValue+0x20e>
    18c4:	5d c0       	rjmp	.+186    	; 0x1980 <DIO_voidSetPinValue+0x2c8>
    18c6:	aa c1       	rjmp	.+852    	; 0x1c1c <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTB.Bit.B0 = Copy_Value;
    18c8:	e0 e3       	ldi	r30, 0x30	; 48
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	81 70       	andi	r24, 0x01	; 1
    18d0:	98 2f       	mov	r25, r24
    18d2:	91 70       	andi	r25, 0x01	; 1
    18d4:	80 85       	ldd	r24, Z+8	; 0x08
    18d6:	8e 7f       	andi	r24, 0xFE	; 254
    18d8:	89 2b       	or	r24, r25
    18da:	80 87       	std	Z+8, r24	; 0x08
    18dc:	9f c1       	rjmp	.+830    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTB.Bit.B1 = Copy_Value;
    18de:	e0 e3       	ldi	r30, 0x30	; 48
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	81 70       	andi	r24, 0x01	; 1
    18e6:	81 70       	andi	r24, 0x01	; 1
    18e8:	98 2f       	mov	r25, r24
    18ea:	99 0f       	add	r25, r25
    18ec:	80 85       	ldd	r24, Z+8	; 0x08
    18ee:	8d 7f       	andi	r24, 0xFD	; 253
    18f0:	89 2b       	or	r24, r25
    18f2:	80 87       	std	Z+8, r24	; 0x08
    18f4:	93 c1       	rjmp	.+806    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTB.Bit.B2 = Copy_Value;
    18f6:	e0 e3       	ldi	r30, 0x30	; 48
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	81 70       	andi	r24, 0x01	; 1
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	98 2f       	mov	r25, r24
    1902:	99 0f       	add	r25, r25
    1904:	99 0f       	add	r25, r25
    1906:	80 85       	ldd	r24, Z+8	; 0x08
    1908:	8b 7f       	andi	r24, 0xFB	; 251
    190a:	89 2b       	or	r24, r25
    190c:	80 87       	std	Z+8, r24	; 0x08
    190e:	86 c1       	rjmp	.+780    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTB.Bit.B3 = Copy_Value;
    1910:	e0 e3       	ldi	r30, 0x30	; 48
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	81 70       	andi	r24, 0x01	; 1
    1918:	81 70       	andi	r24, 0x01	; 1
    191a:	98 2f       	mov	r25, r24
    191c:	99 0f       	add	r25, r25
    191e:	99 0f       	add	r25, r25
    1920:	99 0f       	add	r25, r25
    1922:	80 85       	ldd	r24, Z+8	; 0x08
    1924:	87 7f       	andi	r24, 0xF7	; 247
    1926:	89 2b       	or	r24, r25
    1928:	80 87       	std	Z+8, r24	; 0x08
    192a:	78 c1       	rjmp	.+752    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTB.Bit.B4 = Copy_Value;
    192c:	e0 e3       	ldi	r30, 0x30	; 48
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	81 70       	andi	r24, 0x01	; 1
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	98 2f       	mov	r25, r24
    1938:	92 95       	swap	r25
    193a:	90 7f       	andi	r25, 0xF0	; 240
    193c:	80 85       	ldd	r24, Z+8	; 0x08
    193e:	8f 7e       	andi	r24, 0xEF	; 239
    1940:	89 2b       	or	r24, r25
    1942:	80 87       	std	Z+8, r24	; 0x08
    1944:	6b c1       	rjmp	.+726    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTB.Bit.B5 = Copy_Value;
    1946:	e0 e3       	ldi	r30, 0x30	; 48
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	81 70       	andi	r24, 0x01	; 1
    194e:	81 70       	andi	r24, 0x01	; 1
    1950:	98 2f       	mov	r25, r24
    1952:	92 95       	swap	r25
    1954:	99 0f       	add	r25, r25
    1956:	90 7e       	andi	r25, 0xE0	; 224
    1958:	80 85       	ldd	r24, Z+8	; 0x08
    195a:	8f 7d       	andi	r24, 0xDF	; 223
    195c:	89 2b       	or	r24, r25
    195e:	80 87       	std	Z+8, r24	; 0x08
    1960:	5d c1       	rjmp	.+698    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTB.Bit.B6 = Copy_Value;
    1962:	e0 e3       	ldi	r30, 0x30	; 48
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	81 70       	andi	r24, 0x01	; 1
    196a:	81 70       	andi	r24, 0x01	; 1
    196c:	98 2f       	mov	r25, r24
    196e:	92 95       	swap	r25
    1970:	99 0f       	add	r25, r25
    1972:	99 0f       	add	r25, r25
    1974:	90 7c       	andi	r25, 0xC0	; 192
    1976:	80 85       	ldd	r24, Z+8	; 0x08
    1978:	8f 7b       	andi	r24, 0xBF	; 191
    197a:	89 2b       	or	r24, r25
    197c:	80 87       	std	Z+8, r24	; 0x08
    197e:	4e c1       	rjmp	.+668    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTB.Bit.B7 = Copy_Value;
    1980:	e0 e3       	ldi	r30, 0x30	; 48
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	81 70       	andi	r24, 0x01	; 1
    1988:	98 2f       	mov	r25, r24
    198a:	97 95       	ror	r25
    198c:	99 27       	eor	r25, r25
    198e:	97 95       	ror	r25
    1990:	80 85       	ldd	r24, Z+8	; 0x08
    1992:	8f 77       	andi	r24, 0x7F	; 127
    1994:	89 2b       	or	r24, r25
    1996:	80 87       	std	Z+8, r24	; 0x08
    1998:	41 c1       	rjmp	.+642    	; 0x1c1c <DIO_voidSetPinValue+0x564>
			}
			break;


		case PORT_C:
			switch(Copy_PinId)
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	3f 83       	std	Y+7, r19	; 0x07
    19a2:	2e 83       	std	Y+6, r18	; 0x06
    19a4:	8e 81       	ldd	r24, Y+6	; 0x06
    19a6:	9f 81       	ldd	r25, Y+7	; 0x07
    19a8:	83 30       	cpi	r24, 0x03	; 3
    19aa:	91 05       	cpc	r25, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <DIO_voidSetPinValue+0x2f8>
    19ae:	51 c0       	rjmp	.+162    	; 0x1a52 <DIO_voidSetPinValue+0x39a>
    19b0:	2e 81       	ldd	r18, Y+6	; 0x06
    19b2:	3f 81       	ldd	r19, Y+7	; 0x07
    19b4:	24 30       	cpi	r18, 0x04	; 4
    19b6:	31 05       	cpc	r19, r1
    19b8:	7c f4       	brge	.+30     	; 0x19d8 <DIO_voidSetPinValue+0x320>
    19ba:	8e 81       	ldd	r24, Y+6	; 0x06
    19bc:	9f 81       	ldd	r25, Y+7	; 0x07
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	91 05       	cpc	r25, r1
    19c2:	71 f1       	breq	.+92     	; 0x1a20 <DIO_voidSetPinValue+0x368>
    19c4:	2e 81       	ldd	r18, Y+6	; 0x06
    19c6:	3f 81       	ldd	r19, Y+7	; 0x07
    19c8:	22 30       	cpi	r18, 0x02	; 2
    19ca:	31 05       	cpc	r19, r1
    19cc:	ac f5       	brge	.+106    	; 0x1a38 <DIO_voidSetPinValue+0x380>
    19ce:	8e 81       	ldd	r24, Y+6	; 0x06
    19d0:	9f 81       	ldd	r25, Y+7	; 0x07
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	d1 f0       	breq	.+52     	; 0x1a0a <DIO_voidSetPinValue+0x352>
    19d6:	22 c1       	rjmp	.+580    	; 0x1c1c <DIO_voidSetPinValue+0x564>
    19d8:	2e 81       	ldd	r18, Y+6	; 0x06
    19da:	3f 81       	ldd	r19, Y+7	; 0x07
    19dc:	25 30       	cpi	r18, 0x05	; 5
    19de:	31 05       	cpc	r19, r1
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <DIO_voidSetPinValue+0x32c>
    19e2:	52 c0       	rjmp	.+164    	; 0x1a88 <DIO_voidSetPinValue+0x3d0>
    19e4:	8e 81       	ldd	r24, Y+6	; 0x06
    19e6:	9f 81       	ldd	r25, Y+7	; 0x07
    19e8:	85 30       	cpi	r24, 0x05	; 5
    19ea:	91 05       	cpc	r25, r1
    19ec:	0c f4       	brge	.+2      	; 0x19f0 <DIO_voidSetPinValue+0x338>
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <DIO_voidSetPinValue+0x3b6>
    19f0:	2e 81       	ldd	r18, Y+6	; 0x06
    19f2:	3f 81       	ldd	r19, Y+7	; 0x07
    19f4:	26 30       	cpi	r18, 0x06	; 6
    19f6:	31 05       	cpc	r19, r1
    19f8:	09 f4       	brne	.+2      	; 0x19fc <DIO_voidSetPinValue+0x344>
    19fa:	54 c0       	rjmp	.+168    	; 0x1aa4 <DIO_voidSetPinValue+0x3ec>
    19fc:	8e 81       	ldd	r24, Y+6	; 0x06
    19fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1a00:	87 30       	cpi	r24, 0x07	; 7
    1a02:	91 05       	cpc	r25, r1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <DIO_voidSetPinValue+0x350>
    1a06:	5d c0       	rjmp	.+186    	; 0x1ac2 <DIO_voidSetPinValue+0x40a>
    1a08:	09 c1       	rjmp	.+530    	; 0x1c1c <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTC.Bit.B0 = Copy_Value;
    1a0a:	e0 e3       	ldi	r30, 0x30	; 48
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	81 70       	andi	r24, 0x01	; 1
    1a12:	98 2f       	mov	r25, r24
    1a14:	91 70       	andi	r25, 0x01	; 1
    1a16:	85 81       	ldd	r24, Z+5	; 0x05
    1a18:	8e 7f       	andi	r24, 0xFE	; 254
    1a1a:	89 2b       	or	r24, r25
    1a1c:	85 83       	std	Z+5, r24	; 0x05
    1a1e:	fe c0       	rjmp	.+508    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTC.Bit.B1 = Copy_Value;
    1a20:	e0 e3       	ldi	r30, 0x30	; 48
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	81 70       	andi	r24, 0x01	; 1
    1a28:	81 70       	andi	r24, 0x01	; 1
    1a2a:	98 2f       	mov	r25, r24
    1a2c:	99 0f       	add	r25, r25
    1a2e:	85 81       	ldd	r24, Z+5	; 0x05
    1a30:	8d 7f       	andi	r24, 0xFD	; 253
    1a32:	89 2b       	or	r24, r25
    1a34:	85 83       	std	Z+5, r24	; 0x05
    1a36:	f2 c0       	rjmp	.+484    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTC.Bit.B2 = Copy_Value;
    1a38:	e0 e3       	ldi	r30, 0x30	; 48
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	81 70       	andi	r24, 0x01	; 1
    1a42:	98 2f       	mov	r25, r24
    1a44:	99 0f       	add	r25, r25
    1a46:	99 0f       	add	r25, r25
    1a48:	85 81       	ldd	r24, Z+5	; 0x05
    1a4a:	8b 7f       	andi	r24, 0xFB	; 251
    1a4c:	89 2b       	or	r24, r25
    1a4e:	85 83       	std	Z+5, r24	; 0x05
    1a50:	e5 c0       	rjmp	.+458    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTC.Bit.B3 = Copy_Value;
    1a52:	e0 e3       	ldi	r30, 0x30	; 48
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	81 70       	andi	r24, 0x01	; 1
    1a5a:	81 70       	andi	r24, 0x01	; 1
    1a5c:	98 2f       	mov	r25, r24
    1a5e:	99 0f       	add	r25, r25
    1a60:	99 0f       	add	r25, r25
    1a62:	99 0f       	add	r25, r25
    1a64:	85 81       	ldd	r24, Z+5	; 0x05
    1a66:	87 7f       	andi	r24, 0xF7	; 247
    1a68:	89 2b       	or	r24, r25
    1a6a:	85 83       	std	Z+5, r24	; 0x05
    1a6c:	d7 c0       	rjmp	.+430    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTC.Bit.B4 = Copy_Value;
    1a6e:	e0 e3       	ldi	r30, 0x30	; 48
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	81 70       	andi	r24, 0x01	; 1
    1a76:	81 70       	andi	r24, 0x01	; 1
    1a78:	98 2f       	mov	r25, r24
    1a7a:	92 95       	swap	r25
    1a7c:	90 7f       	andi	r25, 0xF0	; 240
    1a7e:	85 81       	ldd	r24, Z+5	; 0x05
    1a80:	8f 7e       	andi	r24, 0xEF	; 239
    1a82:	89 2b       	or	r24, r25
    1a84:	85 83       	std	Z+5, r24	; 0x05
    1a86:	ca c0       	rjmp	.+404    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTC.Bit.B5 = Copy_Value;
    1a88:	e0 e3       	ldi	r30, 0x30	; 48
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	81 70       	andi	r24, 0x01	; 1
    1a90:	81 70       	andi	r24, 0x01	; 1
    1a92:	98 2f       	mov	r25, r24
    1a94:	92 95       	swap	r25
    1a96:	99 0f       	add	r25, r25
    1a98:	90 7e       	andi	r25, 0xE0	; 224
    1a9a:	85 81       	ldd	r24, Z+5	; 0x05
    1a9c:	8f 7d       	andi	r24, 0xDF	; 223
    1a9e:	89 2b       	or	r24, r25
    1aa0:	85 83       	std	Z+5, r24	; 0x05
    1aa2:	bc c0       	rjmp	.+376    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTC.Bit.B6 = Copy_Value;
    1aa4:	e0 e3       	ldi	r30, 0x30	; 48
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	81 70       	andi	r24, 0x01	; 1
    1aac:	81 70       	andi	r24, 0x01	; 1
    1aae:	98 2f       	mov	r25, r24
    1ab0:	92 95       	swap	r25
    1ab2:	99 0f       	add	r25, r25
    1ab4:	99 0f       	add	r25, r25
    1ab6:	90 7c       	andi	r25, 0xC0	; 192
    1ab8:	85 81       	ldd	r24, Z+5	; 0x05
    1aba:	8f 7b       	andi	r24, 0xBF	; 191
    1abc:	89 2b       	or	r24, r25
    1abe:	85 83       	std	Z+5, r24	; 0x05
    1ac0:	ad c0       	rjmp	.+346    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTC.Bit.B7 = Copy_Value;
    1ac2:	e0 e3       	ldi	r30, 0x30	; 48
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	81 70       	andi	r24, 0x01	; 1
    1aca:	98 2f       	mov	r25, r24
    1acc:	97 95       	ror	r25
    1ace:	99 27       	eor	r25, r25
    1ad0:	97 95       	ror	r25
    1ad2:	85 81       	ldd	r24, Z+5	; 0x05
    1ad4:	8f 77       	andi	r24, 0x7F	; 127
    1ad6:	89 2b       	or	r24, r25
    1ad8:	85 83       	std	Z+5, r24	; 0x05
    1ada:	a0 c0       	rjmp	.+320    	; 0x1c1c <DIO_voidSetPinValue+0x564>
				default: break;
			}
			break;

		case PORT_D:
			switch(Copy_PinId)
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3d 83       	std	Y+5, r19	; 0x05
    1ae4:	2c 83       	std	Y+4, r18	; 0x04
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aea:	83 30       	cpi	r24, 0x03	; 3
    1aec:	91 05       	cpc	r25, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <DIO_voidSetPinValue+0x43a>
    1af0:	51 c0       	rjmp	.+162    	; 0x1b94 <DIO_voidSetPinValue+0x4dc>
    1af2:	2c 81       	ldd	r18, Y+4	; 0x04
    1af4:	3d 81       	ldd	r19, Y+5	; 0x05
    1af6:	24 30       	cpi	r18, 0x04	; 4
    1af8:	31 05       	cpc	r19, r1
    1afa:	7c f4       	brge	.+30     	; 0x1b1a <DIO_voidSetPinValue+0x462>
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	9d 81       	ldd	r25, Y+5	; 0x05
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	91 05       	cpc	r25, r1
    1b04:	71 f1       	breq	.+92     	; 0x1b62 <DIO_voidSetPinValue+0x4aa>
    1b06:	2c 81       	ldd	r18, Y+4	; 0x04
    1b08:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	ac f5       	brge	.+106    	; 0x1b7a <DIO_voidSetPinValue+0x4c2>
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	9d 81       	ldd	r25, Y+5	; 0x05
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	d1 f0       	breq	.+52     	; 0x1b4c <DIO_voidSetPinValue+0x494>
    1b18:	81 c0       	rjmp	.+258    	; 0x1c1c <DIO_voidSetPinValue+0x564>
    1b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1e:	25 30       	cpi	r18, 0x05	; 5
    1b20:	31 05       	cpc	r19, r1
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <DIO_voidSetPinValue+0x46e>
    1b24:	52 c0       	rjmp	.+164    	; 0x1bca <DIO_voidSetPinValue+0x512>
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2a:	85 30       	cpi	r24, 0x05	; 5
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	0c f4       	brge	.+2      	; 0x1b32 <DIO_voidSetPinValue+0x47a>
    1b30:	3f c0       	rjmp	.+126    	; 0x1bb0 <DIO_voidSetPinValue+0x4f8>
    1b32:	2c 81       	ldd	r18, Y+4	; 0x04
    1b34:	3d 81       	ldd	r19, Y+5	; 0x05
    1b36:	26 30       	cpi	r18, 0x06	; 6
    1b38:	31 05       	cpc	r19, r1
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <DIO_voidSetPinValue+0x486>
    1b3c:	54 c0       	rjmp	.+168    	; 0x1be6 <DIO_voidSetPinValue+0x52e>
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	9d 81       	ldd	r25, Y+5	; 0x05
    1b42:	87 30       	cpi	r24, 0x07	; 7
    1b44:	91 05       	cpc	r25, r1
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <DIO_voidSetPinValue+0x492>
    1b48:	5d c0       	rjmp	.+186    	; 0x1c04 <DIO_voidSetPinValue+0x54c>
    1b4a:	68 c0       	rjmp	.+208    	; 0x1c1c <DIO_voidSetPinValue+0x564>
			{
				case PIN_0 :
						DIO->PORTD.Bit.B0 = Copy_Value;
    1b4c:	e0 e3       	ldi	r30, 0x30	; 48
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	81 70       	andi	r24, 0x01	; 1
    1b54:	98 2f       	mov	r25, r24
    1b56:	91 70       	andi	r25, 0x01	; 1
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	8e 7f       	andi	r24, 0xFE	; 254
    1b5c:	89 2b       	or	r24, r25
    1b5e:	82 83       	std	Z+2, r24	; 0x02
    1b60:	5d c0       	rjmp	.+186    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_1 :
						DIO->PORTD.Bit.B1 = Copy_Value;
    1b62:	e0 e3       	ldi	r30, 0x30	; 48
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	81 70       	andi	r24, 0x01	; 1
    1b6a:	81 70       	andi	r24, 0x01	; 1
    1b6c:	98 2f       	mov	r25, r24
    1b6e:	99 0f       	add	r25, r25
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	8d 7f       	andi	r24, 0xFD	; 253
    1b74:	89 2b       	or	r24, r25
    1b76:	82 83       	std	Z+2, r24	; 0x02
    1b78:	51 c0       	rjmp	.+162    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_2 :
						DIO->PORTD.Bit.B2 = Copy_Value;
    1b7a:	e0 e3       	ldi	r30, 0x30	; 48
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	81 70       	andi	r24, 0x01	; 1
    1b82:	81 70       	andi	r24, 0x01	; 1
    1b84:	98 2f       	mov	r25, r24
    1b86:	99 0f       	add	r25, r25
    1b88:	99 0f       	add	r25, r25
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	8b 7f       	andi	r24, 0xFB	; 251
    1b8e:	89 2b       	or	r24, r25
    1b90:	82 83       	std	Z+2, r24	; 0x02
    1b92:	44 c0       	rjmp	.+136    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_3 :
						DIO->PORTD.Bit.B3 = Copy_Value;
    1b94:	e0 e3       	ldi	r30, 0x30	; 48
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	81 70       	andi	r24, 0x01	; 1
    1b9c:	81 70       	andi	r24, 0x01	; 1
    1b9e:	98 2f       	mov	r25, r24
    1ba0:	99 0f       	add	r25, r25
    1ba2:	99 0f       	add	r25, r25
    1ba4:	99 0f       	add	r25, r25
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	87 7f       	andi	r24, 0xF7	; 247
    1baa:	89 2b       	or	r24, r25
    1bac:	82 83       	std	Z+2, r24	; 0x02
    1bae:	36 c0       	rjmp	.+108    	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_4 :
						DIO->PORTD.Bit.B4 = Copy_Value;
    1bb0:	e0 e3       	ldi	r30, 0x30	; 48
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	81 70       	andi	r24, 0x01	; 1
    1bb8:	81 70       	andi	r24, 0x01	; 1
    1bba:	98 2f       	mov	r25, r24
    1bbc:	92 95       	swap	r25
    1bbe:	90 7f       	andi	r25, 0xF0	; 240
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	8f 7e       	andi	r24, 0xEF	; 239
    1bc4:	89 2b       	or	r24, r25
    1bc6:	82 83       	std	Z+2, r24	; 0x02
    1bc8:	29 c0       	rjmp	.+82     	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_5 :
						DIO->PORTD.Bit.B5 = Copy_Value;
    1bca:	e0 e3       	ldi	r30, 0x30	; 48
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	81 70       	andi	r24, 0x01	; 1
    1bd2:	81 70       	andi	r24, 0x01	; 1
    1bd4:	98 2f       	mov	r25, r24
    1bd6:	92 95       	swap	r25
    1bd8:	99 0f       	add	r25, r25
    1bda:	90 7e       	andi	r25, 0xE0	; 224
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	8f 7d       	andi	r24, 0xDF	; 223
    1be0:	89 2b       	or	r24, r25
    1be2:	82 83       	std	Z+2, r24	; 0x02
    1be4:	1b c0       	rjmp	.+54     	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_6 :
						DIO->PORTD.Bit.B6 = Copy_Value;
    1be6:	e0 e3       	ldi	r30, 0x30	; 48
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	81 70       	andi	r24, 0x01	; 1
    1bee:	81 70       	andi	r24, 0x01	; 1
    1bf0:	98 2f       	mov	r25, r24
    1bf2:	92 95       	swap	r25
    1bf4:	99 0f       	add	r25, r25
    1bf6:	99 0f       	add	r25, r25
    1bf8:	90 7c       	andi	r25, 0xC0	; 192
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	8f 7b       	andi	r24, 0xBF	; 191
    1bfe:	89 2b       	or	r24, r25
    1c00:	82 83       	std	Z+2, r24	; 0x02
    1c02:	0c c0       	rjmp	.+24     	; 0x1c1c <DIO_voidSetPinValue+0x564>
						break;
				case PIN_7 :
						DIO->PORTD.Bit.B7 = Copy_Value;
    1c04:	e0 e3       	ldi	r30, 0x30	; 48
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	81 70       	andi	r24, 0x01	; 1
    1c0c:	98 2f       	mov	r25, r24
    1c0e:	97 95       	ror	r25
    1c10:	99 27       	eor	r25, r25
    1c12:	97 95       	ror	r25
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	8f 77       	andi	r24, 0x7F	; 127
    1c18:	89 2b       	or	r24, r25
    1c1a:	82 83       	std	Z+2, r24	; 0x02
						break;
				default: break;
			}
			break;
	}
}
    1c1c:	2d 96       	adiw	r28, 0x0d	; 13
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <DIO_voidGetPinValue>:

u8 DIO_voidGetPinValue(PORT_t Copy_PortId,PIN_t Copy_PinId)
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	2d 97       	sbiw	r28, 0x0d	; 13
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	8a 83       	std	Y+2, r24	; 0x02
    1c44:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Pin;
	switch(Copy_PortId)
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	3d 87       	std	Y+13, r19	; 0x0d
    1c4e:	2c 87       	std	Y+12, r18	; 0x0c
    1c50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c52:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	91 05       	cpc	r25, r1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <DIO_voidGetPinValue+0x2e>
    1c5a:	8c c0       	rjmp	.+280    	; 0x1d74 <DIO_voidGetPinValue+0x146>
    1c5c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c5e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	2c f4       	brge	.+10     	; 0x1c70 <DIO_voidGetPinValue+0x42>
    1c66:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c68:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	71 f0       	breq	.+28     	; 0x1c8a <DIO_voidGetPinValue+0x5c>
    1c6e:	e0 c1       	rjmp	.+960    	; 0x2030 <DIO_voidGetPinValue+0x402>
    1c70:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c72:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c74:	22 30       	cpi	r18, 0x02	; 2
    1c76:	31 05       	cpc	r19, r1
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <DIO_voidGetPinValue+0x4e>
    1c7a:	f1 c0       	rjmp	.+482    	; 0x1e5e <DIO_voidGetPinValue+0x230>
    1c7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c7e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c80:	83 30       	cpi	r24, 0x03	; 3
    1c82:	91 05       	cpc	r25, r1
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <DIO_voidGetPinValue+0x5a>
    1c86:	60 c1       	rjmp	.+704    	; 0x1f48 <DIO_voidGetPinValue+0x31a>
    1c88:	d3 c1       	rjmp	.+934    	; 0x2030 <DIO_voidGetPinValue+0x402>
	{
		case PORT_A:
			switch(Copy_PinId)
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	3b 87       	std	Y+11, r19	; 0x0b
    1c92:	2a 87       	std	Y+10, r18	; 0x0a
    1c94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c98:	83 30       	cpi	r24, 0x03	; 3
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <DIO_voidGetPinValue+0x72>
    1c9e:	3e c0       	rjmp	.+124    	; 0x1d1c <DIO_voidGetPinValue+0xee>
    1ca0:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ca2:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ca4:	24 30       	cpi	r18, 0x04	; 4
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	7c f4       	brge	.+30     	; 0x1cc8 <DIO_voidGetPinValue+0x9a>
    1caa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cac:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	29 f1       	breq	.+74     	; 0x1cfe <DIO_voidGetPinValue+0xd0>
    1cb4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1cb6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1cb8:	22 30       	cpi	r18, 0x02	; 2
    1cba:	31 05       	cpc	r19, r1
    1cbc:	3c f5       	brge	.+78     	; 0x1d0c <DIO_voidGetPinValue+0xde>
    1cbe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	b1 f0       	breq	.+44     	; 0x1cf2 <DIO_voidGetPinValue+0xc4>
    1cc6:	b4 c1       	rjmp	.+872    	; 0x2030 <DIO_voidGetPinValue+0x402>
    1cc8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1cca:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ccc:	25 30       	cpi	r18, 0x05	; 5
    1cce:	31 05       	cpc	r19, r1
    1cd0:	b1 f1       	breq	.+108    	; 0x1d3e <DIO_voidGetPinValue+0x110>
    1cd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cd6:	85 30       	cpi	r24, 0x05	; 5
    1cd8:	91 05       	cpc	r25, r1
    1cda:	4c f1       	brlt	.+82     	; 0x1d2e <DIO_voidGetPinValue+0x100>
    1cdc:	2a 85       	ldd	r18, Y+10	; 0x0a
    1cde:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ce0:	26 30       	cpi	r18, 0x06	; 6
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	a9 f1       	breq	.+106    	; 0x1d50 <DIO_voidGetPinValue+0x122>
    1ce6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ce8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cea:	87 30       	cpi	r24, 0x07	; 7
    1cec:	91 05       	cpc	r25, r1
    1cee:	d1 f1       	breq	.+116    	; 0x1d64 <DIO_voidGetPinValue+0x136>
    1cf0:	9f c1       	rjmp	.+830    	; 0x2030 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PINA.Bit.B0;
    1cf2:	e0 e3       	ldi	r30, 0x30	; 48
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	81 85       	ldd	r24, Z+9	; 0x09
    1cf8:	81 70       	andi	r24, 0x01	; 1
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	99 c1       	rjmp	.+818    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PINA.Bit.B1;
    1cfe:	e0 e3       	ldi	r30, 0x30	; 48
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	81 85       	ldd	r24, Z+9	; 0x09
    1d04:	86 95       	lsr	r24
    1d06:	81 70       	andi	r24, 0x01	; 1
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	92 c1       	rjmp	.+804    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PINA.Bit.B2;
    1d0c:	e0 e3       	ldi	r30, 0x30	; 48
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	81 85       	ldd	r24, Z+9	; 0x09
    1d12:	86 95       	lsr	r24
    1d14:	86 95       	lsr	r24
    1d16:	81 70       	andi	r24, 0x01	; 1
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	8a c1       	rjmp	.+788    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PINA.Bit.B3;
    1d1c:	e0 e3       	ldi	r30, 0x30	; 48
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	81 85       	ldd	r24, Z+9	; 0x09
    1d22:	86 95       	lsr	r24
    1d24:	86 95       	lsr	r24
    1d26:	86 95       	lsr	r24
    1d28:	81 70       	andi	r24, 0x01	; 1
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	81 c1       	rjmp	.+770    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PINA.Bit.B4;
    1d2e:	e0 e3       	ldi	r30, 0x30	; 48
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	81 85       	ldd	r24, Z+9	; 0x09
    1d34:	82 95       	swap	r24
    1d36:	8f 70       	andi	r24, 0x0F	; 15
    1d38:	81 70       	andi	r24, 0x01	; 1
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	79 c1       	rjmp	.+754    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PINA.Bit.B5;
    1d3e:	e0 e3       	ldi	r30, 0x30	; 48
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	81 85       	ldd	r24, Z+9	; 0x09
    1d44:	82 95       	swap	r24
    1d46:	86 95       	lsr	r24
    1d48:	87 70       	andi	r24, 0x07	; 7
    1d4a:	81 70       	andi	r24, 0x01	; 1
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	70 c1       	rjmp	.+736    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PINA.Bit.B6;
    1d50:	e0 e3       	ldi	r30, 0x30	; 48
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	81 85       	ldd	r24, Z+9	; 0x09
    1d56:	82 95       	swap	r24
    1d58:	86 95       	lsr	r24
    1d5a:	86 95       	lsr	r24
    1d5c:	83 70       	andi	r24, 0x03	; 3
    1d5e:	81 70       	andi	r24, 0x01	; 1
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	66 c1       	rjmp	.+716    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PINA.Bit.B7;
    1d64:	e0 e3       	ldi	r30, 0x30	; 48
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	81 85       	ldd	r24, Z+9	; 0x09
    1d6a:	88 1f       	adc	r24, r24
    1d6c:	88 27       	eor	r24, r24
    1d6e:	88 1f       	adc	r24, r24
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	5e c1       	rjmp	.+700    	; 0x2030 <DIO_voidGetPinValue+0x402>
				default: break;
			}
			break;

		case PORT_B:
			switch(Copy_PinId)
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	39 87       	std	Y+9, r19	; 0x09
    1d7c:	28 87       	std	Y+8, r18	; 0x08
    1d7e:	88 85       	ldd	r24, Y+8	; 0x08
    1d80:	99 85       	ldd	r25, Y+9	; 0x09
    1d82:	83 30       	cpi	r24, 0x03	; 3
    1d84:	91 05       	cpc	r25, r1
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <DIO_voidGetPinValue+0x15c>
    1d88:	3e c0       	rjmp	.+124    	; 0x1e06 <DIO_voidGetPinValue+0x1d8>
    1d8a:	28 85       	ldd	r18, Y+8	; 0x08
    1d8c:	39 85       	ldd	r19, Y+9	; 0x09
    1d8e:	24 30       	cpi	r18, 0x04	; 4
    1d90:	31 05       	cpc	r19, r1
    1d92:	7c f4       	brge	.+30     	; 0x1db2 <DIO_voidGetPinValue+0x184>
    1d94:	88 85       	ldd	r24, Y+8	; 0x08
    1d96:	99 85       	ldd	r25, Y+9	; 0x09
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	29 f1       	breq	.+74     	; 0x1de8 <DIO_voidGetPinValue+0x1ba>
    1d9e:	28 85       	ldd	r18, Y+8	; 0x08
    1da0:	39 85       	ldd	r19, Y+9	; 0x09
    1da2:	22 30       	cpi	r18, 0x02	; 2
    1da4:	31 05       	cpc	r19, r1
    1da6:	3c f5       	brge	.+78     	; 0x1df6 <DIO_voidGetPinValue+0x1c8>
    1da8:	88 85       	ldd	r24, Y+8	; 0x08
    1daa:	99 85       	ldd	r25, Y+9	; 0x09
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	b1 f0       	breq	.+44     	; 0x1ddc <DIO_voidGetPinValue+0x1ae>
    1db0:	3f c1       	rjmp	.+638    	; 0x2030 <DIO_voidGetPinValue+0x402>
    1db2:	28 85       	ldd	r18, Y+8	; 0x08
    1db4:	39 85       	ldd	r19, Y+9	; 0x09
    1db6:	25 30       	cpi	r18, 0x05	; 5
    1db8:	31 05       	cpc	r19, r1
    1dba:	b1 f1       	breq	.+108    	; 0x1e28 <DIO_voidGetPinValue+0x1fa>
    1dbc:	88 85       	ldd	r24, Y+8	; 0x08
    1dbe:	99 85       	ldd	r25, Y+9	; 0x09
    1dc0:	85 30       	cpi	r24, 0x05	; 5
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	4c f1       	brlt	.+82     	; 0x1e18 <DIO_voidGetPinValue+0x1ea>
    1dc6:	28 85       	ldd	r18, Y+8	; 0x08
    1dc8:	39 85       	ldd	r19, Y+9	; 0x09
    1dca:	26 30       	cpi	r18, 0x06	; 6
    1dcc:	31 05       	cpc	r19, r1
    1dce:	a9 f1       	breq	.+106    	; 0x1e3a <DIO_voidGetPinValue+0x20c>
    1dd0:	88 85       	ldd	r24, Y+8	; 0x08
    1dd2:	99 85       	ldd	r25, Y+9	; 0x09
    1dd4:	87 30       	cpi	r24, 0x07	; 7
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	d1 f1       	breq	.+116    	; 0x1e4e <DIO_voidGetPinValue+0x220>
    1dda:	2a c1       	rjmp	.+596    	; 0x2030 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PINB.Bit.B0;
    1ddc:	e0 e3       	ldi	r30, 0x30	; 48
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	86 81       	ldd	r24, Z+6	; 0x06
    1de2:	81 70       	andi	r24, 0x01	; 1
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	24 c1       	rjmp	.+584    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PINB.Bit.B1;
    1de8:	e0 e3       	ldi	r30, 0x30	; 48
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	86 81       	ldd	r24, Z+6	; 0x06
    1dee:	86 95       	lsr	r24
    1df0:	81 70       	andi	r24, 0x01	; 1
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	1d c1       	rjmp	.+570    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PINB.Bit.B2;
    1df6:	e0 e3       	ldi	r30, 0x30	; 48
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	86 81       	ldd	r24, Z+6	; 0x06
    1dfc:	86 95       	lsr	r24
    1dfe:	86 95       	lsr	r24
    1e00:	81 70       	andi	r24, 0x01	; 1
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	15 c1       	rjmp	.+554    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PINB.Bit.B3;
    1e06:	e0 e3       	ldi	r30, 0x30	; 48
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	86 81       	ldd	r24, Z+6	; 0x06
    1e0c:	86 95       	lsr	r24
    1e0e:	86 95       	lsr	r24
    1e10:	86 95       	lsr	r24
    1e12:	81 70       	andi	r24, 0x01	; 1
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	0c c1       	rjmp	.+536    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PINB.Bit.B4;
    1e18:	e0 e3       	ldi	r30, 0x30	; 48
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	86 81       	ldd	r24, Z+6	; 0x06
    1e1e:	82 95       	swap	r24
    1e20:	8f 70       	andi	r24, 0x0F	; 15
    1e22:	81 70       	andi	r24, 0x01	; 1
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	04 c1       	rjmp	.+520    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PINB.Bit.B5;
    1e28:	e0 e3       	ldi	r30, 0x30	; 48
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	86 81       	ldd	r24, Z+6	; 0x06
    1e2e:	82 95       	swap	r24
    1e30:	86 95       	lsr	r24
    1e32:	87 70       	andi	r24, 0x07	; 7
    1e34:	81 70       	andi	r24, 0x01	; 1
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	fb c0       	rjmp	.+502    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PINB.Bit.B6;
    1e3a:	e0 e3       	ldi	r30, 0x30	; 48
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	86 81       	ldd	r24, Z+6	; 0x06
    1e40:	82 95       	swap	r24
    1e42:	86 95       	lsr	r24
    1e44:	86 95       	lsr	r24
    1e46:	83 70       	andi	r24, 0x03	; 3
    1e48:	81 70       	andi	r24, 0x01	; 1
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	f1 c0       	rjmp	.+482    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PINB.Bit.B7;
    1e4e:	e0 e3       	ldi	r30, 0x30	; 48
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	86 81       	ldd	r24, Z+6	; 0x06
    1e54:	88 1f       	adc	r24, r24
    1e56:	88 27       	eor	r24, r24
    1e58:	88 1f       	adc	r24, r24
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	e9 c0       	rjmp	.+466    	; 0x2030 <DIO_voidGetPinValue+0x402>
			}
			break;


		case PORT_C:
			switch(Copy_PinId)
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	3f 83       	std	Y+7, r19	; 0x07
    1e66:	2e 83       	std	Y+6, r18	; 0x06
    1e68:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6c:	83 30       	cpi	r24, 0x03	; 3
    1e6e:	91 05       	cpc	r25, r1
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <DIO_voidGetPinValue+0x246>
    1e72:	3e c0       	rjmp	.+124    	; 0x1ef0 <DIO_voidGetPinValue+0x2c2>
    1e74:	2e 81       	ldd	r18, Y+6	; 0x06
    1e76:	3f 81       	ldd	r19, Y+7	; 0x07
    1e78:	24 30       	cpi	r18, 0x04	; 4
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	7c f4       	brge	.+30     	; 0x1e9c <DIO_voidGetPinValue+0x26e>
    1e7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e80:	9f 81       	ldd	r25, Y+7	; 0x07
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	91 05       	cpc	r25, r1
    1e86:	29 f1       	breq	.+74     	; 0x1ed2 <DIO_voidGetPinValue+0x2a4>
    1e88:	2e 81       	ldd	r18, Y+6	; 0x06
    1e8a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e8c:	22 30       	cpi	r18, 0x02	; 2
    1e8e:	31 05       	cpc	r19, r1
    1e90:	3c f5       	brge	.+78     	; 0x1ee0 <DIO_voidGetPinValue+0x2b2>
    1e92:	8e 81       	ldd	r24, Y+6	; 0x06
    1e94:	9f 81       	ldd	r25, Y+7	; 0x07
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	b1 f0       	breq	.+44     	; 0x1ec6 <DIO_voidGetPinValue+0x298>
    1e9a:	ca c0       	rjmp	.+404    	; 0x2030 <DIO_voidGetPinValue+0x402>
    1e9c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e9e:	3f 81       	ldd	r19, Y+7	; 0x07
    1ea0:	25 30       	cpi	r18, 0x05	; 5
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	b1 f1       	breq	.+108    	; 0x1f12 <DIO_voidGetPinValue+0x2e4>
    1ea6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eaa:	85 30       	cpi	r24, 0x05	; 5
    1eac:	91 05       	cpc	r25, r1
    1eae:	4c f1       	brlt	.+82     	; 0x1f02 <DIO_voidGetPinValue+0x2d4>
    1eb0:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb2:	3f 81       	ldd	r19, Y+7	; 0x07
    1eb4:	26 30       	cpi	r18, 0x06	; 6
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	a9 f1       	breq	.+106    	; 0x1f24 <DIO_voidGetPinValue+0x2f6>
    1eba:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ebe:	87 30       	cpi	r24, 0x07	; 7
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	d1 f1       	breq	.+116    	; 0x1f38 <DIO_voidGetPinValue+0x30a>
    1ec4:	b5 c0       	rjmp	.+362    	; 0x2030 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PINC.Bit.B0;
    1ec6:	e0 e3       	ldi	r30, 0x30	; 48
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	83 81       	ldd	r24, Z+3	; 0x03
    1ecc:	81 70       	andi	r24, 0x01	; 1
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	af c0       	rjmp	.+350    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PINC.Bit.B1;
    1ed2:	e0 e3       	ldi	r30, 0x30	; 48
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	83 81       	ldd	r24, Z+3	; 0x03
    1ed8:	86 95       	lsr	r24
    1eda:	81 70       	andi	r24, 0x01	; 1
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	a8 c0       	rjmp	.+336    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PINC.Bit.B2;
    1ee0:	e0 e3       	ldi	r30, 0x30	; 48
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	83 81       	ldd	r24, Z+3	; 0x03
    1ee6:	86 95       	lsr	r24
    1ee8:	86 95       	lsr	r24
    1eea:	81 70       	andi	r24, 0x01	; 1
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	a0 c0       	rjmp	.+320    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PINC.Bit.B3;
    1ef0:	e0 e3       	ldi	r30, 0x30	; 48
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	83 81       	ldd	r24, Z+3	; 0x03
    1ef6:	86 95       	lsr	r24
    1ef8:	86 95       	lsr	r24
    1efa:	86 95       	lsr	r24
    1efc:	81 70       	andi	r24, 0x01	; 1
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	97 c0       	rjmp	.+302    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PINC.Bit.B4;
    1f02:	e0 e3       	ldi	r30, 0x30	; 48
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	83 81       	ldd	r24, Z+3	; 0x03
    1f08:	82 95       	swap	r24
    1f0a:	8f 70       	andi	r24, 0x0F	; 15
    1f0c:	81 70       	andi	r24, 0x01	; 1
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	8f c0       	rjmp	.+286    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PINC.Bit.B5;
    1f12:	e0 e3       	ldi	r30, 0x30	; 48
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	83 81       	ldd	r24, Z+3	; 0x03
    1f18:	82 95       	swap	r24
    1f1a:	86 95       	lsr	r24
    1f1c:	87 70       	andi	r24, 0x07	; 7
    1f1e:	81 70       	andi	r24, 0x01	; 1
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	86 c0       	rjmp	.+268    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PINC.Bit.B6;
    1f24:	e0 e3       	ldi	r30, 0x30	; 48
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	83 81       	ldd	r24, Z+3	; 0x03
    1f2a:	82 95       	swap	r24
    1f2c:	86 95       	lsr	r24
    1f2e:	86 95       	lsr	r24
    1f30:	83 70       	andi	r24, 0x03	; 3
    1f32:	81 70       	andi	r24, 0x01	; 1
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	7c c0       	rjmp	.+248    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PINC.Bit.B7;
    1f38:	e0 e3       	ldi	r30, 0x30	; 48
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	83 81       	ldd	r24, Z+3	; 0x03
    1f3e:	88 1f       	adc	r24, r24
    1f40:	88 27       	eor	r24, r24
    1f42:	88 1f       	adc	r24, r24
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	74 c0       	rjmp	.+232    	; 0x2030 <DIO_voidGetPinValue+0x402>
				default: break;
			}
			break;

		case PORT_D:
			switch(Copy_PinId)
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	3d 83       	std	Y+5, r19	; 0x05
    1f50:	2c 83       	std	Y+4, r18	; 0x04
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	9d 81       	ldd	r25, Y+5	; 0x05
    1f56:	83 30       	cpi	r24, 0x03	; 3
    1f58:	91 05       	cpc	r25, r1
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <DIO_voidGetPinValue+0x330>
    1f5c:	3e c0       	rjmp	.+124    	; 0x1fda <DIO_voidGetPinValue+0x3ac>
    1f5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f60:	3d 81       	ldd	r19, Y+5	; 0x05
    1f62:	24 30       	cpi	r18, 0x04	; 4
    1f64:	31 05       	cpc	r19, r1
    1f66:	7c f4       	brge	.+30     	; 0x1f86 <DIO_voidGetPinValue+0x358>
    1f68:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	91 05       	cpc	r25, r1
    1f70:	29 f1       	breq	.+74     	; 0x1fbc <DIO_voidGetPinValue+0x38e>
    1f72:	2c 81       	ldd	r18, Y+4	; 0x04
    1f74:	3d 81       	ldd	r19, Y+5	; 0x05
    1f76:	22 30       	cpi	r18, 0x02	; 2
    1f78:	31 05       	cpc	r19, r1
    1f7a:	3c f5       	brge	.+78     	; 0x1fca <DIO_voidGetPinValue+0x39c>
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	b1 f0       	breq	.+44     	; 0x1fb0 <DIO_voidGetPinValue+0x382>
    1f84:	55 c0       	rjmp	.+170    	; 0x2030 <DIO_voidGetPinValue+0x402>
    1f86:	2c 81       	ldd	r18, Y+4	; 0x04
    1f88:	3d 81       	ldd	r19, Y+5	; 0x05
    1f8a:	25 30       	cpi	r18, 0x05	; 5
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	b1 f1       	breq	.+108    	; 0x1ffc <DIO_voidGetPinValue+0x3ce>
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	9d 81       	ldd	r25, Y+5	; 0x05
    1f94:	85 30       	cpi	r24, 0x05	; 5
    1f96:	91 05       	cpc	r25, r1
    1f98:	4c f1       	brlt	.+82     	; 0x1fec <DIO_voidGetPinValue+0x3be>
    1f9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f9e:	26 30       	cpi	r18, 0x06	; 6
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	a9 f1       	breq	.+106    	; 0x200e <DIO_voidGetPinValue+0x3e0>
    1fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa8:	87 30       	cpi	r24, 0x07	; 7
    1faa:	91 05       	cpc	r25, r1
    1fac:	d1 f1       	breq	.+116    	; 0x2022 <DIO_voidGetPinValue+0x3f4>
    1fae:	40 c0       	rjmp	.+128    	; 0x2030 <DIO_voidGetPinValue+0x402>
			{
				case PIN_0 :
						Local_u8Pin = DIO->PIND.Bit.B0;
    1fb0:	e0 e3       	ldi	r30, 0x30	; 48
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	81 70       	andi	r24, 0x01	; 1
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	3a c0       	rjmp	.+116    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_1 :
						Local_u8Pin = DIO->PIND.Bit.B1;
    1fbc:	e0 e3       	ldi	r30, 0x30	; 48
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	86 95       	lsr	r24
    1fc4:	81 70       	andi	r24, 0x01	; 1
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	33 c0       	rjmp	.+102    	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_2 :
						Local_u8Pin = DIO->PIND.Bit.B2;
    1fca:	e0 e3       	ldi	r30, 0x30	; 48
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	86 95       	lsr	r24
    1fd2:	86 95       	lsr	r24
    1fd4:	81 70       	andi	r24, 0x01	; 1
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	2b c0       	rjmp	.+86     	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_3 :
						Local_u8Pin = DIO->PIND.Bit.B3;
    1fda:	e0 e3       	ldi	r30, 0x30	; 48
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	86 95       	lsr	r24
    1fe2:	86 95       	lsr	r24
    1fe4:	86 95       	lsr	r24
    1fe6:	81 70       	andi	r24, 0x01	; 1
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	22 c0       	rjmp	.+68     	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_4 :
						Local_u8Pin = DIO->PIND.Bit.B4;
    1fec:	e0 e3       	ldi	r30, 0x30	; 48
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	82 95       	swap	r24
    1ff4:	8f 70       	andi	r24, 0x0F	; 15
    1ff6:	81 70       	andi	r24, 0x01	; 1
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	1a c0       	rjmp	.+52     	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_5 :
						Local_u8Pin = DIO->PIND.Bit.B5;
    1ffc:	e0 e3       	ldi	r30, 0x30	; 48
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	82 95       	swap	r24
    2004:	86 95       	lsr	r24
    2006:	87 70       	andi	r24, 0x07	; 7
    2008:	81 70       	andi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	11 c0       	rjmp	.+34     	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_6 :
						Local_u8Pin = DIO->PIND.Bit.B6;
    200e:	e0 e3       	ldi	r30, 0x30	; 48
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	82 95       	swap	r24
    2016:	86 95       	lsr	r24
    2018:	86 95       	lsr	r24
    201a:	83 70       	andi	r24, 0x03	; 3
    201c:	81 70       	andi	r24, 0x01	; 1
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	07 c0       	rjmp	.+14     	; 0x2030 <DIO_voidGetPinValue+0x402>
						break;
				case PIN_7 :
						Local_u8Pin = DIO->PIND.Bit.B7;
    2022:	e0 e3       	ldi	r30, 0x30	; 48
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	88 1f       	adc	r24, r24
    202a:	88 27       	eor	r24, r24
    202c:	88 1f       	adc	r24, r24
    202e:	89 83       	std	Y+1, r24	; 0x01
						break;
				default: break;
			}
			break;
	}
	return Local_u8Pin;
    2030:	89 81       	ldd	r24, Y+1	; 0x01
}
    2032:	2d 96       	adiw	r28, 0x0d	; 13
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <DIO_voidSetPortirection>:

void DIO_voidSetPortirection(PORT_t Copy_PortId,DIRECTION_t Copy_Direction)
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	00 d0       	rcall	.+0      	; 0x204a <DIO_voidSetPortirection+0x6>
    204a:	00 d0       	rcall	.+0      	; 0x204c <DIO_voidSetPortirection+0x8>
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PortId)
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	3c 83       	std	Y+4, r19	; 0x04
    205c:	2b 83       	std	Y+3, r18	; 0x03
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	81 30       	cpi	r24, 0x01	; 1
    2064:	91 05       	cpc	r25, r1
    2066:	21 f1       	breq	.+72     	; 0x20b0 <DIO_voidSetPortirection+0x6c>
    2068:	2b 81       	ldd	r18, Y+3	; 0x03
    206a:	3c 81       	ldd	r19, Y+4	; 0x04
    206c:	22 30       	cpi	r18, 0x02	; 2
    206e:	31 05       	cpc	r19, r1
    2070:	2c f4       	brge	.+10     	; 0x207c <DIO_voidSetPortirection+0x38>
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	61 f0       	breq	.+24     	; 0x2092 <DIO_voidSetPortirection+0x4e>
    207a:	46 c0       	rjmp	.+140    	; 0x2108 <DIO_voidSetPortirection+0xc4>
    207c:	2b 81       	ldd	r18, Y+3	; 0x03
    207e:	3c 81       	ldd	r19, Y+4	; 0x04
    2080:	22 30       	cpi	r18, 0x02	; 2
    2082:	31 05       	cpc	r19, r1
    2084:	21 f1       	breq	.+72     	; 0x20ce <DIO_voidSetPortirection+0x8a>
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	83 30       	cpi	r24, 0x03	; 3
    208c:	91 05       	cpc	r25, r1
    208e:	71 f1       	breq	.+92     	; 0x20ec <DIO_voidSetPortirection+0xa8>
    2090:	3b c0       	rjmp	.+118    	; 0x2108 <DIO_voidSetPortirection+0xc4>
		{
			case PORT_A:
				if(Copy_Direction == INPUT)
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	88 23       	and	r24, r24
    2096:	21 f4       	brne	.+8      	; 0x20a0 <DIO_voidSetPortirection+0x5c>
				{
					DIO->DDRA.All_Bits = 0;
    2098:	e0 e3       	ldi	r30, 0x30	; 48
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	12 86       	std	Z+10, r1	; 0x0a
    209e:	34 c0       	rjmp	.+104    	; 0x2108 <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	81 30       	cpi	r24, 0x01	; 1
    20a4:	89 f5       	brne	.+98     	; 0x2108 <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRA.All_Bits = 0xFF;
    20a6:	e0 e3       	ldi	r30, 0x30	; 48
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	8f ef       	ldi	r24, 0xFF	; 255
    20ac:	82 87       	std	Z+10, r24	; 0x0a
    20ae:	2c c0       	rjmp	.+88     	; 0x2108 <DIO_voidSetPortirection+0xc4>

				}
				break;

			case PORT_B:
				if(Copy_Direction == INPUT)
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	88 23       	and	r24, r24
    20b4:	21 f4       	brne	.+8      	; 0x20be <DIO_voidSetPortirection+0x7a>
				{
					DIO->DDRB.All_Bits = 0;
    20b6:	e0 e3       	ldi	r30, 0x30	; 48
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	17 82       	std	Z+7, r1	; 0x07
    20bc:	25 c0       	rjmp	.+74     	; 0x2108 <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	11 f5       	brne	.+68     	; 0x2108 <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRB.All_Bits = 0xFF;
    20c4:	e0 e3       	ldi	r30, 0x30	; 48
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	8f ef       	ldi	r24, 0xFF	; 255
    20ca:	87 83       	std	Z+7, r24	; 0x07
    20cc:	1d c0       	rjmp	.+58     	; 0x2108 <DIO_voidSetPortirection+0xc4>
				}
				break;


			case PORT_C:
				if(Copy_Direction == INPUT)
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	88 23       	and	r24, r24
    20d2:	21 f4       	brne	.+8      	; 0x20dc <DIO_voidSetPortirection+0x98>
				{
					DIO->DDRC.All_Bits = 0;
    20d4:	e0 e3       	ldi	r30, 0x30	; 48
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	14 82       	std	Z+4, r1	; 0x04
    20da:	16 c0       	rjmp	.+44     	; 0x2108 <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	99 f4       	brne	.+38     	; 0x2108 <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRC.All_Bits = 0xFF;
    20e2:	e0 e3       	ldi	r30, 0x30	; 48
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	8f ef       	ldi	r24, 0xFF	; 255
    20e8:	84 83       	std	Z+4, r24	; 0x04
    20ea:	0e c0       	rjmp	.+28     	; 0x2108 <DIO_voidSetPortirection+0xc4>

				}
				break;

			case PORT_D:
				if(Copy_Direction == INPUT)
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	88 23       	and	r24, r24
    20f0:	21 f4       	brne	.+8      	; 0x20fa <DIO_voidSetPortirection+0xb6>
				{
					DIO->DDRD.All_Bits = 0;
    20f2:	e0 e3       	ldi	r30, 0x30	; 48
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	11 82       	std	Z+1, r1	; 0x01
    20f8:	07 c0       	rjmp	.+14     	; 0x2108 <DIO_voidSetPortirection+0xc4>
				}
				else if(Copy_Direction == OUTPUT)
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	81 30       	cpi	r24, 0x01	; 1
    20fe:	21 f4       	brne	.+8      	; 0x2108 <DIO_voidSetPortirection+0xc4>
				{
					DIO->DDRD.All_Bits = 0xFF;
    2100:	e0 e3       	ldi	r30, 0x30	; 48
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	8f ef       	ldi	r24, 0xFF	; 255
    2106:	81 83       	std	Z+1, r24	; 0x01

				}
				break;
		}
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(PORT_t Copy_PortId,VALUE_t Copy_Value)
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	00 d0       	rcall	.+0      	; 0x211c <DIO_voidSetPortValue+0x6>
    211c:	00 d0       	rcall	.+0      	; 0x211e <DIO_voidSetPortValue+0x8>
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PortId)
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	3c 83       	std	Y+4, r19	; 0x04
    212e:	2b 83       	std	Y+3, r18	; 0x03
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	81 30       	cpi	r24, 0x01	; 1
    2136:	91 05       	cpc	r25, r1
    2138:	21 f1       	breq	.+72     	; 0x2182 <DIO_voidSetPortValue+0x6c>
    213a:	2b 81       	ldd	r18, Y+3	; 0x03
    213c:	3c 81       	ldd	r19, Y+4	; 0x04
    213e:	22 30       	cpi	r18, 0x02	; 2
    2140:	31 05       	cpc	r19, r1
    2142:	2c f4       	brge	.+10     	; 0x214e <DIO_voidSetPortValue+0x38>
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	61 f0       	breq	.+24     	; 0x2164 <DIO_voidSetPortValue+0x4e>
    214c:	46 c0       	rjmp	.+140    	; 0x21da <DIO_voidSetPortValue+0xc4>
    214e:	2b 81       	ldd	r18, Y+3	; 0x03
    2150:	3c 81       	ldd	r19, Y+4	; 0x04
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	21 f1       	breq	.+72     	; 0x21a0 <DIO_voidSetPortValue+0x8a>
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	83 30       	cpi	r24, 0x03	; 3
    215e:	91 05       	cpc	r25, r1
    2160:	71 f1       	breq	.+92     	; 0x21be <DIO_voidSetPortValue+0xa8>
    2162:	3b c0       	rjmp	.+118    	; 0x21da <DIO_voidSetPortValue+0xc4>
		{
			case PORT_A:
				if(Copy_Value == HIGH)
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	29 f4       	brne	.+10     	; 0x2174 <DIO_voidSetPortValue+0x5e>
				{
					DIO->PORTA.All_Bits = 0xFF;
    216a:	e0 e3       	ldi	r30, 0x30	; 48
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	8f ef       	ldi	r24, 0xFF	; 255
    2170:	83 87       	std	Z+11, r24	; 0x0b
    2172:	33 c0       	rjmp	.+102    	; 0x21da <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	88 23       	and	r24, r24
    2178:	81 f5       	brne	.+96     	; 0x21da <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTA.All_Bits = 0;
    217a:	e0 e3       	ldi	r30, 0x30	; 48
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	13 86       	std	Z+11, r1	; 0x0b
    2180:	2c c0       	rjmp	.+88     	; 0x21da <DIO_voidSetPortValue+0xc4>

				}
				break;

			case PORT_B:
				if(Copy_Value == HIGH)
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	29 f4       	brne	.+10     	; 0x2192 <DIO_voidSetPortValue+0x7c>
				{
					DIO->PORTB.All_Bits = 0xFF;
    2188:	e0 e3       	ldi	r30, 0x30	; 48
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	8f ef       	ldi	r24, 0xFF	; 255
    218e:	80 87       	std	Z+8, r24	; 0x08
    2190:	24 c0       	rjmp	.+72     	; 0x21da <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	88 23       	and	r24, r24
    2196:	09 f5       	brne	.+66     	; 0x21da <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTB.All_Bits = 0;
    2198:	e0 e3       	ldi	r30, 0x30	; 48
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	10 86       	std	Z+8, r1	; 0x08
    219e:	1d c0       	rjmp	.+58     	; 0x21da <DIO_voidSetPortValue+0xc4>
				}
				break;


			case PORT_C:
				if(Copy_Value == HIGH)
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	29 f4       	brne	.+10     	; 0x21b0 <DIO_voidSetPortValue+0x9a>
				{
					DIO->PORTC.All_Bits = 0xFF;
    21a6:	e0 e3       	ldi	r30, 0x30	; 48
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	8f ef       	ldi	r24, 0xFF	; 255
    21ac:	85 83       	std	Z+5, r24	; 0x05
    21ae:	15 c0       	rjmp	.+42     	; 0x21da <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	88 23       	and	r24, r24
    21b4:	91 f4       	brne	.+36     	; 0x21da <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTC.All_Bits = 0;
    21b6:	e0 e3       	ldi	r30, 0x30	; 48
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	15 82       	std	Z+5, r1	; 0x05
    21bc:	0e c0       	rjmp	.+28     	; 0x21da <DIO_voidSetPortValue+0xc4>

				}
				break;

			case PORT_D:
				if(Copy_Value == HIGH)
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	29 f4       	brne	.+10     	; 0x21ce <DIO_voidSetPortValue+0xb8>
				{
					DIO->PORTD.All_Bits = 0xFF;
    21c4:	e0 e3       	ldi	r30, 0x30	; 48
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	82 83       	std	Z+2, r24	; 0x02
    21cc:	06 c0       	rjmp	.+12     	; 0x21da <DIO_voidSetPortValue+0xc4>
				}
				else if(Copy_Value == LOW)
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	88 23       	and	r24, r24
    21d2:	19 f4       	brne	.+6      	; 0x21da <DIO_voidSetPortValue+0xc4>
				{
					DIO->PORTD.All_Bits = 0;
    21d4:	e0 e3       	ldi	r30, 0x30	; 48
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	12 82       	std	Z+2, r1	; 0x02

				}
				break;
		}
}
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <DIO_voidGetPortValue>:
u8 DIO_voidGetPortValue(PORT_t Copy_PortId)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <DIO_voidGetPortValue+0x6>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <DIO_voidGetPortValue+0x8>
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Pin;
	switch(Copy_PortId)
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	3c 83       	std	Y+4, r19	; 0x04
    21fe:	2b 83       	std	Y+3, r18	; 0x03
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	91 05       	cpc	r25, r1
    2208:	d1 f0       	breq	.+52     	; 0x223e <DIO_voidGetPortValue+0x56>
    220a:	2b 81       	ldd	r18, Y+3	; 0x03
    220c:	3c 81       	ldd	r19, Y+4	; 0x04
    220e:	22 30       	cpi	r18, 0x02	; 2
    2210:	31 05       	cpc	r19, r1
    2212:	2c f4       	brge	.+10     	; 0x221e <DIO_voidGetPortValue+0x36>
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	61 f0       	breq	.+24     	; 0x2234 <DIO_voidGetPortValue+0x4c>
    221c:	1e c0       	rjmp	.+60     	; 0x225a <DIO_voidGetPortValue+0x72>
    221e:	2b 81       	ldd	r18, Y+3	; 0x03
    2220:	3c 81       	ldd	r19, Y+4	; 0x04
    2222:	22 30       	cpi	r18, 0x02	; 2
    2224:	31 05       	cpc	r19, r1
    2226:	81 f0       	breq	.+32     	; 0x2248 <DIO_voidGetPortValue+0x60>
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	83 30       	cpi	r24, 0x03	; 3
    222e:	91 05       	cpc	r25, r1
    2230:	81 f0       	breq	.+32     	; 0x2252 <DIO_voidGetPortValue+0x6a>
    2232:	13 c0       	rjmp	.+38     	; 0x225a <DIO_voidGetPortValue+0x72>
	{
		case PORT_A:
			Local_u8Pin = DIO->PINA.All_Bits;
    2234:	e0 e3       	ldi	r30, 0x30	; 48
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	81 85       	ldd	r24, Z+9	; 0x09
    223a:	89 83       	std	Y+1, r24	; 0x01
    223c:	0e c0       	rjmp	.+28     	; 0x225a <DIO_voidGetPortValue+0x72>
		break;
		case PORT_B:
			Local_u8Pin = DIO->PINB.All_Bits;
    223e:	e0 e3       	ldi	r30, 0x30	; 48
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	86 81       	ldd	r24, Z+6	; 0x06
    2244:	89 83       	std	Y+1, r24	; 0x01
    2246:	09 c0       	rjmp	.+18     	; 0x225a <DIO_voidGetPortValue+0x72>
		break;
		case PORT_C:
			Local_u8Pin = DIO->PINC.All_Bits;
    2248:	e0 e3       	ldi	r30, 0x30	; 48
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	83 81       	ldd	r24, Z+3	; 0x03
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	04 c0       	rjmp	.+8      	; 0x225a <DIO_voidGetPortValue+0x72>

		break;
		case PORT_D:
			Local_u8Pin = DIO->PIND.All_Bits;
    2252:	e0 e3       	ldi	r30, 0x30	; 48
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: break;
	}
	return Local_u8Pin;
    225a:	89 81       	ldd	r24, Y+1	; 0x01
}
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <MGIE_voidEnable>:
#include "../inc/GIE_config.h"



void MGIE_voidEnable(void)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
	asm("SEI");
    2272:	78 94       	sei
}
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <MGIE_voidDisable>:




void MGIE_voidDisable(void)
{	
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
 	asm("CLI");
    2282:	f8 94       	cli
}
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <H_LCD_void_Init>:
				};
				
 
 
void H_LCD_void_Init(void)
 {
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	6e 97       	sbiw	r28, 0x1e	; 30
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
	/* SET Direction as OUTPUT for RS,RW,EN */
	for(u8 i = 0; i< 6 ; i+=2)
    229e:	1e 8e       	std	Y+30, r1	; 0x1e
    22a0:	17 c0       	rjmp	.+46     	; 0x22d0 <H_LCD_void_Init+0x46>
	{
		DIO_voidSetPinDirection(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],OUTPUT);
    22a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	fc 01       	movw	r30, r24
    22aa:	ef 53       	subi	r30, 0x3F	; 63
    22ac:	fe 4f       	sbci	r31, 0xFE	; 254
    22ae:	20 81       	ld	r18, Z
    22b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22b2:	88 2f       	mov	r24, r24
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	01 96       	adiw	r24, 0x01	; 1
    22b8:	fc 01       	movw	r30, r24
    22ba:	ef 53       	subi	r30, 0x3F	; 63
    22bc:	fe 4f       	sbci	r31, 0xFE	; 254
    22be:	90 81       	ld	r25, Z
    22c0:	82 2f       	mov	r24, r18
    22c2:	69 2f       	mov	r22, r25
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
 
 
void H_LCD_void_Init(void)
 {
	/* SET Direction as OUTPUT for RS,RW,EN */
	for(u8 i = 0; i< 6 ; i+=2)
    22ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22cc:	8e 5f       	subi	r24, 0xFE	; 254
    22ce:	8e 8f       	std	Y+30, r24	; 0x1e
    22d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22d2:	86 30       	cpi	r24, 0x06	; 6
    22d4:	30 f3       	brcs	.-52     	; 0x22a2 <H_LCD_void_Init+0x18>
		H_LCD_void_sendCommand(0b00000110);



	#elif LCD_MODE == MODE_4BIT
	 	for(u8 i = 14; i<22;i+=2)
    22d6:	8e e0       	ldi	r24, 0x0E	; 14
    22d8:	8d 8f       	std	Y+29, r24	; 0x1d
    22da:	17 c0       	rjmp	.+46     	; 0x230a <H_LCD_void_Init+0x80>
		{
			DIO_voidSetPinDirection(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],OUTPUT);
    22dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	fc 01       	movw	r30, r24
    22e4:	ef 53       	subi	r30, 0x3F	; 63
    22e6:	fe 4f       	sbci	r31, 0xFE	; 254
    22e8:	20 81       	ld	r18, Z
    22ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ec:	88 2f       	mov	r24, r24
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	fc 01       	movw	r30, r24
    22f4:	ef 53       	subi	r30, 0x3F	; 63
    22f6:	fe 4f       	sbci	r31, 0xFE	; 254
    22f8:	90 81       	ld	r25, Z
    22fa:	82 2f       	mov	r24, r18
    22fc:	69 2f       	mov	r22, r25
    22fe:	41 e0       	ldi	r20, 0x01	; 1
    2300:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
		H_LCD_void_sendCommand(0b00000110);



	#elif LCD_MODE == MODE_4BIT
	 	for(u8 i = 14; i<22;i+=2)
    2304:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2306:	8e 5f       	subi	r24, 0xFE	; 254
    2308:	8d 8f       	std	Y+29, r24	; 0x1d
    230a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    230c:	86 31       	cpi	r24, 0x16	; 22
    230e:	30 f3       	brcs	.-52     	; 0x22dc <H_LCD_void_Init+0x52>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a8 e4       	ldi	r26, 0x48	; 72
    2316:	b2 e4       	ldi	r27, 0x42	; 66
    2318:	89 8f       	std	Y+25, r24	; 0x19
    231a:	9a 8f       	std	Y+26, r25	; 0x1a
    231c:	ab 8f       	std	Y+27, r26	; 0x1b
    231e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2320:	69 8d       	ldd	r22, Y+25	; 0x19
    2322:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2324:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2326:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4a e7       	ldi	r20, 0x7A	; 122
    232e:	55 e4       	ldi	r21, 0x45	; 69
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	8d 8b       	std	Y+21, r24	; 0x15
    233a:	9e 8b       	std	Y+22, r25	; 0x16
    233c:	af 8b       	std	Y+23, r26	; 0x17
    233e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2340:	6d 89       	ldd	r22, Y+21	; 0x15
    2342:	7e 89       	ldd	r23, Y+22	; 0x16
    2344:	8f 89       	ldd	r24, Y+23	; 0x17
    2346:	98 8d       	ldd	r25, Y+24	; 0x18
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e8       	ldi	r20, 0x80	; 128
    234e:	5f e3       	ldi	r21, 0x3F	; 63
    2350:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2354:	88 23       	and	r24, r24
    2356:	2c f4       	brge	.+10     	; 0x2362 <H_LCD_void_Init+0xd8>
		__ticks = 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	9c 8b       	std	Y+20, r25	; 0x14
    235e:	8b 8b       	std	Y+19, r24	; 0x13
    2360:	3f c0       	rjmp	.+126    	; 0x23e0 <H_LCD_void_Init+0x156>
	else if (__tmp > 65535)
    2362:	6d 89       	ldd	r22, Y+21	; 0x15
    2364:	7e 89       	ldd	r23, Y+22	; 0x16
    2366:	8f 89       	ldd	r24, Y+23	; 0x17
    2368:	98 8d       	ldd	r25, Y+24	; 0x18
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	3f ef       	ldi	r19, 0xFF	; 255
    236e:	4f e7       	ldi	r20, 0x7F	; 127
    2370:	57 e4       	ldi	r21, 0x47	; 71
    2372:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2376:	18 16       	cp	r1, r24
    2378:	4c f5       	brge	.+82     	; 0x23cc <H_LCD_void_Init+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237a:	69 8d       	ldd	r22, Y+25	; 0x19
    237c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    237e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2380:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e2       	ldi	r20, 0x20	; 32
    2388:	51 e4       	ldi	r21, 0x41	; 65
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	9c 8b       	std	Y+20, r25	; 0x14
    23a0:	8b 8b       	std	Y+19, r24	; 0x13
    23a2:	0f c0       	rjmp	.+30     	; 0x23c2 <H_LCD_void_Init+0x138>
    23a4:	80 e9       	ldi	r24, 0x90	; 144
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	9a 8b       	std	Y+18, r25	; 0x12
    23aa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23ac:	89 89       	ldd	r24, Y+17	; 0x11
    23ae:	9a 89       	ldd	r25, Y+18	; 0x12
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <H_LCD_void_Init+0x126>
    23b4:	9a 8b       	std	Y+18, r25	; 0x12
    23b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ba:	9c 89       	ldd	r25, Y+20	; 0x14
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	9c 8b       	std	Y+20, r25	; 0x14
    23c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c2:	8b 89       	ldd	r24, Y+19	; 0x13
    23c4:	9c 89       	ldd	r25, Y+20	; 0x14
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	69 f7       	brne	.-38     	; 0x23a4 <H_LCD_void_Init+0x11a>
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <H_LCD_void_Init+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23cc:	6d 89       	ldd	r22, Y+21	; 0x15
    23ce:	7e 89       	ldd	r23, Y+22	; 0x16
    23d0:	8f 89       	ldd	r24, Y+23	; 0x17
    23d2:	98 8d       	ldd	r25, Y+24	; 0x18
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9c 8b       	std	Y+20, r25	; 0x14
    23de:	8b 8b       	std	Y+19, r24	; 0x13
    23e0:	8b 89       	ldd	r24, Y+19	; 0x13
    23e2:	9c 89       	ldd	r25, Y+20	; 0x14
    23e4:	98 8b       	std	Y+16, r25	; 0x10
    23e6:	8f 87       	std	Y+15, r24	; 0x0f
    23e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ea:	98 89       	ldd	r25, Y+16	; 0x10
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <H_LCD_void_Init+0x162>
    23f0:	98 8b       	std	Y+16, r25	; 0x10
    23f2:	8f 87       	std	Y+15, r24	; 0x0f
		
		// LCD Initialization
		_delay_ms(50);

		// Function Set
		H_LCD_void_sendCommand(0b00110011);
    23f4:	83 e3       	ldi	r24, 0x33	; 51
    23f6:	0e 94 99 12 	call	0x2532	; 0x2532 <H_LCD_void_sendCommand>
		H_LCD_void_sendCommand(0b00110010);
    23fa:	82 e3       	ldi	r24, 0x32	; 50
    23fc:	0e 94 99 12 	call	0x2532	; 0x2532 <H_LCD_void_sendCommand>
			#if   LCD_LINE == ONE_LINE
				H_LCD_void_sendCommand(0b00100011);
			#elif LCD_LINE == TWO_LINE
				H_LCD_void_sendCommand(0b00101011);
			#elif LCD_LINE == FOUR_LINE
				H_LCD_void_sendCommand(0b00101011);
    2400:	8b e2       	ldi	r24, 0x2B	; 43
    2402:	0e 94 99 12 	call	0x2532	; 0x2532 <H_LCD_void_sendCommand>
		#elif LCD_FONT == FONT_5X10
			H_LCD_void_sendCommand(0b00100111);
		#endif

		// Display ON-OFF Controll => ON
		H_LCD_void_sendCommand(0b00001100);
    2406:	8c e0       	ldi	r24, 0x0C	; 12
    2408:	0e 94 99 12 	call	0x2532	; 0x2532 <H_LCD_void_sendCommand>

		//Display Clear
		H_LCD_void_sendCommand(0b00000001);
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	0e 94 99 12 	call	0x2532	; 0x2532 <H_LCD_void_sendCommand>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a0 e8       	ldi	r26, 0x80	; 128
    2418:	bf e3       	ldi	r27, 0x3F	; 63
    241a:	8b 87       	std	Y+11, r24	; 0x0b
    241c:	9c 87       	std	Y+12, r25	; 0x0c
    241e:	ad 87       	std	Y+13, r26	; 0x0d
    2420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	6b 85       	ldd	r22, Y+11	; 0x0b
    2424:	7c 85       	ldd	r23, Y+12	; 0x0c
    2426:	8d 85       	ldd	r24, Y+13	; 0x0d
    2428:	9e 85       	ldd	r25, Y+14	; 0x0e
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4a e7       	ldi	r20, 0x7A	; 122
    2430:	55 e4       	ldi	r21, 0x45	; 69
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	8f 83       	std	Y+7, r24	; 0x07
    243c:	98 87       	std	Y+8, r25	; 0x08
    243e:	a9 87       	std	Y+9, r26	; 0x09
    2440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2442:	6f 81       	ldd	r22, Y+7	; 0x07
    2444:	78 85       	ldd	r23, Y+8	; 0x08
    2446:	89 85       	ldd	r24, Y+9	; 0x09
    2448:	9a 85       	ldd	r25, Y+10	; 0x0a
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2456:	88 23       	and	r24, r24
    2458:	2c f4       	brge	.+10     	; 0x2464 <H_LCD_void_Init+0x1da>
		__ticks = 1;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	3f c0       	rjmp	.+126    	; 0x24e2 <H_LCD_void_Init+0x258>
	else if (__tmp > 65535)
    2464:	6f 81       	ldd	r22, Y+7	; 0x07
    2466:	78 85       	ldd	r23, Y+8	; 0x08
    2468:	89 85       	ldd	r24, Y+9	; 0x09
    246a:	9a 85       	ldd	r25, Y+10	; 0x0a
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2478:	18 16       	cp	r1, r24
    247a:	4c f5       	brge	.+82     	; 0x24ce <H_LCD_void_Init+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	6b 85       	ldd	r22, Y+11	; 0x0b
    247e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2480:	8d 85       	ldd	r24, Y+13	; 0x0d
    2482:	9e 85       	ldd	r25, Y+14	; 0x0e
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <H_LCD_void_Init+0x23a>
    24a6:	80 e9       	ldi	r24, 0x90	; 144
    24a8:	91 e0       	ldi	r25, 0x01	; 1
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	8b 83       	std	Y+3, r24	; 0x03
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <H_LCD_void_Init+0x228>
    24b6:	9c 83       	std	Y+4, r25	; 0x04
    24b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	69 f7       	brne	.-38     	; 0x24a6 <H_LCD_void_Init+0x21c>
    24cc:	14 c0       	rjmp	.+40     	; 0x24f6 <H_LCD_void_Init+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	9a 81       	ldd	r25, Y+2	; 0x02
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <H_LCD_void_Init+0x264>
    24f2:	9a 83       	std	Y+2, r25	; 0x02
    24f4:	89 83       	std	Y+1, r24	; 0x01
		
		_delay_ms(1);
		
		//Entry Mode Set  >> I/D=1 & S=0
		H_LCD_void_sendCommand(0b00000110);
    24f6:	86 e0       	ldi	r24, 0x06	; 6
    24f8:	0e 94 99 12 	call	0x2532	; 0x2532 <H_LCD_void_sendCommand>
		_delay_ms(1);
		H_LCD_void_sendCommand(0X06);
*/
	#endif
	
 }
    24fc:	6e 96       	adiw	r28, 0x1e	; 30
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <H_LCD_void_sendData>:
	 
	 

	 
void H_LCD_void_sendData(u8 copy_u8data )
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	0f 92       	push	r0
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	89 83       	std	Y+1, r24	; 0x01
	// Write Data => RS = 1
	DIO_voidSetPinValue(LCD_RS_PORT_PIN,HIGH);
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	63 e0       	ldi	r22, 0x03	; 3
    251e:	41 e0       	ldi	r20, 0x01	; 1
    2520:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <DIO_voidSetPinValue>


	// Send Data to Latch Function
	H_LCD_void_latchByte(copy_u8data);
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <H_LCD_void_latchByte>

}
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <H_LCD_void_sendCommand>:

void H_LCD_void_sendCommand(u8 copy_u8command)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	0f 92       	push	r0
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	89 83       	std	Y+1, r24	; 0x01
	// Write Instruction => RS = 0
	DIO_voidSetPinValue(LCD_RS_PORT_PIN,LOW);
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	63 e0       	ldi	r22, 0x03	; 3
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <DIO_voidSetPinValue>
	

	// Send Data to Latch Function
	H_LCD_void_latchByte(copy_u8command);
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <H_LCD_void_latchByte>

}
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <H_LCD_void_sendString>:


void H_LCD_void_sendString(const s8 *pstr) {
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	62 97       	sbiw	r28, 0x12	; 18
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	9a 8b       	std	Y+18, r25	; 0x12
    256c:	89 8b       	std	Y+17, r24	; 0x11
    u8 i = 0;
    256e:	18 8a       	std	Y+16, r1	; 0x10
    u8 line = 0;
    2570:	1f 86       	std	Y+15, r1	; 0x0f
    2572:	90 c0       	rjmp	.+288    	; 0x2694 <H_LCD_void_sendString+0x13e>

    while (pstr[i] != '\0')
    {
        H_LCD_void_sendData(pstr[i]);
    2574:	88 89       	ldd	r24, Y+16	; 0x10
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	89 89       	ldd	r24, Y+17	; 0x11
    257c:	9a 89       	ldd	r25, Y+18	; 0x12
    257e:	fc 01       	movw	r30, r24
    2580:	e2 0f       	add	r30, r18
    2582:	f3 1f       	adc	r31, r19
    2584:	80 81       	ld	r24, Z
    2586:	0e 94 87 12 	call	0x250e	; 0x250e <H_LCD_void_sendData>
        i++;
    258a:	88 89       	ldd	r24, Y+16	; 0x10
    258c:	8f 5f       	subi	r24, 0xFF	; 255
    258e:	88 8b       	std	Y+16, r24	; 0x10

        if (i % (LCD_COLUMNS) == 0)
    2590:	88 89       	ldd	r24, Y+16	; 0x10
    2592:	94 e1       	ldi	r25, 0x14	; 20
    2594:	69 2f       	mov	r22, r25
    2596:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <__udivmodqi4>
    259a:	89 2f       	mov	r24, r25
    259c:	88 23       	and	r24, r24
    259e:	09 f0       	breq	.+2      	; 0x25a2 <H_LCD_void_sendString+0x4c>
    25a0:	79 c0       	rjmp	.+242    	; 0x2694 <H_LCD_void_sendString+0x13e>
        {
            // New line after every `LCD_COLUMNS` characters
        	H_LCD_void_gotoXY(++line,0);
    25a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a4:	8f 5f       	subi	r24, 0xFF	; 255
    25a6:	8f 87       	std	Y+15, r24	; 0x0f
    25a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <H_LCD_void_gotoXY>
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	a0 e8       	ldi	r26, 0x80	; 128
    25b6:	bf e3       	ldi	r27, 0x3F	; 63
    25b8:	8b 87       	std	Y+11, r24	; 0x0b
    25ba:	9c 87       	std	Y+12, r25	; 0x0c
    25bc:	ad 87       	std	Y+13, r26	; 0x0d
    25be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	4a e7       	ldi	r20, 0x7A	; 122
    25ce:	55 e4       	ldi	r21, 0x45	; 69
    25d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	8f 83       	std	Y+7, r24	; 0x07
    25da:	98 87       	std	Y+8, r25	; 0x08
    25dc:	a9 87       	std	Y+9, r26	; 0x09
    25de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25e0:	6f 81       	ldd	r22, Y+7	; 0x07
    25e2:	78 85       	ldd	r23, Y+8	; 0x08
    25e4:	89 85       	ldd	r24, Y+9	; 0x09
    25e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e8       	ldi	r20, 0x80	; 128
    25ee:	5f e3       	ldi	r21, 0x3F	; 63
    25f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f4:	88 23       	and	r24, r24
    25f6:	2c f4       	brge	.+10     	; 0x2602 <H_LCD_void_sendString+0xac>
		__ticks = 1;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	9e 83       	std	Y+6, r25	; 0x06
    25fe:	8d 83       	std	Y+5, r24	; 0x05
    2600:	3f c0       	rjmp	.+126    	; 0x2680 <H_LCD_void_sendString+0x12a>
	else if (__tmp > 65535)
    2602:	6f 81       	ldd	r22, Y+7	; 0x07
    2604:	78 85       	ldd	r23, Y+8	; 0x08
    2606:	89 85       	ldd	r24, Y+9	; 0x09
    2608:	9a 85       	ldd	r25, Y+10	; 0x0a
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	3f ef       	ldi	r19, 0xFF	; 255
    260e:	4f e7       	ldi	r20, 0x7F	; 127
    2610:	57 e4       	ldi	r21, 0x47	; 71
    2612:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2616:	18 16       	cp	r1, r24
    2618:	4c f5       	brge	.+82     	; 0x266c <H_LCD_void_sendString+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261a:	6b 85       	ldd	r22, Y+11	; 0x0b
    261c:	7c 85       	ldd	r23, Y+12	; 0x0c
    261e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2620:	9e 85       	ldd	r25, Y+14	; 0x0e
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e2       	ldi	r20, 0x20	; 32
    2628:	51 e4       	ldi	r21, 0x41	; 65
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	bc 01       	movw	r22, r24
    2634:	cd 01       	movw	r24, r26
    2636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	9e 83       	std	Y+6, r25	; 0x06
    2640:	8d 83       	std	Y+5, r24	; 0x05
    2642:	0f c0       	rjmp	.+30     	; 0x2662 <H_LCD_void_sendString+0x10c>
    2644:	80 e9       	ldi	r24, 0x90	; 144
    2646:	91 e0       	ldi	r25, 0x01	; 1
    2648:	9c 83       	std	Y+4, r25	; 0x04
    264a:	8b 83       	std	Y+3, r24	; 0x03
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <H_LCD_void_sendString+0xfa>
    2654:	9c 83       	std	Y+4, r25	; 0x04
    2656:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	69 f7       	brne	.-38     	; 0x2644 <H_LCD_void_sendString+0xee>
    266a:	14 c0       	rjmp	.+40     	; 0x2694 <H_LCD_void_sendString+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266c:	6f 81       	ldd	r22, Y+7	; 0x07
    266e:	78 85       	ldd	r23, Y+8	; 0x08
    2670:	89 85       	ldd	r24, Y+9	; 0x09
    2672:	9a 85       	ldd	r25, Y+10	; 0x0a
    2674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	9e 83       	std	Y+6, r25	; 0x06
    267e:	8d 83       	std	Y+5, r24	; 0x05
    2680:	8d 81       	ldd	r24, Y+5	; 0x05
    2682:	9e 81       	ldd	r25, Y+6	; 0x06
    2684:	9a 83       	std	Y+2, r25	; 0x02
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	9a 81       	ldd	r25, Y+2	; 0x02
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <H_LCD_void_sendString+0x136>
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01

void H_LCD_void_sendString(const s8 *pstr) {
    u8 i = 0;
    u8 line = 0;

    while (pstr[i] != '\0')
    2694:	88 89       	ldd	r24, Y+16	; 0x10
    2696:	28 2f       	mov	r18, r24
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	89 89       	ldd	r24, Y+17	; 0x11
    269c:	9a 89       	ldd	r25, Y+18	; 0x12
    269e:	fc 01       	movw	r30, r24
    26a0:	e2 0f       	add	r30, r18
    26a2:	f3 1f       	adc	r31, r19
    26a4:	80 81       	ld	r24, Z
    26a6:	88 23       	and	r24, r24
    26a8:	09 f0       	breq	.+2      	; 0x26ac <H_LCD_void_sendString+0x156>
    26aa:	64 cf       	rjmp	.-312    	; 0x2574 <H_LCD_void_sendString+0x1e>
        	H_LCD_void_gotoXY(++line,0);
			_delay_ms(1);
        }

    }
}
    26ac:	62 96       	adiw	r28, 0x12	; 18
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <H_LCD_void_ShiftString>:


void H_LCD_void_ShiftString(const s8 *pstr, u8 copy_u8lineNumber)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <H_LCD_void_ShiftString+0x6>
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <H_LCD_void_ShiftString+0x8>
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	9b 83       	std	Y+3, r25	; 0x03
    26cc:	8a 83       	std	Y+2, r24	; 0x02
    26ce:	6c 83       	std	Y+4, r22	; 0x04
	static u8 i = 0 ;
	static u8 j = 0 ;

    if (copy_u8lineNumber < LCD_ROW)
    26d0:	8c 81       	ldd	r24, Y+4	; 0x04
    26d2:	84 30       	cpi	r24, 0x04	; 4
    26d4:	08 f0       	brcs	.+2      	; 0x26d8 <H_LCD_void_ShiftString+0x1a>
    26d6:	4c c0       	rjmp	.+152    	; 0x2770 <H_LCD_void_ShiftString+0xb2>
    {
         u8 strLen = 0;
    26d8:	19 82       	std	Y+1, r1	; 0x01
    26da:	03 c0       	rjmp	.+6      	; 0x26e2 <H_LCD_void_ShiftString+0x24>
         // Calculate the string length manually
         while (pstr[strLen] != '\0')
         {
             strLen++;
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	8f 5f       	subi	r24, 0xFF	; 255
    26e0:	89 83       	std	Y+1, r24	; 0x01

    if (copy_u8lineNumber < LCD_ROW)
    {
         u8 strLen = 0;
         // Calculate the string length manually
         while (pstr[strLen] != '\0')
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	9b 81       	ldd	r25, Y+3	; 0x03
    26ec:	fc 01       	movw	r30, r24
    26ee:	e2 0f       	add	r30, r18
    26f0:	f3 1f       	adc	r31, r19
    26f2:	80 81       	ld	r24, Z
    26f4:	88 23       	and	r24, r24
    26f6:	91 f7       	brne	.-28     	; 0x26dc <H_LCD_void_ShiftString+0x1e>
         {
             strLen++;
         }

        if (i >= (LCD_COLUMNS-strLen-j))
    26f8:	80 91 1b 02 	lds	r24, 0x021B
    26fc:	48 2f       	mov	r20, r24
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	28 2f       	mov	r18, r24
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	84 e1       	ldi	r24, 0x14	; 20
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	bc 01       	movw	r22, r24
    270c:	62 1b       	sub	r22, r18
    270e:	73 0b       	sbc	r23, r19
    2710:	9b 01       	movw	r18, r22
    2712:	80 91 1a 02 	lds	r24, 0x021A
    2716:	88 2f       	mov	r24, r24
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	b9 01       	movw	r22, r18
    271c:	68 1b       	sub	r22, r24
    271e:	79 0b       	sbc	r23, r25
    2720:	cb 01       	movw	r24, r22
    2722:	48 17       	cp	r20, r24
    2724:	59 07       	cpc	r21, r25
    2726:	2c f0       	brlt	.+10     	; 0x2732 <H_LCD_void_ShiftString+0x74>
        {
            i = 0;  // Start from the beginning when reaching the end
    2728:	10 92 1b 02 	sts	0x021B, r1
            H_LCD_void_clearLine(copy_u8lineNumber);
    272c:	8c 81       	ldd	r24, Y+4	; 0x04
    272e:	0e 94 bf 13 	call	0x277e	; 0x277e <H_LCD_void_clearLine>
        }
        H_LCD_void_gotoXY(copy_u8lineNumber,i++);
    2732:	80 91 1b 02 	lds	r24, 0x021B
    2736:	98 2f       	mov	r25, r24
    2738:	8f 5f       	subi	r24, 0xFF	; 255
    273a:	80 93 1b 02 	sts	0x021B, r24
    273e:	8c 81       	ldd	r24, Y+4	; 0x04
    2740:	69 2f       	mov	r22, r25
    2742:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <H_LCD_void_gotoXY>
        for(j = 0 ; j < i ;j++)
    2746:	10 92 1a 02 	sts	0x021A, r1
    274a:	08 c0       	rjmp	.+16     	; 0x275c <H_LCD_void_ShiftString+0x9e>
        {
        	H_LCD_void_sendData(' ');
    274c:	80 e2       	ldi	r24, 0x20	; 32
    274e:	0e 94 87 12 	call	0x250e	; 0x250e <H_LCD_void_sendData>
        {
            i = 0;  // Start from the beginning when reaching the end
            H_LCD_void_clearLine(copy_u8lineNumber);
        }
        H_LCD_void_gotoXY(copy_u8lineNumber,i++);
        for(j = 0 ; j < i ;j++)
    2752:	80 91 1a 02 	lds	r24, 0x021A
    2756:	8f 5f       	subi	r24, 0xFF	; 255
    2758:	80 93 1a 02 	sts	0x021A, r24
    275c:	90 91 1a 02 	lds	r25, 0x021A
    2760:	80 91 1b 02 	lds	r24, 0x021B
    2764:	98 17       	cp	r25, r24
    2766:	90 f3       	brcs	.-28     	; 0x274c <H_LCD_void_ShiftString+0x8e>
        {
        	H_LCD_void_sendData(' ');
        }
        H_LCD_void_sendString(pstr);
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	9b 81       	ldd	r25, Y+3	; 0x03
    276c:	0e 94 ab 12 	call	0x2556	; 0x2556 <H_LCD_void_sendString>
    }
}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	cf 91       	pop	r28
    277a:	df 91       	pop	r29
    277c:	08 95       	ret

0000277e <H_LCD_void_clearLine>:




void H_LCD_void_clearLine(u8 copy_u8lineNumber)
{
    277e:	df 93       	push	r29
    2780:	cf 93       	push	r28
    2782:	00 d0       	rcall	.+0      	; 0x2784 <H_LCD_void_clearLine+0x6>
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	8a 83       	std	Y+2, r24	; 0x02
    if (copy_u8lineNumber < LCD_ROW)
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	84 30       	cpi	r24, 0x04	; 4
    278e:	98 f4       	brcc	.+38     	; 0x27b6 <H_LCD_void_clearLine+0x38>
    {
        H_LCD_void_gotoXY(copy_u8lineNumber, 0);  // Move to the beginning of the line
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <H_LCD_void_gotoXY>
        for (u8 i = 0; i < LCD_COLUMNS; i++)
    2798:	19 82       	std	Y+1, r1	; 0x01
    279a:	06 c0       	rjmp	.+12     	; 0x27a8 <H_LCD_void_clearLine+0x2a>
        {
            H_LCD_void_sendData(' ');  // Send space character to clear the line
    279c:	80 e2       	ldi	r24, 0x20	; 32
    279e:	0e 94 87 12 	call	0x250e	; 0x250e <H_LCD_void_sendData>
void H_LCD_void_clearLine(u8 copy_u8lineNumber)
{
    if (copy_u8lineNumber < LCD_ROW)
    {
        H_LCD_void_gotoXY(copy_u8lineNumber, 0);  // Move to the beginning of the line
        for (u8 i = 0; i < LCD_COLUMNS; i++)
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	8f 5f       	subi	r24, 0xFF	; 255
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	84 31       	cpi	r24, 0x14	; 20
    27ac:	b8 f3       	brcs	.-18     	; 0x279c <H_LCD_void_clearLine+0x1e>
        {
            H_LCD_void_sendData(' ');  // Send space character to clear the line
        }
        H_LCD_void_gotoXY(copy_u8lineNumber, 0);  // Move to the beginning of the line
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <H_LCD_void_gotoXY>
    }
}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <H_LCD_void_gotoXY>:



void H_LCD_void_gotoXY(u8 copy_u8Row, u8 copy_u8Col)
{
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <H_LCD_void_gotoXY+0x6>
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <H_LCD_void_gotoXY+0x8>
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <H_LCD_void_gotoXY+0xa>
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	8d 83       	std	Y+5, r24	; 0x05
    27d0:	6e 83       	std	Y+6, r22	; 0x06
	// Row offsets for a 4x20 LCD
    u8 row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    27d2:	19 82       	std	Y+1, r1	; 0x01
    27d4:	80 e4       	ldi	r24, 0x40	; 64
    27d6:	8a 83       	std	Y+2, r24	; 0x02
    27d8:	84 e1       	ldi	r24, 0x14	; 20
    27da:	8b 83       	std	Y+3, r24	; 0x03
    27dc:	84 e5       	ldi	r24, 0x54	; 84
    27de:	8c 83       	std	Y+4, r24	; 0x04
    H_LCD_void_sendCommand(0x80 | (row_offsets[copy_u8Row] + copy_u8Col));
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	ce 01       	movw	r24, r28
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	fc 01       	movw	r30, r24
    27ec:	e2 0f       	add	r30, r18
    27ee:	f3 1f       	adc	r31, r19
    27f0:	90 81       	ld	r25, Z
    27f2:	8e 81       	ldd	r24, Y+6	; 0x06
    27f4:	89 0f       	add	r24, r25
    27f6:	80 68       	ori	r24, 0x80	; 128
    27f8:	0e 94 99 12 	call	0x2532	; 0x2532 <H_LCD_void_sendCommand>
}
    27fc:	26 96       	adiw	r28, 0x06	; 6
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <H_LCD_void_sendIntNum>:


void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	62 97       	sbiw	r28, 0x12	; 18
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	6f 87       	std	Y+15, r22	; 0x0f
    2828:	78 8b       	std	Y+16, r23	; 0x10
    282a:	89 8b       	std	Y+17, r24	; 0x11
    282c:	9a 8b       	std	Y+18, r25	; 0x12
		// Buffer to store the digits as characters
	    s8 buffer[12];  // Assuming a 32-bit number, which can have up to 11 digits

	    // Check for negative numbers
	    if (copy_s32Num < 0)
    282e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2830:	98 89       	ldd	r25, Y+16	; 0x10
    2832:	a9 89       	ldd	r26, Y+17	; 0x11
    2834:	ba 89       	ldd	r27, Y+18	; 0x12
    2836:	bb 23       	and	r27, r27
    2838:	94 f4       	brge	.+36     	; 0x285e <H_LCD_void_sendIntNum+0x50>
	    {
	        H_LCD_void_sendData('-');  // Display a minus sign for negative numbers
    283a:	8d e2       	ldi	r24, 0x2D	; 45
    283c:	0e 94 87 12 	call	0x250e	; 0x250e <H_LCD_void_sendData>
	        copy_s32Num = -copy_s32Num;  // Make the number positive for processing
    2840:	8f 85       	ldd	r24, Y+15	; 0x0f
    2842:	98 89       	ldd	r25, Y+16	; 0x10
    2844:	a9 89       	ldd	r26, Y+17	; 0x11
    2846:	ba 89       	ldd	r27, Y+18	; 0x12
    2848:	b0 95       	com	r27
    284a:	a0 95       	com	r26
    284c:	90 95       	com	r25
    284e:	81 95       	neg	r24
    2850:	9f 4f       	sbci	r25, 0xFF	; 255
    2852:	af 4f       	sbci	r26, 0xFF	; 255
    2854:	bf 4f       	sbci	r27, 0xFF	; 255
    2856:	8f 87       	std	Y+15, r24	; 0x0f
    2858:	98 8b       	std	Y+16, r25	; 0x10
    285a:	a9 8b       	std	Y+17, r26	; 0x11
    285c:	ba 8b       	std	Y+18, r27	; 0x12
	    }

	    // Handle the case of a number being zero
	    if (copy_s32Num == 0) {
    285e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2860:	98 89       	ldd	r25, Y+16	; 0x10
    2862:	a9 89       	ldd	r26, Y+17	; 0x11
    2864:	ba 89       	ldd	r27, Y+18	; 0x12
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	a1 05       	cpc	r26, r1
    286a:	b1 05       	cpc	r27, r1
    286c:	21 f4       	brne	.+8      	; 0x2876 <H_LCD_void_sendIntNum+0x68>
	        H_LCD_void_sendData('0');
    286e:	80 e3       	ldi	r24, 0x30	; 48
    2870:	0e 94 87 12 	call	0x250e	; 0x250e <H_LCD_void_sendData>
    2874:	50 c0       	rjmp	.+160    	; 0x2916 <H_LCD_void_sendIntNum+0x108>
	        return;
	    }

	    // Convert the number to a string in reverse order
	    u8 index = 0;
    2876:	1a 82       	std	Y+2, r1	; 0x02
    2878:	2e c0       	rjmp	.+92     	; 0x28d6 <H_LCD_void_sendIntNum+0xc8>
	    while (copy_s32Num > 0)
	    {
	        buffer[index++] = '0' + (copy_s32Num % 10);  // Convert the digit to a character
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	08 2f       	mov	r16, r24
    287e:	10 e0       	ldi	r17, 0x00	; 0
    2880:	8f 85       	ldd	r24, Y+15	; 0x0f
    2882:	98 89       	ldd	r25, Y+16	; 0x10
    2884:	a9 89       	ldd	r26, Y+17	; 0x11
    2886:	ba 89       	ldd	r27, Y+18	; 0x12
    2888:	2a e0       	ldi	r18, 0x0A	; 10
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__divmodsi4>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	80 5d       	subi	r24, 0xD0	; 208
    289e:	28 2f       	mov	r18, r24
    28a0:	ce 01       	movw	r24, r28
    28a2:	03 96       	adiw	r24, 0x03	; 3
    28a4:	fc 01       	movw	r30, r24
    28a6:	e0 0f       	add	r30, r16
    28a8:	f1 1f       	adc	r31, r17
    28aa:	20 83       	st	Z, r18
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	8f 5f       	subi	r24, 0xFF	; 255
    28b0:	8a 83       	std	Y+2, r24	; 0x02
	        copy_s32Num /= 10;  // Remove the last digit
    28b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b4:	98 89       	ldd	r25, Y+16	; 0x10
    28b6:	a9 89       	ldd	r26, Y+17	; 0x11
    28b8:	ba 89       	ldd	r27, Y+18	; 0x12
    28ba:	2a e0       	ldi	r18, 0x0A	; 10
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__divmodsi4>
    28ca:	da 01       	movw	r26, r20
    28cc:	c9 01       	movw	r24, r18
    28ce:	8f 87       	std	Y+15, r24	; 0x0f
    28d0:	98 8b       	std	Y+16, r25	; 0x10
    28d2:	a9 8b       	std	Y+17, r26	; 0x11
    28d4:	ba 8b       	std	Y+18, r27	; 0x12
	        return;
	    }

	    // Convert the number to a string in reverse order
	    u8 index = 0;
	    while (copy_s32Num > 0)
    28d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d8:	98 89       	ldd	r25, Y+16	; 0x10
    28da:	a9 89       	ldd	r26, Y+17	; 0x11
    28dc:	ba 89       	ldd	r27, Y+18	; 0x12
    28de:	18 16       	cp	r1, r24
    28e0:	19 06       	cpc	r1, r25
    28e2:	1a 06       	cpc	r1, r26
    28e4:	1b 06       	cpc	r1, r27
    28e6:	4c f2       	brlt	.-110    	; 0x287a <H_LCD_void_sendIntNum+0x6c>
	        buffer[index++] = '0' + (copy_s32Num % 10);  // Convert the digit to a character
	        copy_s32Num /= 10;  // Remove the last digit
	    }

	    // Send the string to the LCD in reverse order
	    for (s8 i = index - 1; i >= 0; i--)
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	81 50       	subi	r24, 0x01	; 1
    28ec:	89 83       	std	Y+1, r24	; 0x01
    28ee:	10 c0       	rjmp	.+32     	; 0x2910 <H_LCD_void_sendIntNum+0x102>
	    {
	        H_LCD_void_sendData(buffer[i]);
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	28 2f       	mov	r18, r24
    28f4:	33 27       	eor	r19, r19
    28f6:	27 fd       	sbrc	r18, 7
    28f8:	30 95       	com	r19
    28fa:	ce 01       	movw	r24, r28
    28fc:	03 96       	adiw	r24, 0x03	; 3
    28fe:	fc 01       	movw	r30, r24
    2900:	e2 0f       	add	r30, r18
    2902:	f3 1f       	adc	r31, r19
    2904:	80 81       	ld	r24, Z
    2906:	0e 94 87 12 	call	0x250e	; 0x250e <H_LCD_void_sendData>
	        buffer[index++] = '0' + (copy_s32Num % 10);  // Convert the digit to a character
	        copy_s32Num /= 10;  // Remove the last digit
	    }

	    // Send the string to the LCD in reverse order
	    for (s8 i = index - 1; i >= 0; i--)
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	81 50       	subi	r24, 0x01	; 1
    290e:	89 83       	std	Y+1, r24	; 0x01
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	88 23       	and	r24, r24
    2914:	6c f7       	brge	.-38     	; 0x28f0 <H_LCD_void_sendIntNum+0xe2>
	    {
	        H_LCD_void_sendData(buffer[i]);
	    }
	}
    2916:	62 96       	adiw	r28, 0x12	; 18
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	1f 91       	pop	r17
    2928:	0f 91       	pop	r16
    292a:	08 95       	ret

0000292c <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 *ArrPattern, u8 copy_u8charCode)
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	00 d0       	rcall	.+0      	; 0x2932 <H_LCD_void_creatCustomChar+0x6>
    2932:	00 d0       	rcall	.+0      	; 0x2934 <H_LCD_void_creatCustomChar+0x8>
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	9b 83       	std	Y+3, r25	; 0x03
    293a:	8a 83       	std	Y+2, r24	; 0x02
    293c:	6c 83       	std	Y+4, r22	; 0x04
    // Set CGRAM address to write the custom character (0 to 7)
    H_LCD_void_sendCommand(0x40 | (copy_u8charCode << 3));
    293e:	8c 81       	ldd	r24, Y+4	; 0x04
    2940:	88 2f       	mov	r24, r24
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	80 64       	ori	r24, 0x40	; 64
    2952:	0e 94 99 12 	call	0x2532	; 0x2532 <H_LCD_void_sendCommand>

    // Send the custom character pattern data
    for (u8 i = 0; i < 8; i++)
    2956:	19 82       	std	Y+1, r1	; 0x01
    2958:	0e c0       	rjmp	.+28     	; 0x2976 <H_LCD_void_creatCustomChar+0x4a>
    {
        H_LCD_void_sendData(ArrPattern[i]);
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	28 2f       	mov	r18, r24
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	9b 81       	ldd	r25, Y+3	; 0x03
    2964:	fc 01       	movw	r30, r24
    2966:	e2 0f       	add	r30, r18
    2968:	f3 1f       	adc	r31, r19
    296a:	80 81       	ld	r24, Z
    296c:	0e 94 87 12 	call	0x250e	; 0x250e <H_LCD_void_sendData>
{
    // Set CGRAM address to write the custom character (0 to 7)
    H_LCD_void_sendCommand(0x40 | (copy_u8charCode << 3));

    // Send the custom character pattern data
    for (u8 i = 0; i < 8; i++)
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	8f 5f       	subi	r24, 0xFF	; 255
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	88 30       	cpi	r24, 0x08	; 8
    297a:	78 f3       	brcs	.-34     	; 0x295a <H_LCD_void_creatCustomChar+0x2e>
    {
        H_LCD_void_sendData(ArrPattern[i]);
    }
    // Return to the DDRAM address
    H_LCD_void_sendCommand(0x80);
    297c:	80 e8       	ldi	r24, 0x80	; 128
    297e:	0e 94 99 12 	call	0x2532	; 0x2532 <H_LCD_void_sendCommand>
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <H_LCD_void_displayCustomChar>:

void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	0f 92       	push	r0
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	89 83       	std	Y+1, r24	; 0x01
    // Send the custom character using its character code (0 to 7)
    H_LCD_void_sendData(copy_u8charCode);
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	0e 94 87 12 	call	0x250e	; 0x250e <H_LCD_void_sendData>
}
    29a2:	0f 90       	pop	r0
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <H_LCD_void_sendFloat>:


void H_LCD_void_sendFloat(f32 number, u8 decimalPlaces)
{
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	2b 97       	sbiw	r28, 0x0b	; 11
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	6f 83       	std	Y+7, r22	; 0x07
    29c0:	78 87       	std	Y+8, r23	; 0x08
    29c2:	89 87       	std	Y+9, r24	; 0x09
    29c4:	9a 87       	std	Y+10, r25	; 0x0a
    29c6:	4b 87       	std	Y+11, r20	; 0x0b
    // Handle negative numbers
    if (number < 0.0)
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	50 e0       	ldi	r21, 0x00	; 0
    29d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29dc:	88 23       	and	r24, r24
    29de:	64 f4       	brge	.+24     	; 0x29f8 <H_LCD_void_sendFloat+0x4e>
    {
        H_LCD_void_sendData('-');
    29e0:	8d e2       	ldi	r24, 0x2D	; 45
    29e2:	0e 94 87 12 	call	0x250e	; 0x250e <H_LCD_void_sendData>
        number = -number;
    29e6:	8f 81       	ldd	r24, Y+7	; 0x07
    29e8:	98 85       	ldd	r25, Y+8	; 0x08
    29ea:	a9 85       	ldd	r26, Y+9	; 0x09
    29ec:	ba 85       	ldd	r27, Y+10	; 0x0a
    29ee:	b0 58       	subi	r27, 0x80	; 128
    29f0:	8f 83       	std	Y+7, r24	; 0x07
    29f2:	98 87       	std	Y+8, r25	; 0x08
    29f4:	a9 87       	std	Y+9, r26	; 0x09
    29f6:	ba 87       	std	Y+10, r27	; 0x0a
    }

    // Extract the integer part
    u32 integerPart = (u32)number;
    29f8:	6f 81       	ldd	r22, Y+7	; 0x07
    29fa:	78 85       	ldd	r23, Y+8	; 0x08
    29fc:	89 85       	ldd	r24, Y+9	; 0x09
    29fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	8b 83       	std	Y+3, r24	; 0x03
    2a0a:	9c 83       	std	Y+4, r25	; 0x04
    2a0c:	ad 83       	std	Y+5, r26	; 0x05
    2a0e:	be 83       	std	Y+6, r27	; 0x06

    // Convert the integer part to a string
    H_LCD_void_sendIntNum(integerPart);
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	ad 81       	ldd	r26, Y+5	; 0x05
    2a16:	be 81       	ldd	r27, Y+6	; 0x06
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 07 14 	call	0x280e	; 0x280e <H_LCD_void_sendIntNum>

    // Handle decimal point
    if (decimalPlaces > 0)
    2a20:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a22:	88 23       	and	r24, r24
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <H_LCD_void_sendFloat+0x7e>
    2a26:	54 c0       	rjmp	.+168    	; 0x2ad0 <H_LCD_void_sendFloat+0x126>
    {
        H_LCD_void_sendData('.');
    2a28:	8e e2       	ldi	r24, 0x2E	; 46
    2a2a:	0e 94 87 12 	call	0x250e	; 0x250e <H_LCD_void_sendData>
        number -= (f32)integerPart; // Get the fractional part
    2a2e:	6b 81       	ldd	r22, Y+3	; 0x03
    2a30:	7c 81       	ldd	r23, Y+4	; 0x04
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	9e 81       	ldd	r25, Y+6	; 0x06
    2a36:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2a3a:	9b 01       	movw	r18, r22
    2a3c:	ac 01       	movw	r20, r24
    2a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a40:	78 85       	ldd	r23, Y+8	; 0x08
    2a42:	89 85       	ldd	r24, Y+9	; 0x09
    2a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a46:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	8f 83       	std	Y+7, r24	; 0x07
    2a50:	98 87       	std	Y+8, r25	; 0x08
    2a52:	a9 87       	std	Y+9, r26	; 0x09
    2a54:	ba 87       	std	Y+10, r27	; 0x0a

        // Print decimal digits
        for (u8 i = 0; i < decimalPlaces; i++)
    2a56:	1a 82       	std	Y+2, r1	; 0x02
    2a58:	37 c0       	rjmp	.+110    	; 0x2ac8 <H_LCD_void_sendFloat+0x11e>
        {
            number *= 10.0;
    2a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5c:	78 85       	ldd	r23, Y+8	; 0x08
    2a5e:	89 85       	ldd	r24, Y+9	; 0x09
    2a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e2       	ldi	r20, 0x20	; 32
    2a68:	51 e4       	ldi	r21, 0x41	; 65
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	8f 83       	std	Y+7, r24	; 0x07
    2a74:	98 87       	std	Y+8, r25	; 0x08
    2a76:	a9 87       	std	Y+9, r26	; 0x09
    2a78:	ba 87       	std	Y+10, r27	; 0x0a
            u8 digit = (u8)number;
    2a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7c:	78 85       	ldd	r23, Y+8	; 0x08
    2a7e:	89 85       	ldd	r24, Y+9	; 0x09
    2a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	89 83       	std	Y+1, r24	; 0x01
            H_LCD_void_sendData('0' + digit);
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	80 5d       	subi	r24, 0xD0	; 208
    2a90:	0e 94 87 12 	call	0x250e	; 0x250e <H_LCD_void_sendData>
            number -= (f32)digit;
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	88 2f       	mov	r24, r24
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	a0 e0       	ldi	r26, 0x00	; 0
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2aa6:	9b 01       	movw	r18, r22
    2aa8:	ac 01       	movw	r20, r24
    2aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2aac:	78 85       	ldd	r23, Y+8	; 0x08
    2aae:	89 85       	ldd	r24, Y+9	; 0x09
    2ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	8f 83       	std	Y+7, r24	; 0x07
    2abc:	98 87       	std	Y+8, r25	; 0x08
    2abe:	a9 87       	std	Y+9, r26	; 0x09
    2ac0:	ba 87       	std	Y+10, r27	; 0x0a
    {
        H_LCD_void_sendData('.');
        number -= (f32)integerPart; // Get the fractional part

        // Print decimal digits
        for (u8 i = 0; i < decimalPlaces; i++)
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	8f 5f       	subi	r24, 0xFF	; 255
    2ac6:	8a 83       	std	Y+2, r24	; 0x02
    2ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aca:	8b 85       	ldd	r24, Y+11	; 0x0b
    2acc:	98 17       	cp	r25, r24
    2ace:	28 f2       	brcs	.-118    	; 0x2a5a <H_LCD_void_sendFloat+0xb0>
            u8 digit = (u8)number;
            H_LCD_void_sendData('0' + digit);
            number -= (f32)digit;
        }
    }
}
    2ad0:	2b 96       	adiw	r28, 0x0b	; 11
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <H_LCD_void_latchByte>:
/*******************************************************************************/
/*************************    Private Function      ****************************/
/*******************************************************************************/

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{	 
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
    2aea:	c7 54       	subi	r28, 0x47	; 71
    2aec:	d0 40       	sbci	r29, 0x00	; 0
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	8b af       	std	Y+59, r24	; 0x3b
	DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	62 e0       	ldi	r22, 0x02	; 2
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
		_delay_ms(5);

	#elif LCD_MODE == MODE_4BIT

		for(u8 i = 20; i>12;i-=2)
    2b04:	84 e1       	ldi	r24, 0x14	; 20
    2b06:	8a af       	std	Y+58, r24	; 0x3a
    2b08:	52 c0       	rjmp	.+164    	; 0x2bae <H_LCD_void_latchByte+0xcc>
		{
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-6)/2)));
    2b0a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b0c:	88 2f       	mov	r24, r24
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	fc 01       	movw	r30, r24
    2b12:	ef 53       	subi	r30, 0x3F	; 63
    2b14:	fe 4f       	sbci	r31, 0xFE	; 254
    2b16:	20 81       	ld	r18, Z
    2b18:	24 96       	adiw	r28, 0x04	; 4
    2b1a:	2f af       	std	Y+63, r18	; 0x3f
    2b1c:	24 97       	sbiw	r28, 0x04	; 4
    2b1e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b20:	88 2f       	mov	r24, r24
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	fc 01       	movw	r30, r24
    2b28:	ef 53       	subi	r30, 0x3F	; 63
    2b2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2c:	30 81       	ld	r19, Z
    2b2e:	23 96       	adiw	r28, 0x03	; 3
    2b30:	3f af       	std	Y+63, r19	; 0x3f
    2b32:	23 97       	sbiw	r28, 0x03	; 3
    2b34:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	22 96       	adiw	r28, 0x02	; 2
    2b3c:	3f af       	std	Y+63, r19	; 0x3f
    2b3e:	2e af       	std	Y+62, r18	; 0x3e
    2b40:	22 97       	sbiw	r28, 0x02	; 2
    2b42:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b44:	88 2f       	mov	r24, r24
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	06 97       	sbiw	r24, 0x06	; 6
    2b4a:	26 96       	adiw	r28, 0x06	; 6
    2b4c:	9f af       	std	Y+63, r25	; 0x3f
    2b4e:	8e af       	std	Y+62, r24	; 0x3e
    2b50:	26 97       	sbiw	r28, 0x06	; 6
    2b52:	26 96       	adiw	r28, 0x06	; 6
    2b54:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b56:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b58:	26 97       	sbiw	r28, 0x06	; 6
    2b5a:	99 23       	and	r25, r25
    2b5c:	54 f4       	brge	.+20     	; 0x2b72 <H_LCD_void_latchByte+0x90>
    2b5e:	26 96       	adiw	r28, 0x06	; 6
    2b60:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b62:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b64:	26 97       	sbiw	r28, 0x06	; 6
    2b66:	2f 5f       	subi	r18, 0xFF	; 255
    2b68:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6a:	26 96       	adiw	r28, 0x06	; 6
    2b6c:	3f af       	std	Y+63, r19	; 0x3f
    2b6e:	2e af       	std	Y+62, r18	; 0x3e
    2b70:	26 97       	sbiw	r28, 0x06	; 6
    2b72:	26 96       	adiw	r28, 0x06	; 6
    2b74:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b76:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b78:	26 97       	sbiw	r28, 0x06	; 6
    2b7a:	95 95       	asr	r25
    2b7c:	87 95       	ror	r24
    2b7e:	22 96       	adiw	r28, 0x02	; 2
    2b80:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b82:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b84:	22 97       	sbiw	r28, 0x02	; 2
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <H_LCD_void_latchByte+0xaa>
    2b88:	35 95       	asr	r19
    2b8a:	27 95       	ror	r18
    2b8c:	8a 95       	dec	r24
    2b8e:	e2 f7       	brpl	.-8      	; 0x2b88 <H_LCD_void_latchByte+0xa6>
    2b90:	c9 01       	movw	r24, r18
    2b92:	98 2f       	mov	r25, r24
    2b94:	91 70       	andi	r25, 0x01	; 1
    2b96:	24 96       	adiw	r28, 0x04	; 4
    2b98:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b9a:	24 97       	sbiw	r28, 0x04	; 4
    2b9c:	23 96       	adiw	r28, 0x03	; 3
    2b9e:	6f ad       	ldd	r22, Y+63	; 0x3f
    2ba0:	23 97       	sbiw	r28, 0x03	; 3
    2ba2:	49 2f       	mov	r20, r25
    2ba4:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
		_delay_ms(5);

	#elif LCD_MODE == MODE_4BIT

		for(u8 i = 20; i>12;i-=2)
    2ba8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2baa:	82 50       	subi	r24, 0x02	; 2
    2bac:	8a af       	std	Y+58, r24	; 0x3a
    2bae:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bb0:	8d 30       	cpi	r24, 0x0D	; 13
    2bb2:	08 f0       	brcs	.+2      	; 0x2bb6 <H_LCD_void_latchByte+0xd4>
    2bb4:	aa cf       	rjmp	.-172    	; 0x2b0a <H_LCD_void_latchByte+0x28>
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-6)/2)));
		}

		// Falling Edge
		// Set Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,HIGH);
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	62 e0       	ldi	r22, 0x02	; 2
    2bba:	41 e0       	ldi	r20, 0x01	; 1
    2bbc:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <DIO_voidSetPinValue>
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	a0 e8       	ldi	r26, 0x80	; 128
    2bc6:	bf e3       	ldi	r27, 0x3F	; 63
    2bc8:	8d ab       	std	Y+53, r24	; 0x35
    2bca:	9e ab       	std	Y+54, r25	; 0x36
    2bcc:	af ab       	std	Y+55, r26	; 0x37
    2bce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd0:	6d a9       	ldd	r22, Y+53	; 0x35
    2bd2:	7e a9       	ldd	r23, Y+54	; 0x36
    2bd4:	8f a9       	ldd	r24, Y+55	; 0x37
    2bd6:	98 ad       	ldd	r25, Y+56	; 0x38
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	4a e7       	ldi	r20, 0x7A	; 122
    2bde:	55 e4       	ldi	r21, 0x45	; 69
    2be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	89 ab       	std	Y+49, r24	; 0x31
    2bea:	9a ab       	std	Y+50, r25	; 0x32
    2bec:	ab ab       	std	Y+51, r26	; 0x33
    2bee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bf0:	69 a9       	ldd	r22, Y+49	; 0x31
    2bf2:	7a a9       	ldd	r23, Y+50	; 0x32
    2bf4:	8b a9       	ldd	r24, Y+51	; 0x33
    2bf6:	9c a9       	ldd	r25, Y+52	; 0x34
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e8       	ldi	r20, 0x80	; 128
    2bfe:	5f e3       	ldi	r21, 0x3F	; 63
    2c00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c04:	88 23       	and	r24, r24
    2c06:	2c f4       	brge	.+10     	; 0x2c12 <H_LCD_void_latchByte+0x130>
		__ticks = 1;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	98 ab       	std	Y+48, r25	; 0x30
    2c0e:	8f a7       	std	Y+47, r24	; 0x2f
    2c10:	3f c0       	rjmp	.+126    	; 0x2c90 <H_LCD_void_latchByte+0x1ae>
	else if (__tmp > 65535)
    2c12:	69 a9       	ldd	r22, Y+49	; 0x31
    2c14:	7a a9       	ldd	r23, Y+50	; 0x32
    2c16:	8b a9       	ldd	r24, Y+51	; 0x33
    2c18:	9c a9       	ldd	r25, Y+52	; 0x34
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	3f ef       	ldi	r19, 0xFF	; 255
    2c1e:	4f e7       	ldi	r20, 0x7F	; 127
    2c20:	57 e4       	ldi	r21, 0x47	; 71
    2c22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c26:	18 16       	cp	r1, r24
    2c28:	4c f5       	brge	.+82     	; 0x2c7c <H_LCD_void_latchByte+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2a:	6d a9       	ldd	r22, Y+53	; 0x35
    2c2c:	7e a9       	ldd	r23, Y+54	; 0x36
    2c2e:	8f a9       	ldd	r24, Y+55	; 0x37
    2c30:	98 ad       	ldd	r25, Y+56	; 0x38
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e2       	ldi	r20, 0x20	; 32
    2c38:	51 e4       	ldi	r21, 0x41	; 65
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	bc 01       	movw	r22, r24
    2c44:	cd 01       	movw	r24, r26
    2c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	98 ab       	std	Y+48, r25	; 0x30
    2c50:	8f a7       	std	Y+47, r24	; 0x2f
    2c52:	0f c0       	rjmp	.+30     	; 0x2c72 <H_LCD_void_latchByte+0x190>
    2c54:	80 e9       	ldi	r24, 0x90	; 144
    2c56:	91 e0       	ldi	r25, 0x01	; 1
    2c58:	9e a7       	std	Y+46, r25	; 0x2e
    2c5a:	8d a7       	std	Y+45, r24	; 0x2d
    2c5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	f1 f7       	brne	.-4      	; 0x2c60 <H_LCD_void_latchByte+0x17e>
    2c64:	9e a7       	std	Y+46, r25	; 0x2e
    2c66:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	98 ab       	std	Y+48, r25	; 0x30
    2c70:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c72:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c74:	98 a9       	ldd	r25, Y+48	; 0x30
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	69 f7       	brne	.-38     	; 0x2c54 <H_LCD_void_latchByte+0x172>
    2c7a:	14 c0       	rjmp	.+40     	; 0x2ca4 <H_LCD_void_latchByte+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c7e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c80:	8b a9       	ldd	r24, Y+51	; 0x33
    2c82:	9c a9       	ldd	r25, Y+52	; 0x34
    2c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	98 ab       	std	Y+48, r25	; 0x30
    2c8e:	8f a7       	std	Y+47, r24	; 0x2f
    2c90:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c92:	98 a9       	ldd	r25, Y+48	; 0x30
    2c94:	9c a7       	std	Y+44, r25	; 0x2c
    2c96:	8b a7       	std	Y+43, r24	; 0x2b
    2c98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <H_LCD_void_latchByte+0x1ba>
    2ca0:	9c a7       	std	Y+44, r25	; 0x2c
    2ca2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		// Reset Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	62 e0       	ldi	r22, 0x02	; 2
    2ca8:	40 e0       	ldi	r20, 0x00	; 0
    2caa:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <DIO_voidSetPinValue>
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	a0 ea       	ldi	r26, 0xA0	; 160
    2cb4:	b0 e4       	ldi	r27, 0x40	; 64
    2cb6:	8f a3       	std	Y+39, r24	; 0x27
    2cb8:	98 a7       	std	Y+40, r25	; 0x28
    2cba:	a9 a7       	std	Y+41, r26	; 0x29
    2cbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbe:	6f a1       	ldd	r22, Y+39	; 0x27
    2cc0:	78 a5       	ldd	r23, Y+40	; 0x28
    2cc2:	89 a5       	ldd	r24, Y+41	; 0x29
    2cc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	4a e7       	ldi	r20, 0x7A	; 122
    2ccc:	55 e4       	ldi	r21, 0x45	; 69
    2cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	8b a3       	std	Y+35, r24	; 0x23
    2cd8:	9c a3       	std	Y+36, r25	; 0x24
    2cda:	ad a3       	std	Y+37, r26	; 0x25
    2cdc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cde:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e8       	ldi	r20, 0x80	; 128
    2cec:	5f e3       	ldi	r21, 0x3F	; 63
    2cee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf2:	88 23       	and	r24, r24
    2cf4:	2c f4       	brge	.+10     	; 0x2d00 <H_LCD_void_latchByte+0x21e>
		__ticks = 1;
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	9a a3       	std	Y+34, r25	; 0x22
    2cfc:	89 a3       	std	Y+33, r24	; 0x21
    2cfe:	3f c0       	rjmp	.+126    	; 0x2d7e <H_LCD_void_latchByte+0x29c>
	else if (__tmp > 65535)
    2d00:	6b a1       	ldd	r22, Y+35	; 0x23
    2d02:	7c a1       	ldd	r23, Y+36	; 0x24
    2d04:	8d a1       	ldd	r24, Y+37	; 0x25
    2d06:	9e a1       	ldd	r25, Y+38	; 0x26
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	3f ef       	ldi	r19, 0xFF	; 255
    2d0c:	4f e7       	ldi	r20, 0x7F	; 127
    2d0e:	57 e4       	ldi	r21, 0x47	; 71
    2d10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d14:	18 16       	cp	r1, r24
    2d16:	4c f5       	brge	.+82     	; 0x2d6a <H_LCD_void_latchByte+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d18:	6f a1       	ldd	r22, Y+39	; 0x27
    2d1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e2       	ldi	r20, 0x20	; 32
    2d26:	51 e4       	ldi	r21, 0x41	; 65
    2d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	bc 01       	movw	r22, r24
    2d32:	cd 01       	movw	r24, r26
    2d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	9a a3       	std	Y+34, r25	; 0x22
    2d3e:	89 a3       	std	Y+33, r24	; 0x21
    2d40:	0f c0       	rjmp	.+30     	; 0x2d60 <H_LCD_void_latchByte+0x27e>
    2d42:	80 e9       	ldi	r24, 0x90	; 144
    2d44:	91 e0       	ldi	r25, 0x01	; 1
    2d46:	98 a3       	std	Y+32, r25	; 0x20
    2d48:	8f 8f       	std	Y+31, r24	; 0x1f
    2d4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d4c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d4e:	01 97       	sbiw	r24, 0x01	; 1
    2d50:	f1 f7       	brne	.-4      	; 0x2d4e <H_LCD_void_latchByte+0x26c>
    2d52:	98 a3       	std	Y+32, r25	; 0x20
    2d54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d56:	89 a1       	ldd	r24, Y+33	; 0x21
    2d58:	9a a1       	ldd	r25, Y+34	; 0x22
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	9a a3       	std	Y+34, r25	; 0x22
    2d5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d60:	89 a1       	ldd	r24, Y+33	; 0x21
    2d62:	9a a1       	ldd	r25, Y+34	; 0x22
    2d64:	00 97       	sbiw	r24, 0x00	; 0
    2d66:	69 f7       	brne	.-38     	; 0x2d42 <H_LCD_void_latchByte+0x260>
    2d68:	14 c0       	rjmp	.+40     	; 0x2d92 <H_LCD_void_latchByte+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d70:	9e a1       	ldd	r25, Y+38	; 0x26
    2d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	9a a3       	std	Y+34, r25	; 0x22
    2d7c:	89 a3       	std	Y+33, r24	; 0x21
    2d7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d80:	9a a1       	ldd	r25, Y+34	; 0x22
    2d82:	9e 8f       	std	Y+30, r25	; 0x1e
    2d84:	8d 8f       	std	Y+29, r24	; 0x1d
    2d86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <H_LCD_void_latchByte+0x2a8>
    2d8e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d90:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);


		for(u8 i = 20; i>12;i-=2)
    2d92:	84 e1       	ldi	r24, 0x14	; 20
    2d94:	89 af       	std	Y+57, r24	; 0x39
    2d96:	46 c0       	rjmp	.+140    	; 0x2e24 <H_LCD_void_latchByte+0x342>
		{
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-14)/2)));
    2d98:	89 ad       	ldd	r24, Y+57	; 0x39
    2d9a:	88 2f       	mov	r24, r24
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	fc 01       	movw	r30, r24
    2da0:	ef 53       	subi	r30, 0x3F	; 63
    2da2:	fe 4f       	sbci	r31, 0xFE	; 254
    2da4:	30 81       	ld	r19, Z
    2da6:	3f af       	std	Y+63, r19	; 0x3f
    2da8:	89 ad       	ldd	r24, Y+57	; 0x39
    2daa:	88 2f       	mov	r24, r24
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	fc 01       	movw	r30, r24
    2db2:	ef 53       	subi	r30, 0x3F	; 63
    2db4:	fe 4f       	sbci	r31, 0xFE	; 254
    2db6:	80 81       	ld	r24, Z
    2db8:	8e af       	std	Y+62, r24	; 0x3e
    2dba:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	3d af       	std	Y+61, r19	; 0x3d
    2dc2:	2c af       	std	Y+60, r18	; 0x3c
    2dc4:	89 ad       	ldd	r24, Y+57	; 0x39
    2dc6:	88 2f       	mov	r24, r24
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	0e 97       	sbiw	r24, 0x0e	; 14
    2dcc:	28 96       	adiw	r28, 0x08	; 8
    2dce:	9f af       	std	Y+63, r25	; 0x3f
    2dd0:	8e af       	std	Y+62, r24	; 0x3e
    2dd2:	28 97       	sbiw	r28, 0x08	; 8
    2dd4:	28 96       	adiw	r28, 0x08	; 8
    2dd6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dd8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dda:	28 97       	sbiw	r28, 0x08	; 8
    2ddc:	99 23       	and	r25, r25
    2dde:	54 f4       	brge	.+20     	; 0x2df4 <H_LCD_void_latchByte+0x312>
    2de0:	28 96       	adiw	r28, 0x08	; 8
    2de2:	2e ad       	ldd	r18, Y+62	; 0x3e
    2de4:	3f ad       	ldd	r19, Y+63	; 0x3f
    2de6:	28 97       	sbiw	r28, 0x08	; 8
    2de8:	2f 5f       	subi	r18, 0xFF	; 255
    2dea:	3f 4f       	sbci	r19, 0xFF	; 255
    2dec:	28 96       	adiw	r28, 0x08	; 8
    2dee:	3f af       	std	Y+63, r19	; 0x3f
    2df0:	2e af       	std	Y+62, r18	; 0x3e
    2df2:	28 97       	sbiw	r28, 0x08	; 8
    2df4:	28 96       	adiw	r28, 0x08	; 8
    2df6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2df8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dfa:	28 97       	sbiw	r28, 0x08	; 8
    2dfc:	95 95       	asr	r25
    2dfe:	87 95       	ror	r24
    2e00:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e02:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e04:	02 c0       	rjmp	.+4      	; 0x2e0a <H_LCD_void_latchByte+0x328>
    2e06:	35 95       	asr	r19
    2e08:	27 95       	ror	r18
    2e0a:	8a 95       	dec	r24
    2e0c:	e2 f7       	brpl	.-8      	; 0x2e06 <H_LCD_void_latchByte+0x324>
    2e0e:	c9 01       	movw	r24, r18
    2e10:	98 2f       	mov	r25, r24
    2e12:	91 70       	andi	r25, 0x01	; 1
    2e14:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e16:	6e ad       	ldd	r22, Y+62	; 0x3e
    2e18:	49 2f       	mov	r20, r25
    2e1a:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <DIO_voidSetPinValue>
		// Reset Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
		_delay_ms(5);


		for(u8 i = 20; i>12;i-=2)
    2e1e:	89 ad       	ldd	r24, Y+57	; 0x39
    2e20:	82 50       	subi	r24, 0x02	; 2
    2e22:	89 af       	std	Y+57, r24	; 0x39
    2e24:	89 ad       	ldd	r24, Y+57	; 0x39
    2e26:	8d 30       	cpi	r24, 0x0D	; 13
    2e28:	08 f0       	brcs	.+2      	; 0x2e2c <H_LCD_void_latchByte+0x34a>
    2e2a:	b6 cf       	rjmp	.-148    	; 0x2d98 <H_LCD_void_latchByte+0x2b6>
			DIO_voidSetPinValue(LCD_PORTS_PINS[i],LCD_PORTS_PINS[i+1],GET_BIT(copy_u8Byte,((i-14)/2)));
		}

		// Falling Edge
		// Set Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,HIGH);
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	62 e0       	ldi	r22, 0x02	; 2
    2e30:	41 e0       	ldi	r20, 0x01	; 1
    2e32:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <DIO_voidSetPinValue>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	a0 e8       	ldi	r26, 0x80	; 128
    2e3c:	bf e3       	ldi	r27, 0x3F	; 63
    2e3e:	89 8f       	std	Y+25, r24	; 0x19
    2e40:	9a 8f       	std	Y+26, r25	; 0x1a
    2e42:	ab 8f       	std	Y+27, r26	; 0x1b
    2e44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e46:	69 8d       	ldd	r22, Y+25	; 0x19
    2e48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	4a e7       	ldi	r20, 0x7A	; 122
    2e54:	55 e4       	ldi	r21, 0x45	; 69
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	8d 8b       	std	Y+21, r24	; 0x15
    2e60:	9e 8b       	std	Y+22, r25	; 0x16
    2e62:	af 8b       	std	Y+23, r26	; 0x17
    2e64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e66:	6d 89       	ldd	r22, Y+21	; 0x15
    2e68:	7e 89       	ldd	r23, Y+22	; 0x16
    2e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e8       	ldi	r20, 0x80	; 128
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e7a:	88 23       	and	r24, r24
    2e7c:	2c f4       	brge	.+10     	; 0x2e88 <H_LCD_void_latchByte+0x3a6>
		__ticks = 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9c 8b       	std	Y+20, r25	; 0x14
    2e84:	8b 8b       	std	Y+19, r24	; 0x13
    2e86:	3f c0       	rjmp	.+126    	; 0x2f06 <H_LCD_void_latchByte+0x424>
	else if (__tmp > 65535)
    2e88:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	3f ef       	ldi	r19, 0xFF	; 255
    2e94:	4f e7       	ldi	r20, 0x7F	; 127
    2e96:	57 e4       	ldi	r21, 0x47	; 71
    2e98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e9c:	18 16       	cp	r1, r24
    2e9e:	4c f5       	brge	.+82     	; 0x2ef2 <H_LCD_void_latchByte+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ea2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ea4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ea6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e2       	ldi	r20, 0x20	; 32
    2eae:	51 e4       	ldi	r21, 0x41	; 65
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	9c 8b       	std	Y+20, r25	; 0x14
    2ec6:	8b 8b       	std	Y+19, r24	; 0x13
    2ec8:	0f c0       	rjmp	.+30     	; 0x2ee8 <H_LCD_void_latchByte+0x406>
    2eca:	80 e9       	ldi	r24, 0x90	; 144
    2ecc:	91 e0       	ldi	r25, 0x01	; 1
    2ece:	9a 8b       	std	Y+18, r25	; 0x12
    2ed0:	89 8b       	std	Y+17, r24	; 0x11
    2ed2:	89 89       	ldd	r24, Y+17	; 0x11
    2ed4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <H_LCD_void_latchByte+0x3f4>
    2eda:	9a 8b       	std	Y+18, r25	; 0x12
    2edc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ede:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	9c 8b       	std	Y+20, r25	; 0x14
    2ee6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eea:	9c 89       	ldd	r25, Y+20	; 0x14
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	69 f7       	brne	.-38     	; 0x2eca <H_LCD_void_latchByte+0x3e8>
    2ef0:	14 c0       	rjmp	.+40     	; 0x2f1a <H_LCD_void_latchByte+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ef4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef8:	98 8d       	ldd	r25, Y+24	; 0x18
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9c 8b       	std	Y+20, r25	; 0x14
    2f04:	8b 8b       	std	Y+19, r24	; 0x13
    2f06:	8b 89       	ldd	r24, Y+19	; 0x13
    2f08:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0a:	98 8b       	std	Y+16, r25	; 0x10
    2f0c:	8f 87       	std	Y+15, r24	; 0x0f
    2f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f10:	98 89       	ldd	r25, Y+16	; 0x10
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <H_LCD_void_latchByte+0x430>
    2f16:	98 8b       	std	Y+16, r25	; 0x10
    2f18:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		// Reset Enable
		DIO_voidSetPinValue(LCD_EN_PORT_PIN,LOW);
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	62 e0       	ldi	r22, 0x02	; 2
    2f1e:	40 e0       	ldi	r20, 0x00	; 0
    2f20:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <DIO_voidSetPinValue>
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a0 ea       	ldi	r26, 0xA0	; 160
    2f2a:	b0 e4       	ldi	r27, 0x40	; 64
    2f2c:	8b 87       	std	Y+11, r24	; 0x0b
    2f2e:	9c 87       	std	Y+12, r25	; 0x0c
    2f30:	ad 87       	std	Y+13, r26	; 0x0d
    2f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	4a e7       	ldi	r20, 0x7A	; 122
    2f42:	55 e4       	ldi	r21, 0x45	; 69
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	8f 83       	std	Y+7, r24	; 0x07
    2f4e:	98 87       	std	Y+8, r25	; 0x08
    2f50:	a9 87       	std	Y+9, r26	; 0x09
    2f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f54:	6f 81       	ldd	r22, Y+7	; 0x07
    2f56:	78 85       	ldd	r23, Y+8	; 0x08
    2f58:	89 85       	ldd	r24, Y+9	; 0x09
    2f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e8       	ldi	r20, 0x80	; 128
    2f62:	5f e3       	ldi	r21, 0x3F	; 63
    2f64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f68:	88 23       	and	r24, r24
    2f6a:	2c f4       	brge	.+10     	; 0x2f76 <H_LCD_void_latchByte+0x494>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
    2f74:	3f c0       	rjmp	.+126    	; 0x2ff4 <H_LCD_void_latchByte+0x512>
	else if (__tmp > 65535)
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	3f ef       	ldi	r19, 0xFF	; 255
    2f82:	4f e7       	ldi	r20, 0x7F	; 127
    2f84:	57 e4       	ldi	r21, 0x47	; 71
    2f86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f8a:	18 16       	cp	r1, r24
    2f8c:	4c f5       	brge	.+82     	; 0x2fe0 <H_LCD_void_latchByte+0x4fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e2       	ldi	r20, 0x20	; 32
    2f9c:	51 e4       	ldi	r21, 0x41	; 65
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	9e 83       	std	Y+6, r25	; 0x06
    2fb4:	8d 83       	std	Y+5, r24	; 0x05
    2fb6:	0f c0       	rjmp	.+30     	; 0x2fd6 <H_LCD_void_latchByte+0x4f4>
    2fb8:	80 e9       	ldi	r24, 0x90	; 144
    2fba:	91 e0       	ldi	r25, 0x01	; 1
    2fbc:	9c 83       	std	Y+4, r25	; 0x04
    2fbe:	8b 83       	std	Y+3, r24	; 0x03
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <H_LCD_void_latchByte+0x4e2>
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	9e 83       	std	Y+6, r25	; 0x06
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	69 f7       	brne	.-38     	; 0x2fb8 <H_LCD_void_latchByte+0x4d6>
    2fde:	14 c0       	rjmp	.+40     	; 0x3008 <H_LCD_void_latchByte+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe2:	78 85       	ldd	r23, Y+8	; 0x08
    2fe4:	89 85       	ldd	r24, Y+9	; 0x09
    2fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff8:	9a 83       	std	Y+2, r25	; 0x02
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <H_LCD_void_latchByte+0x51e>
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);

	#endif

}	
    3008:	c9 5b       	subi	r28, 0xB9	; 185
    300a:	df 4f       	sbci	r29, 0xFF	; 255
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	08 95       	ret

0000301c <M_TIMER2_voidInit>:
u32 Global_u32Number_Of_Overflow = 0;
u8 Global_u8RemainingTime = 0;
TIMER2_GLOBAL_t TIM2_GLOBAL_FUN = TIMER2_NO_OPERATION ;
/*******************************************************************************/
void M_TIMER2_voidInit(void)
{
    301c:	df 93       	push	r29
    301e:	cf 93       	push	r28
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
	/******* Waveform Generation Mode ********/
	TIMER2->TCCR2 &= TIMER2_MODE_MASKING ;
    3024:	a2 e4       	ldi	r26, 0x42	; 66
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	e2 e4       	ldi	r30, 0x42	; 66
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	83 81       	ldd	r24, Z+3	; 0x03
    302e:	87 7b       	andi	r24, 0xB7	; 183
    3030:	13 96       	adiw	r26, 0x03	; 3
    3032:	8c 93       	st	X, r24
	TIMER2->TCCR2 |= (TIMER2_MODE << 3)  ;
    3034:	a2 e4       	ldi	r26, 0x42	; 66
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	e2 e4       	ldi	r30, 0x42	; 66
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	83 81       	ldd	r24, Z+3	; 0x03
    303e:	88 64       	ori	r24, 0x48	; 72
    3040:	13 96       	adiw	r26, 0x03	; 3
    3042:	8c 93       	st	X, r24
	
	
	/********* Compare Output Mode  **********/
	TIMER2->TCCR2 &= TIMER2_OC2_MASKING 				;
    3044:	a2 e4       	ldi	r26, 0x42	; 66
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	e2 e4       	ldi	r30, 0x42	; 66
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	83 81       	ldd	r24, Z+3	; 0x03
    304e:	8f 7c       	andi	r24, 0xCF	; 207
    3050:	13 96       	adiw	r26, 0x03	; 3
    3052:	8c 93       	st	X, r24
	TIMER2->TCCR2 |= (TIMER2_COMPARE_MATCH_MODE << 4)  	;
    3054:	a2 e4       	ldi	r26, 0x42	; 66
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	e2 e4       	ldi	r30, 0x42	; 66
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	83 81       	ldd	r24, Z+3	; 0x03
    305e:	80 62       	ori	r24, 0x20	; 32
    3060:	13 96       	adiw	r26, 0x03	; 3
    3062:	8c 93       	st	X, r24
    3064:	13 97       	sbiw	r26, 0x03	; 3

}
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	08 95       	ret

0000306c <M_TIMER2_voidStart>:
/*******************************************************************************/
void M_TIMER2_voidStart(void)
{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
	/************ Prescaler Options **********/
	TIMER2->TCCR2 &= TIMER2_PRESCALER_MASKING 			;
    3074:	a2 e4       	ldi	r26, 0x42	; 66
    3076:	b0 e0       	ldi	r27, 0x00	; 0
    3078:	e2 e4       	ldi	r30, 0x42	; 66
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	83 81       	ldd	r24, Z+3	; 0x03
    307e:	88 7f       	andi	r24, 0xF8	; 248
    3080:	13 96       	adiw	r26, 0x03	; 3
    3082:	8c 93       	st	X, r24
	TIMER2->TCCR2 |= TIMER2_PRESCALER  					;
    3084:	a2 e4       	ldi	r26, 0x42	; 66
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	e2 e4       	ldi	r30, 0x42	; 66
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	83 81       	ldd	r24, Z+3	; 0x03
    308e:	82 60       	ori	r24, 0x02	; 2
    3090:	13 96       	adiw	r26, 0x03	; 3
    3092:	8c 93       	st	X, r24
    3094:	13 97       	sbiw	r26, 0x03	; 3
}
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	08 95       	ret

0000309c <M_TIMER2_voidStop>:
/*******************************************************************************/
void M_TIMER2_voidStop(void)
{
    309c:	df 93       	push	r29
    309e:	cf 93       	push	r28
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
	TIMER2->TCCR2 &= TIMER2_PRESCALER_MASKING 			;
    30a4:	a2 e4       	ldi	r26, 0x42	; 66
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	e2 e4       	ldi	r30, 0x42	; 66
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	83 81       	ldd	r24, Z+3	; 0x03
    30ae:	88 7f       	andi	r24, 0xF8	; 248
    30b0:	13 96       	adiw	r26, 0x03	; 3
    30b2:	8c 93       	st	X, r24
	TIMER2->TCCR2 |= TIMER2_NO_CLK  					;
    30b4:	a2 e4       	ldi	r26, 0x42	; 66
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	e2 e4       	ldi	r30, 0x42	; 66
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	83 81       	ldd	r24, Z+3	; 0x03
    30be:	13 96       	adiw	r26, 0x03	; 3
    30c0:	8c 93       	st	X, r24
    30c2:	13 97       	sbiw	r26, 0x03	; 3
}
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	08 95       	ret

000030ca <M_TIMER2_voidSetBusyWait>:
/*******************************************************************************/
void M_TIMER2_voidSetBusyWait(u32 Copy_u32Time, TIMER2_TIME_t Copy_timeUnit)
{
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    30d2:	2f 97       	sbiw	r28, 0x0f	; 15
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	69 87       	std	Y+9, r22	; 0x09
    30e0:	7a 87       	std	Y+10, r23	; 0x0a
    30e2:	8b 87       	std	Y+11, r24	; 0x0b
    30e4:	9c 87       	std	Y+12, r25	; 0x0c
    30e6:	4d 87       	std	Y+13, r20	; 0x0d
	TIM2_GLOBAL_FUN = TIMER2_BUSY_WAIT_FUNCTION;
    30e8:	10 92 d7 01 	sts	0x01D7, r1
	M_TIMER2_voidInterrupt_Disable(TIMER2_OVERFLOW_INTERRUPT);
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <M_TIMER2_voidInterrupt_Disable>

	u32 Local_u32Load = 0;
    30f2:	1d 82       	std	Y+5, r1	; 0x05
    30f4:	1e 82       	std	Y+6, r1	; 0x06
    30f6:	1f 82       	std	Y+7, r1	; 0x07
    30f8:	18 86       	std	Y+8, r1	; 0x08
	u32 TIMER2_CLK = 0 ;
    30fa:	19 82       	std	Y+1, r1	; 0x01
    30fc:	1a 82       	std	Y+2, r1	; 0x02
    30fe:	1b 82       	std	Y+3, r1	; 0x03
    3100:	1c 82       	std	Y+4, r1	; 0x04
	#if TIMER2_PRESCALER   == TIMER2_NO_CLK
		TIMER2_CLK = 0 ;
	#elif TIMER2_PRESCALER == TIMER2_PRESCALER_1
		TIMER2_CLK = SYSTEM_CLOCK_SOURCE ;
	#elif TIMER2_PRESCALER == TIMER2_PRESCALER_8
		TIMER2_CLK = (SYSTEM_CLOCK_SOURCE/8) ;
    3102:	80 e8       	ldi	r24, 0x80	; 128
    3104:	94 e8       	ldi	r25, 0x84	; 132
    3106:	ae e1       	ldi	r26, 0x1E	; 30
    3108:	b0 e0       	ldi	r27, 0x00	; 0
    310a:	89 83       	std	Y+1, r24	; 0x01
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	ab 83       	std	Y+3, r26	; 0x03
    3110:	bc 83       	std	Y+4, r27	; 0x04
	#else
		#error (" Configuration error")
	#endif
	
		/* Calculate */
		switch(Copy_timeUnit)
    3112:	8d 85       	ldd	r24, Y+13	; 0x0d
    3114:	28 2f       	mov	r18, r24
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	3f 87       	std	Y+15, r19	; 0x0f
    311a:	2e 87       	std	Y+14, r18	; 0x0e
    311c:	8e 85       	ldd	r24, Y+14	; 0x0e
    311e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3120:	81 30       	cpi	r24, 0x01	; 1
    3122:	91 05       	cpc	r25, r1
    3124:	09 f4       	brne	.+2      	; 0x3128 <M_TIMER2_voidSetBusyWait+0x5e>
    3126:	4e c0       	rjmp	.+156    	; 0x31c4 <M_TIMER2_voidSetBusyWait+0xfa>
    3128:	2e 85       	ldd	r18, Y+14	; 0x0e
    312a:	3f 85       	ldd	r19, Y+15	; 0x0f
    312c:	22 30       	cpi	r18, 0x02	; 2
    312e:	31 05       	cpc	r19, r1
    3130:	09 f4       	brne	.+2      	; 0x3134 <M_TIMER2_voidSetBusyWait+0x6a>
    3132:	95 c0       	rjmp	.+298    	; 0x325e <M_TIMER2_voidSetBusyWait+0x194>
    3134:	8e 85       	ldd	r24, Y+14	; 0x0e
    3136:	9f 85       	ldd	r25, Y+15	; 0x0f
    3138:	00 97       	sbiw	r24, 0x00	; 0
    313a:	09 f0       	breq	.+2      	; 0x313e <M_TIMER2_voidSetBusyWait+0x74>
    313c:	dc c0       	rjmp	.+440    	; 0x32f6 <M_TIMER2_voidSetBusyWait+0x22c>
		{
			/*----------------------------------------------------------------------------------*/
			case TIME_S :
					Local_u32Load = Copy_u32Time * TIMER2_CLK ;
    313e:	89 85       	ldd	r24, Y+9	; 0x09
    3140:	9a 85       	ldd	r25, Y+10	; 0x0a
    3142:	ab 85       	ldd	r26, Y+11	; 0x0b
    3144:	bc 85       	ldd	r27, Y+12	; 0x0c
    3146:	29 81       	ldd	r18, Y+1	; 0x01
    3148:	3a 81       	ldd	r19, Y+2	; 0x02
    314a:	4b 81       	ldd	r20, Y+3	; 0x03
    314c:	5c 81       	ldd	r21, Y+4	; 0x04
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsi3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	8d 83       	std	Y+5, r24	; 0x05
    315c:	9e 83       	std	Y+6, r25	; 0x06
    315e:	af 83       	std	Y+7, r26	; 0x07
    3160:	b8 87       	std	Y+8, r27	; 0x08
					Global_u32Number_Of_Overflow = Local_u32Load / TIMER2_MAXIMUM_VALUE ;
    3162:	8d 81       	ldd	r24, Y+5	; 0x05
    3164:	9e 81       	ldd	r25, Y+6	; 0x06
    3166:	af 81       	ldd	r26, Y+7	; 0x07
    3168:	b8 85       	ldd	r27, Y+8	; 0x08
    316a:	2f ef       	ldi	r18, 0xFF	; 255
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e0       	ldi	r20, 0x00	; 0
    3170:	50 e0       	ldi	r21, 0x00	; 0
    3172:	bc 01       	movw	r22, r24
    3174:	cd 01       	movw	r24, r26
    3176:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    317a:	da 01       	movw	r26, r20
    317c:	c9 01       	movw	r24, r18
    317e:	80 93 1c 02 	sts	0x021C, r24
    3182:	90 93 1d 02 	sts	0x021D, r25
    3186:	a0 93 1e 02 	sts	0x021E, r26
    318a:	b0 93 1f 02 	sts	0x021F, r27
					Global_u8RemainingTime       = Local_u32Load % TIMER2_MAXIMUM_VALUE ;
    318e:	8d 81       	ldd	r24, Y+5	; 0x05
    3190:	9e 81       	ldd	r25, Y+6	; 0x06
    3192:	af 81       	ldd	r26, Y+7	; 0x07
    3194:	b8 85       	ldd	r27, Y+8	; 0x08
    3196:	2f ef       	ldi	r18, 0xFF	; 255
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	50 e0       	ldi	r21, 0x00	; 0
    319e:	bc 01       	movw	r22, r24
    31a0:	cd 01       	movw	r24, r26
    31a2:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	80 93 20 02 	sts	0x0220, r24
					Global_u8RemainingTime       = (TIMER2_MAXIMUM_VALUE - Global_u8RemainingTime);
    31ae:	80 91 20 02 	lds	r24, 0x0220
    31b2:	80 95       	com	r24
    31b4:	80 93 20 02 	sts	0x0220, r24
					TIMER2->TCNT2 = Global_u8RemainingTime ;
    31b8:	e2 e4       	ldi	r30, 0x42	; 66
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	80 91 20 02 	lds	r24, 0x0220
    31c0:	82 83       	std	Z+2, r24	; 0x02
    31c2:	99 c0       	rjmp	.+306    	; 0x32f6 <M_TIMER2_voidSetBusyWait+0x22c>
	 				break;
			/*----------------------------------------------------------------------------------*/
			case TIME_MS :
					Local_u32Load = Copy_u32Time * (TIMER2_CLK / 1000) ;
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	ab 81       	ldd	r26, Y+3	; 0x03
    31ca:	bc 81       	ldd	r27, Y+4	; 0x04
    31cc:	28 ee       	ldi	r18, 0xE8	; 232
    31ce:	33 e0       	ldi	r19, 0x03	; 3
    31d0:	40 e0       	ldi	r20, 0x00	; 0
    31d2:	50 e0       	ldi	r21, 0x00	; 0
    31d4:	bc 01       	movw	r22, r24
    31d6:	cd 01       	movw	r24, r26
    31d8:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    31dc:	da 01       	movw	r26, r20
    31de:	c9 01       	movw	r24, r18
    31e0:	29 85       	ldd	r18, Y+9	; 0x09
    31e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    31e4:	4b 85       	ldd	r20, Y+11	; 0x0b
    31e6:	5c 85       	ldd	r21, Y+12	; 0x0c
    31e8:	bc 01       	movw	r22, r24
    31ea:	cd 01       	movw	r24, r26
    31ec:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsi3>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	8d 83       	std	Y+5, r24	; 0x05
    31f6:	9e 83       	std	Y+6, r25	; 0x06
    31f8:	af 83       	std	Y+7, r26	; 0x07
    31fa:	b8 87       	std	Y+8, r27	; 0x08
					Global_u32Number_Of_Overflow = Local_u32Load / TIMER2_MAXIMUM_VALUE ;
    31fc:	8d 81       	ldd	r24, Y+5	; 0x05
    31fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3200:	af 81       	ldd	r26, Y+7	; 0x07
    3202:	b8 85       	ldd	r27, Y+8	; 0x08
    3204:	2f ef       	ldi	r18, 0xFF	; 255
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e0       	ldi	r20, 0x00	; 0
    320a:	50 e0       	ldi	r21, 0x00	; 0
    320c:	bc 01       	movw	r22, r24
    320e:	cd 01       	movw	r24, r26
    3210:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    3214:	da 01       	movw	r26, r20
    3216:	c9 01       	movw	r24, r18
    3218:	80 93 1c 02 	sts	0x021C, r24
    321c:	90 93 1d 02 	sts	0x021D, r25
    3220:	a0 93 1e 02 	sts	0x021E, r26
    3224:	b0 93 1f 02 	sts	0x021F, r27
					Global_u8RemainingTime       = Local_u32Load % TIMER2_MAXIMUM_VALUE ;
    3228:	8d 81       	ldd	r24, Y+5	; 0x05
    322a:	9e 81       	ldd	r25, Y+6	; 0x06
    322c:	af 81       	ldd	r26, Y+7	; 0x07
    322e:	b8 85       	ldd	r27, Y+8	; 0x08
    3230:	2f ef       	ldi	r18, 0xFF	; 255
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	40 e0       	ldi	r20, 0x00	; 0
    3236:	50 e0       	ldi	r21, 0x00	; 0
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	80 93 20 02 	sts	0x0220, r24
					Global_u8RemainingTime       = (TIMER2_MAXIMUM_VALUE - Global_u8RemainingTime);
    3248:	80 91 20 02 	lds	r24, 0x0220
    324c:	80 95       	com	r24
    324e:	80 93 20 02 	sts	0x0220, r24
					TIMER2->TCNT2 = Global_u8RemainingTime ;
    3252:	e2 e4       	ldi	r30, 0x42	; 66
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 91 20 02 	lds	r24, 0x0220
    325a:	82 83       	std	Z+2, r24	; 0x02
    325c:	4c c0       	rjmp	.+152    	; 0x32f6 <M_TIMER2_voidSetBusyWait+0x22c>
	 				break;
			/*----------------------------------------------------------------------------------*/
			case TIME_US :
					/* Calculate Numbers of Ticks */
					Local_u32Load = Copy_u32Time * (TIMER2_CLK / 1000000) ;
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	9a 81       	ldd	r25, Y+2	; 0x02
    3262:	ab 81       	ldd	r26, Y+3	; 0x03
    3264:	bc 81       	ldd	r27, Y+4	; 0x04
    3266:	20 e4       	ldi	r18, 0x40	; 64
    3268:	32 e4       	ldi	r19, 0x42	; 66
    326a:	4f e0       	ldi	r20, 0x0F	; 15
    326c:	50 e0       	ldi	r21, 0x00	; 0
    326e:	bc 01       	movw	r22, r24
    3270:	cd 01       	movw	r24, r26
    3272:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    3276:	da 01       	movw	r26, r20
    3278:	c9 01       	movw	r24, r18
    327a:	29 85       	ldd	r18, Y+9	; 0x09
    327c:	3a 85       	ldd	r19, Y+10	; 0x0a
    327e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3280:	5c 85       	ldd	r21, Y+12	; 0x0c
    3282:	bc 01       	movw	r22, r24
    3284:	cd 01       	movw	r24, r26
    3286:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsi3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	8d 83       	std	Y+5, r24	; 0x05
    3290:	9e 83       	std	Y+6, r25	; 0x06
    3292:	af 83       	std	Y+7, r26	; 0x07
    3294:	b8 87       	std	Y+8, r27	; 0x08
					Global_u32Number_Of_Overflow = Local_u32Load / TIMER2_MAXIMUM_VALUE ;
    3296:	8d 81       	ldd	r24, Y+5	; 0x05
    3298:	9e 81       	ldd	r25, Y+6	; 0x06
    329a:	af 81       	ldd	r26, Y+7	; 0x07
    329c:	b8 85       	ldd	r27, Y+8	; 0x08
    329e:	2f ef       	ldi	r18, 0xFF	; 255
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e0       	ldi	r20, 0x00	; 0
    32a4:	50 e0       	ldi	r21, 0x00	; 0
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    32ae:	da 01       	movw	r26, r20
    32b0:	c9 01       	movw	r24, r18
    32b2:	80 93 1c 02 	sts	0x021C, r24
    32b6:	90 93 1d 02 	sts	0x021D, r25
    32ba:	a0 93 1e 02 	sts	0x021E, r26
    32be:	b0 93 1f 02 	sts	0x021F, r27
					Global_u8RemainingTime       = Local_u32Load % TIMER2_MAXIMUM_VALUE ;
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	9e 81       	ldd	r25, Y+6	; 0x06
    32c6:	af 81       	ldd	r26, Y+7	; 0x07
    32c8:	b8 85       	ldd	r27, Y+8	; 0x08
    32ca:	2f ef       	ldi	r18, 0xFF	; 255
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e0       	ldi	r20, 0x00	; 0
    32d0:	50 e0       	ldi	r21, 0x00	; 0
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	80 93 20 02 	sts	0x0220, r24
					Global_u8RemainingTime       = (TIMER2_MAXIMUM_VALUE - Global_u8RemainingTime);
    32e2:	80 91 20 02 	lds	r24, 0x0220
    32e6:	80 95       	com	r24
    32e8:	80 93 20 02 	sts	0x0220, r24
					TIMER2->TCNT2 = Global_u8RemainingTime ;
    32ec:	e2 e4       	ldi	r30, 0x42	; 66
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 91 20 02 	lds	r24, 0x0220
    32f4:	82 83       	std	Z+2, r24	; 0x02
					break;
			/*----------------------------------------------------------------------------------*/
		}
	
	/* Start Timer */
	M_TIMER2_voidStart();
    32f6:	0e 94 36 18 	call	0x306c	; 0x306c <M_TIMER2_voidStart>
	
	/* Enable Interrupt */
	M_TIMER2_voidInterrupt_Enable(TIMER2_OVERFLOW_INTERRUPT);
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	0e 94 ba 1a 	call	0x3574	; 0x3574 <M_TIMER2_voidInterrupt_Enable>

	while(TIM2_GLOBAL_FUN == TIMER2_BUSY_WAIT_FUNCTION);
    3300:	80 91 d7 01 	lds	r24, 0x01D7
    3304:	88 23       	and	r24, r24
    3306:	e1 f3       	breq	.-8      	; 0x3300 <M_TIMER2_voidSetBusyWait+0x236>

}
    3308:	2f 96       	adiw	r28, 0x0f	; 15
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <M_TIMER2_voidSetPeriodic>:
/*******************************************************************************/
void M_TIMER2_voidSetPeriodic(u32 Copy_u32Time, TIMER2_TIME_t Copy_timeUnit, void (*func)(void))
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	61 97       	sbiw	r28, 0x11	; 17
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	69 87       	std	Y+9, r22	; 0x09
    3330:	7a 87       	std	Y+10, r23	; 0x0a
    3332:	8b 87       	std	Y+11, r24	; 0x0b
    3334:	9c 87       	std	Y+12, r25	; 0x0c
    3336:	4d 87       	std	Y+13, r20	; 0x0d
    3338:	3f 87       	std	Y+15, r19	; 0x0f
    333a:	2e 87       	std	Y+14, r18	; 0x0e
	TIM2_GLOBAL_FUN = TIMER2_PERIODIC_INTERRUPT_FUNCTION;
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	80 93 d7 01 	sts	0x01D7, r24

	M_TIMER2_voidInterrupt_Disable(TIMER2_OVERFLOW_INTERRUPT);
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <M_TIMER2_voidInterrupt_Disable>
	
	u32 Local_u32Load = 0;
    3348:	1d 82       	std	Y+5, r1	; 0x05
    334a:	1e 82       	std	Y+6, r1	; 0x06
    334c:	1f 82       	std	Y+7, r1	; 0x07
    334e:	18 86       	std	Y+8, r1	; 0x08
	u32 TIMER2_CLK = 0 ;
    3350:	19 82       	std	Y+1, r1	; 0x01
    3352:	1a 82       	std	Y+2, r1	; 0x02
    3354:	1b 82       	std	Y+3, r1	; 0x03
    3356:	1c 82       	std	Y+4, r1	; 0x04
	#if TIMER2_PRESCALER   == TIMER2_NO_CLK
		TIMER2_CLK = 0 ;
	#elif TIMER2_PRESCALER == TIMER2_PRESCALER_1
		TIMER2_CLK = SYSTEM_CLOCK_SOURCE ;
	#elif TIMER2_PRESCALER == TIMER2_PRESCALER_8
		TIMER2_CLK = (SYSTEM_CLOCK_SOURCE/8) ;
    3358:	80 e8       	ldi	r24, 0x80	; 128
    335a:	94 e8       	ldi	r25, 0x84	; 132
    335c:	ae e1       	ldi	r26, 0x1E	; 30
    335e:	b0 e0       	ldi	r27, 0x00	; 0
    3360:	89 83       	std	Y+1, r24	; 0x01
    3362:	9a 83       	std	Y+2, r25	; 0x02
    3364:	ab 83       	std	Y+3, r26	; 0x03
    3366:	bc 83       	std	Y+4, r27	; 0x04
	#else
		#error (" Configuration error")
	#endif
	
		/* Calculate */
		switch(Copy_timeUnit)
    3368:	8d 85       	ldd	r24, Y+13	; 0x0d
    336a:	28 2f       	mov	r18, r24
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	39 8b       	std	Y+17, r19	; 0x11
    3370:	28 8b       	std	Y+16, r18	; 0x10
    3372:	88 89       	ldd	r24, Y+16	; 0x10
    3374:	99 89       	ldd	r25, Y+17	; 0x11
    3376:	81 30       	cpi	r24, 0x01	; 1
    3378:	91 05       	cpc	r25, r1
    337a:	09 f4       	brne	.+2      	; 0x337e <M_TIMER2_voidSetPeriodic+0x64>
    337c:	4e c0       	rjmp	.+156    	; 0x341a <M_TIMER2_voidSetPeriodic+0x100>
    337e:	28 89       	ldd	r18, Y+16	; 0x10
    3380:	39 89       	ldd	r19, Y+17	; 0x11
    3382:	22 30       	cpi	r18, 0x02	; 2
    3384:	31 05       	cpc	r19, r1
    3386:	09 f4       	brne	.+2      	; 0x338a <M_TIMER2_voidSetPeriodic+0x70>
    3388:	95 c0       	rjmp	.+298    	; 0x34b4 <M_TIMER2_voidSetPeriodic+0x19a>
    338a:	88 89       	ldd	r24, Y+16	; 0x10
    338c:	99 89       	ldd	r25, Y+17	; 0x11
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	09 f0       	breq	.+2      	; 0x3394 <M_TIMER2_voidSetPeriodic+0x7a>
    3392:	dc c0       	rjmp	.+440    	; 0x354c <M_TIMER2_voidSetPeriodic+0x232>
		{
			/*----------------------------------------------------------------------------------*/
			case TIME_S :
					Local_u32Load = Copy_u32Time * TIMER2_CLK ;
    3394:	89 85       	ldd	r24, Y+9	; 0x09
    3396:	9a 85       	ldd	r25, Y+10	; 0x0a
    3398:	ab 85       	ldd	r26, Y+11	; 0x0b
    339a:	bc 85       	ldd	r27, Y+12	; 0x0c
    339c:	29 81       	ldd	r18, Y+1	; 0x01
    339e:	3a 81       	ldd	r19, Y+2	; 0x02
    33a0:	4b 81       	ldd	r20, Y+3	; 0x03
    33a2:	5c 81       	ldd	r21, Y+4	; 0x04
    33a4:	bc 01       	movw	r22, r24
    33a6:	cd 01       	movw	r24, r26
    33a8:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsi3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	8d 83       	std	Y+5, r24	; 0x05
    33b2:	9e 83       	std	Y+6, r25	; 0x06
    33b4:	af 83       	std	Y+7, r26	; 0x07
    33b6:	b8 87       	std	Y+8, r27	; 0x08
					Global_u32Number_Of_Overflow = Local_u32Load / TIMER2_MAXIMUM_VALUE ;
    33b8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ba:	9e 81       	ldd	r25, Y+6	; 0x06
    33bc:	af 81       	ldd	r26, Y+7	; 0x07
    33be:	b8 85       	ldd	r27, Y+8	; 0x08
    33c0:	2f ef       	ldi	r18, 0xFF	; 255
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	40 e0       	ldi	r20, 0x00	; 0
    33c6:	50 e0       	ldi	r21, 0x00	; 0
    33c8:	bc 01       	movw	r22, r24
    33ca:	cd 01       	movw	r24, r26
    33cc:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    33d0:	da 01       	movw	r26, r20
    33d2:	c9 01       	movw	r24, r18
    33d4:	80 93 1c 02 	sts	0x021C, r24
    33d8:	90 93 1d 02 	sts	0x021D, r25
    33dc:	a0 93 1e 02 	sts	0x021E, r26
    33e0:	b0 93 1f 02 	sts	0x021F, r27
					Global_u8RemainingTime       = Local_u32Load % TIMER2_MAXIMUM_VALUE ;
    33e4:	8d 81       	ldd	r24, Y+5	; 0x05
    33e6:	9e 81       	ldd	r25, Y+6	; 0x06
    33e8:	af 81       	ldd	r26, Y+7	; 0x07
    33ea:	b8 85       	ldd	r27, Y+8	; 0x08
    33ec:	2f ef       	ldi	r18, 0xFF	; 255
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e0       	ldi	r20, 0x00	; 0
    33f2:	50 e0       	ldi	r21, 0x00	; 0
    33f4:	bc 01       	movw	r22, r24
    33f6:	cd 01       	movw	r24, r26
    33f8:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	80 93 20 02 	sts	0x0220, r24
					Global_u8RemainingTime       = (TIMER2_MAXIMUM_VALUE - Global_u8RemainingTime);
    3404:	80 91 20 02 	lds	r24, 0x0220
    3408:	80 95       	com	r24
    340a:	80 93 20 02 	sts	0x0220, r24
					TIMER2->TCNT2 = Global_u8RemainingTime ;
    340e:	e2 e4       	ldi	r30, 0x42	; 66
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	80 91 20 02 	lds	r24, 0x0220
    3416:	82 83       	std	Z+2, r24	; 0x02
    3418:	99 c0       	rjmp	.+306    	; 0x354c <M_TIMER2_voidSetPeriodic+0x232>
	 				break;
			/*----------------------------------------------------------------------------------*/
			case TIME_MS :
					Local_u32Load = Copy_u32Time * (TIMER2_CLK / 1000) ;
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	9a 81       	ldd	r25, Y+2	; 0x02
    341e:	ab 81       	ldd	r26, Y+3	; 0x03
    3420:	bc 81       	ldd	r27, Y+4	; 0x04
    3422:	28 ee       	ldi	r18, 0xE8	; 232
    3424:	33 e0       	ldi	r19, 0x03	; 3
    3426:	40 e0       	ldi	r20, 0x00	; 0
    3428:	50 e0       	ldi	r21, 0x00	; 0
    342a:	bc 01       	movw	r22, r24
    342c:	cd 01       	movw	r24, r26
    342e:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    3432:	da 01       	movw	r26, r20
    3434:	c9 01       	movw	r24, r18
    3436:	29 85       	ldd	r18, Y+9	; 0x09
    3438:	3a 85       	ldd	r19, Y+10	; 0x0a
    343a:	4b 85       	ldd	r20, Y+11	; 0x0b
    343c:	5c 85       	ldd	r21, Y+12	; 0x0c
    343e:	bc 01       	movw	r22, r24
    3440:	cd 01       	movw	r24, r26
    3442:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsi3>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	8d 83       	std	Y+5, r24	; 0x05
    344c:	9e 83       	std	Y+6, r25	; 0x06
    344e:	af 83       	std	Y+7, r26	; 0x07
    3450:	b8 87       	std	Y+8, r27	; 0x08
					Global_u32Number_Of_Overflow = Local_u32Load / TIMER2_MAXIMUM_VALUE ;
    3452:	8d 81       	ldd	r24, Y+5	; 0x05
    3454:	9e 81       	ldd	r25, Y+6	; 0x06
    3456:	af 81       	ldd	r26, Y+7	; 0x07
    3458:	b8 85       	ldd	r27, Y+8	; 0x08
    345a:	2f ef       	ldi	r18, 0xFF	; 255
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	40 e0       	ldi	r20, 0x00	; 0
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	bc 01       	movw	r22, r24
    3464:	cd 01       	movw	r24, r26
    3466:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    346a:	da 01       	movw	r26, r20
    346c:	c9 01       	movw	r24, r18
    346e:	80 93 1c 02 	sts	0x021C, r24
    3472:	90 93 1d 02 	sts	0x021D, r25
    3476:	a0 93 1e 02 	sts	0x021E, r26
    347a:	b0 93 1f 02 	sts	0x021F, r27
					Global_u8RemainingTime       = Local_u32Load % TIMER2_MAXIMUM_VALUE ;
    347e:	8d 81       	ldd	r24, Y+5	; 0x05
    3480:	9e 81       	ldd	r25, Y+6	; 0x06
    3482:	af 81       	ldd	r26, Y+7	; 0x07
    3484:	b8 85       	ldd	r27, Y+8	; 0x08
    3486:	2f ef       	ldi	r18, 0xFF	; 255
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e0       	ldi	r20, 0x00	; 0
    348c:	50 e0       	ldi	r21, 0x00	; 0
    348e:	bc 01       	movw	r22, r24
    3490:	cd 01       	movw	r24, r26
    3492:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	80 93 20 02 	sts	0x0220, r24
					Global_u8RemainingTime       = (TIMER2_MAXIMUM_VALUE - Global_u8RemainingTime);
    349e:	80 91 20 02 	lds	r24, 0x0220
    34a2:	80 95       	com	r24
    34a4:	80 93 20 02 	sts	0x0220, r24
					TIMER2->TCNT2 = Global_u8RemainingTime ;
    34a8:	e2 e4       	ldi	r30, 0x42	; 66
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 91 20 02 	lds	r24, 0x0220
    34b0:	82 83       	std	Z+2, r24	; 0x02
    34b2:	4c c0       	rjmp	.+152    	; 0x354c <M_TIMER2_voidSetPeriodic+0x232>
	 				break;
			/*----------------------------------------------------------------------------------*/
			case TIME_US :
					/* Calculate Numbers of Ticks */
					Local_u32Load = Copy_u32Time * (TIMER2_CLK / 1000000) ;
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	9a 81       	ldd	r25, Y+2	; 0x02
    34b8:	ab 81       	ldd	r26, Y+3	; 0x03
    34ba:	bc 81       	ldd	r27, Y+4	; 0x04
    34bc:	20 e4       	ldi	r18, 0x40	; 64
    34be:	32 e4       	ldi	r19, 0x42	; 66
    34c0:	4f e0       	ldi	r20, 0x0F	; 15
    34c2:	50 e0       	ldi	r21, 0x00	; 0
    34c4:	bc 01       	movw	r22, r24
    34c6:	cd 01       	movw	r24, r26
    34c8:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    34cc:	da 01       	movw	r26, r20
    34ce:	c9 01       	movw	r24, r18
    34d0:	29 85       	ldd	r18, Y+9	; 0x09
    34d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    34d4:	4b 85       	ldd	r20, Y+11	; 0x0b
    34d6:	5c 85       	ldd	r21, Y+12	; 0x0c
    34d8:	bc 01       	movw	r22, r24
    34da:	cd 01       	movw	r24, r26
    34dc:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__mulsi3>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	8d 83       	std	Y+5, r24	; 0x05
    34e6:	9e 83       	std	Y+6, r25	; 0x06
    34e8:	af 83       	std	Y+7, r26	; 0x07
    34ea:	b8 87       	std	Y+8, r27	; 0x08
					Global_u32Number_Of_Overflow = Local_u32Load / TIMER2_MAXIMUM_VALUE ;
    34ec:	8d 81       	ldd	r24, Y+5	; 0x05
    34ee:	9e 81       	ldd	r25, Y+6	; 0x06
    34f0:	af 81       	ldd	r26, Y+7	; 0x07
    34f2:	b8 85       	ldd	r27, Y+8	; 0x08
    34f4:	2f ef       	ldi	r18, 0xFF	; 255
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e0       	ldi	r20, 0x00	; 0
    34fa:	50 e0       	ldi	r21, 0x00	; 0
    34fc:	bc 01       	movw	r22, r24
    34fe:	cd 01       	movw	r24, r26
    3500:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    3504:	da 01       	movw	r26, r20
    3506:	c9 01       	movw	r24, r18
    3508:	80 93 1c 02 	sts	0x021C, r24
    350c:	90 93 1d 02 	sts	0x021D, r25
    3510:	a0 93 1e 02 	sts	0x021E, r26
    3514:	b0 93 1f 02 	sts	0x021F, r27
					Global_u8RemainingTime       = Local_u32Load % TIMER2_MAXIMUM_VALUE ;
    3518:	8d 81       	ldd	r24, Y+5	; 0x05
    351a:	9e 81       	ldd	r25, Y+6	; 0x06
    351c:	af 81       	ldd	r26, Y+7	; 0x07
    351e:	b8 85       	ldd	r27, Y+8	; 0x08
    3520:	2f ef       	ldi	r18, 0xFF	; 255
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	40 e0       	ldi	r20, 0x00	; 0
    3526:	50 e0       	ldi	r21, 0x00	; 0
    3528:	bc 01       	movw	r22, r24
    352a:	cd 01       	movw	r24, r26
    352c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	80 93 20 02 	sts	0x0220, r24
					Global_u8RemainingTime       = (TIMER2_MAXIMUM_VALUE - Global_u8RemainingTime);
    3538:	80 91 20 02 	lds	r24, 0x0220
    353c:	80 95       	com	r24
    353e:	80 93 20 02 	sts	0x0220, r24
					TIMER2->TCNT2 = Global_u8RemainingTime ;
    3542:	e2 e4       	ldi	r30, 0x42	; 66
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	80 91 20 02 	lds	r24, 0x0220
    354a:	82 83       	std	Z+2, r24	; 0x02
			/*----------------------------------------------------------------------------------*/
		}
	
	
	/* Set call back function */
	TIMER2_CallBack[0] = func ;
    354c:	8e 85       	ldd	r24, Y+14	; 0x0e
    354e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3550:	90 93 2a 02 	sts	0x022A, r25
    3554:	80 93 29 02 	sts	0x0229, r24
	
	/* Start Timer */
	M_TIMER2_voidStart();
    3558:	0e 94 36 18 	call	0x306c	; 0x306c <M_TIMER2_voidStart>
	
	/* Enable Interrupt */
	M_TIMER2_voidInterrupt_Enable(TIMER2_OVERFLOW_INTERRUPT);
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	0e 94 ba 1a 	call	0x3574	; 0x3574 <M_TIMER2_voidInterrupt_Enable>

}
    3562:	61 96       	adiw	r28, 0x11	; 17
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	cd bf       	out	0x3d, r28	; 61
    356e:	cf 91       	pop	r28
    3570:	df 91       	pop	r29
    3572:	08 95       	ret

00003574 <M_TIMER2_voidInterrupt_Enable>:
/*******************************************************************************/
void M_TIMER2_voidInterrupt_Enable(TIMER2_INT_t Copy_Interrupt_ID)
{
    3574:	df 93       	push	r29
    3576:	cf 93       	push	r28
    3578:	0f 92       	push	r0
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
    357e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Interrupt_ID == TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT)
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	88 23       	and	r24, r24
    3584:	51 f4       	brne	.+20     	; 0x359a <M_TIMER2_voidInterrupt_Enable+0x26>
	{
		SET_BIT( TIMER2->TIMSK , 7);
    3586:	a2 e4       	ldi	r26, 0x42	; 66
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	e2 e4       	ldi	r30, 0x42	; 66
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	87 89       	ldd	r24, Z+23	; 0x17
    3590:	80 68       	ori	r24, 0x80	; 128
    3592:	57 96       	adiw	r26, 0x17	; 23
    3594:	8c 93       	st	X, r24
    3596:	57 97       	sbiw	r26, 0x17	; 23
    3598:	0c c0       	rjmp	.+24     	; 0x35b2 <M_TIMER2_voidInterrupt_Enable+0x3e>

	}
	else if(Copy_Interrupt_ID == TIMER2_OVERFLOW_INTERRUPT)
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	81 30       	cpi	r24, 0x01	; 1
    359e:	49 f4       	brne	.+18     	; 0x35b2 <M_TIMER2_voidInterrupt_Enable+0x3e>
	{
		SET_BIT( TIMER2->TIMSK , 6);
    35a0:	a2 e4       	ldi	r26, 0x42	; 66
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e2 e4       	ldi	r30, 0x42	; 66
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	87 89       	ldd	r24, Z+23	; 0x17
    35aa:	80 64       	ori	r24, 0x40	; 64
    35ac:	57 96       	adiw	r26, 0x17	; 23
    35ae:	8c 93       	st	X, r24
    35b0:	57 97       	sbiw	r26, 0x17	; 23
	}
}
    35b2:	0f 90       	pop	r0
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	08 95       	ret

000035ba <M_TIMER2_voidInterrupt_Disable>:
/*******************************************************************************/
void M_TIMER2_voidInterrupt_Disable(TIMER2_INT_t Copy_Interrupt_ID)
{
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	0f 92       	push	r0
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62
    35c4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Interrupt_ID == TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT)
    35c6:	89 81       	ldd	r24, Y+1	; 0x01
    35c8:	88 23       	and	r24, r24
    35ca:	51 f4       	brne	.+20     	; 0x35e0 <M_TIMER2_voidInterrupt_Disable+0x26>
	{
		CLR_BIT( TIMER2->TIMSK , 7);
    35cc:	a2 e4       	ldi	r26, 0x42	; 66
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	e2 e4       	ldi	r30, 0x42	; 66
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	87 89       	ldd	r24, Z+23	; 0x17
    35d6:	8f 77       	andi	r24, 0x7F	; 127
    35d8:	57 96       	adiw	r26, 0x17	; 23
    35da:	8c 93       	st	X, r24
    35dc:	57 97       	sbiw	r26, 0x17	; 23
    35de:	0c c0       	rjmp	.+24     	; 0x35f8 <M_TIMER2_voidInterrupt_Disable+0x3e>

	}
	else if(Copy_Interrupt_ID == TIMER2_OVERFLOW_INTERRUPT)
    35e0:	89 81       	ldd	r24, Y+1	; 0x01
    35e2:	81 30       	cpi	r24, 0x01	; 1
    35e4:	49 f4       	brne	.+18     	; 0x35f8 <M_TIMER2_voidInterrupt_Disable+0x3e>
	{
		CLR_BIT( TIMER2->TIMSK , 6);
    35e6:	a2 e4       	ldi	r26, 0x42	; 66
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	e2 e4       	ldi	r30, 0x42	; 66
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	87 89       	ldd	r24, Z+23	; 0x17
    35f0:	8f 7b       	andi	r24, 0xBF	; 191
    35f2:	57 96       	adiw	r26, 0x17	; 23
    35f4:	8c 93       	st	X, r24
    35f6:	57 97       	sbiw	r26, 0x17	; 23
	}
}
    35f8:	0f 90       	pop	r0
    35fa:	cf 91       	pop	r28
    35fc:	df 91       	pop	r29
    35fe:	08 95       	ret

00003600 <M_TIMER2_voidSetFastPWM>:
/*******************************************************************************/

void M_TIMER2_voidSetFastPWM(u8 Copy_u8DutyCycle)
{
    3600:	df 93       	push	r29
    3602:	cf 93       	push	r28
    3604:	00 d0       	rcall	.+0      	; 0x3606 <M_TIMER2_voidSetFastPWM+0x6>
    3606:	cd b7       	in	r28, 0x3d	; 61
    3608:	de b7       	in	r29, 0x3e	; 62
    360a:	8a 83       	std	Y+2, r24	; 0x02
	#if TIMER2_MODE == TIMER2_FAST_PWM_MODE
		u8 Local_u8DutyCycle = 0;
    360c:	19 82       	std	Y+1, r1	; 0x01
		M_TIMER2_voidInterrupt_Disable(TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT);
    360e:	80 e0       	ldi	r24, 0x00	; 0
    3610:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <M_TIMER2_voidInterrupt_Disable>
		#if TIMER2_COMPARE_MATCH_MODE == TIMER2_OC2_CLEAR
			Local_u8DutyCycle = (Copy_u8DutyCycle * TIMER2_MAXIMUM_VALUE)/100 ;
    3614:	8a 81       	ldd	r24, Y+2	; 0x02
    3616:	48 2f       	mov	r20, r24
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	ca 01       	movw	r24, r20
    361c:	9c 01       	movw	r18, r24
    361e:	22 0f       	add	r18, r18
    3620:	33 1f       	adc	r19, r19
    3622:	c9 01       	movw	r24, r18
    3624:	96 95       	lsr	r25
    3626:	98 2f       	mov	r25, r24
    3628:	88 27       	eor	r24, r24
    362a:	97 95       	ror	r25
    362c:	87 95       	ror	r24
    362e:	82 1b       	sub	r24, r18
    3630:	93 0b       	sbc	r25, r19
    3632:	84 0f       	add	r24, r20
    3634:	95 1f       	adc	r25, r21
    3636:	24 e6       	ldi	r18, 0x64	; 100
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	b9 01       	movw	r22, r18
    363c:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__divmodhi4>
    3640:	cb 01       	movw	r24, r22
    3642:	89 83       	std	Y+1, r24	; 0x01
			TIMER2->OCR2 	  = Local_u8DutyCycle ;
    3644:	e2 e4       	ldi	r30, 0x42	; 66
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	81 83       	std	Z+1, r24	; 0x01
			/* Start Timer */
			M_TIMER2_voidStart();
    364c:	0e 94 36 18 	call	0x306c	; 0x306c <M_TIMER2_voidStart>
			/* Enable Interrupt */
			M_TIMER2_voidInterrupt_Enable(TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT);
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	0e 94 ba 1a 	call	0x3574	; 0x3574 <M_TIMER2_voidInterrupt_Enable>
			M_TIMER2_voidInterrupt_Enable(TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT);
		#endif
	#else
		#warning "[Fast PWM] is Disabled"
	#endif
}
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	cf 91       	pop	r28
    365c:	df 91       	pop	r29
    365e:	08 95       	ret

00003660 <M_TIMER2_voidSetPhaseCorrectPWM>:

void M_TIMER2_voidSetPhaseCorrectPWM(u8 Copy_u8DutyCycle)
{
    3660:	df 93       	push	r29
    3662:	cf 93       	push	r28
    3664:	0f 92       	push	r0
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	89 83       	std	Y+1, r24	; 0x01
		#endif
	#else
		#warning "[Phase Correct PWM] is Disabled"
	#endif

}
    366c:	0f 90       	pop	r0
    366e:	cf 91       	pop	r28
    3670:	df 91       	pop	r29
    3672:	08 95       	ret

00003674 <__vector_4>:
/*******************************************************************************/
/* Timer/Counter2 Compare Match  ISR */
TIMER2_CompareMatch_IRQHandler
{
    3674:	1f 92       	push	r1
    3676:	0f 92       	push	r0
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	0f 92       	push	r0
    367c:	11 24       	eor	r1, r1
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
//	TIMER2_CallBack[1]();
}
    3686:	cf 91       	pop	r28
    3688:	df 91       	pop	r29
    368a:	0f 90       	pop	r0
    368c:	0f be       	out	0x3f, r0	; 63
    368e:	0f 90       	pop	r0
    3690:	1f 90       	pop	r1
    3692:	18 95       	reti

00003694 <__vector_5>:
/*******************************************************************************/
/* Timer/Counter2 Overflow ISR */
TIMER2_Overflow_IRQHandler
{
    3694:	1f 92       	push	r1
    3696:	0f 92       	push	r0
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	0f 92       	push	r0
    369c:	11 24       	eor	r1, r1
    369e:	2f 93       	push	r18
    36a0:	3f 93       	push	r19
    36a2:	4f 93       	push	r20
    36a4:	5f 93       	push	r21
    36a6:	6f 93       	push	r22
    36a8:	7f 93       	push	r23
    36aa:	8f 93       	push	r24
    36ac:	9f 93       	push	r25
    36ae:	af 93       	push	r26
    36b0:	bf 93       	push	r27
    36b2:	ef 93       	push	r30
    36b4:	ff 93       	push	r31
    36b6:	df 93       	push	r29
    36b8:	cf 93       	push	r28
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
	if(	TIM2_GLOBAL_FUN == TIMER2_PERIODIC_INTERRUPT_FUNCTION)
    36be:	80 91 d7 01 	lds	r24, 0x01D7
    36c2:	81 30       	cpi	r24, 0x01	; 1
    36c4:	09 f0       	breq	.+2      	; 0x36c8 <__vector_5+0x34>
    36c6:	42 c0       	rjmp	.+132    	; 0x374c <__vector_5+0xb8>
	{
		static u32 Timer_Overflow_counter = 0;
		Timer_Overflow_counter++;
    36c8:	80 91 25 02 	lds	r24, 0x0225
    36cc:	90 91 26 02 	lds	r25, 0x0226
    36d0:	a0 91 27 02 	lds	r26, 0x0227
    36d4:	b0 91 28 02 	lds	r27, 0x0228
    36d8:	01 96       	adiw	r24, 0x01	; 1
    36da:	a1 1d       	adc	r26, r1
    36dc:	b1 1d       	adc	r27, r1
    36de:	80 93 25 02 	sts	0x0225, r24
    36e2:	90 93 26 02 	sts	0x0226, r25
    36e6:	a0 93 27 02 	sts	0x0227, r26
    36ea:	b0 93 28 02 	sts	0x0228, r27
		if(Timer_Overflow_counter == Global_u32Number_Of_Overflow+1)
    36ee:	80 91 1c 02 	lds	r24, 0x021C
    36f2:	90 91 1d 02 	lds	r25, 0x021D
    36f6:	a0 91 1e 02 	lds	r26, 0x021E
    36fa:	b0 91 1f 02 	lds	r27, 0x021F
    36fe:	9c 01       	movw	r18, r24
    3700:	ad 01       	movw	r20, r26
    3702:	2f 5f       	subi	r18, 0xFF	; 255
    3704:	3f 4f       	sbci	r19, 0xFF	; 255
    3706:	4f 4f       	sbci	r20, 0xFF	; 255
    3708:	5f 4f       	sbci	r21, 0xFF	; 255
    370a:	80 91 25 02 	lds	r24, 0x0225
    370e:	90 91 26 02 	lds	r25, 0x0226
    3712:	a0 91 27 02 	lds	r26, 0x0227
    3716:	b0 91 28 02 	lds	r27, 0x0228
    371a:	28 17       	cp	r18, r24
    371c:	39 07       	cpc	r19, r25
    371e:	4a 07       	cpc	r20, r26
    3720:	5b 07       	cpc	r21, r27
    3722:	09 f0       	breq	.+2      	; 0x3726 <__vector_5+0x92>
    3724:	61 c0       	rjmp	.+194    	; 0x37e8 <__vector_5+0x154>
		{
			TIMER2_CallBack[0]();
    3726:	e0 91 29 02 	lds	r30, 0x0229
    372a:	f0 91 2a 02 	lds	r31, 0x022A
    372e:	09 95       	icall
			Timer_Overflow_counter = 0 ;
    3730:	10 92 25 02 	sts	0x0225, r1
    3734:	10 92 26 02 	sts	0x0226, r1
    3738:	10 92 27 02 	sts	0x0227, r1
    373c:	10 92 28 02 	sts	0x0228, r1
			TIMER2->TCNT2 = Global_u8RemainingTime;
    3740:	e2 e4       	ldi	r30, 0x42	; 66
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 91 20 02 	lds	r24, 0x0220
    3748:	82 83       	std	Z+2, r24	; 0x02
    374a:	4e c0       	rjmp	.+156    	; 0x37e8 <__vector_5+0x154>

		}
	}

	else if (TIM2_GLOBAL_FUN == TIMER2_BUSY_WAIT_FUNCTION)
    374c:	80 91 d7 01 	lds	r24, 0x01D7
    3750:	88 23       	and	r24, r24
    3752:	09 f0       	breq	.+2      	; 0x3756 <__vector_5+0xc2>
    3754:	49 c0       	rjmp	.+146    	; 0x37e8 <__vector_5+0x154>
	{
		static u32 Timer_Overflow_counter = 0;
		Timer_Overflow_counter++;
    3756:	80 91 21 02 	lds	r24, 0x0221
    375a:	90 91 22 02 	lds	r25, 0x0222
    375e:	a0 91 23 02 	lds	r26, 0x0223
    3762:	b0 91 24 02 	lds	r27, 0x0224
    3766:	01 96       	adiw	r24, 0x01	; 1
    3768:	a1 1d       	adc	r26, r1
    376a:	b1 1d       	adc	r27, r1
    376c:	80 93 21 02 	sts	0x0221, r24
    3770:	90 93 22 02 	sts	0x0222, r25
    3774:	a0 93 23 02 	sts	0x0223, r26
    3778:	b0 93 24 02 	sts	0x0224, r27
		if(Timer_Overflow_counter == Global_u32Number_Of_Overflow+1)
    377c:	80 91 1c 02 	lds	r24, 0x021C
    3780:	90 91 1d 02 	lds	r25, 0x021D
    3784:	a0 91 1e 02 	lds	r26, 0x021E
    3788:	b0 91 1f 02 	lds	r27, 0x021F
    378c:	9c 01       	movw	r18, r24
    378e:	ad 01       	movw	r20, r26
    3790:	2f 5f       	subi	r18, 0xFF	; 255
    3792:	3f 4f       	sbci	r19, 0xFF	; 255
    3794:	4f 4f       	sbci	r20, 0xFF	; 255
    3796:	5f 4f       	sbci	r21, 0xFF	; 255
    3798:	80 91 21 02 	lds	r24, 0x0221
    379c:	90 91 22 02 	lds	r25, 0x0222
    37a0:	a0 91 23 02 	lds	r26, 0x0223
    37a4:	b0 91 24 02 	lds	r27, 0x0224
    37a8:	28 17       	cp	r18, r24
    37aa:	39 07       	cpc	r19, r25
    37ac:	4a 07       	cpc	r20, r26
    37ae:	5b 07       	cpc	r21, r27
    37b0:	61 f4       	brne	.+24     	; 0x37ca <__vector_5+0x136>
		{
			Timer_Overflow_counter = 0 ;
    37b2:	10 92 21 02 	sts	0x0221, r1
    37b6:	10 92 22 02 	sts	0x0222, r1
    37ba:	10 92 23 02 	sts	0x0223, r1
    37be:	10 92 24 02 	sts	0x0224, r1
			TIM2_GLOBAL_FUN = TIMER2_NO_OPERATION ;
    37c2:	82 e0       	ldi	r24, 0x02	; 2
    37c4:	80 93 d7 01 	sts	0x01D7, r24
    37c8:	0f c0       	rjmp	.+30     	; 0x37e8 <__vector_5+0x154>
		}
		else if(Global_u32Number_Of_Overflow == 0)
    37ca:	80 91 1c 02 	lds	r24, 0x021C
    37ce:	90 91 1d 02 	lds	r25, 0x021D
    37d2:	a0 91 1e 02 	lds	r26, 0x021E
    37d6:	b0 91 1f 02 	lds	r27, 0x021F
    37da:	00 97       	sbiw	r24, 0x00	; 0
    37dc:	a1 05       	cpc	r26, r1
    37de:	b1 05       	cpc	r27, r1
    37e0:	19 f4       	brne	.+6      	; 0x37e8 <__vector_5+0x154>
		{
			TIM2_GLOBAL_FUN = TIMER2_NO_OPERATION ;
    37e2:	82 e0       	ldi	r24, 0x02	; 2
    37e4:	80 93 d7 01 	sts	0x01D7, r24
		}
	}
}
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	ff 91       	pop	r31
    37ee:	ef 91       	pop	r30
    37f0:	bf 91       	pop	r27
    37f2:	af 91       	pop	r26
    37f4:	9f 91       	pop	r25
    37f6:	8f 91       	pop	r24
    37f8:	7f 91       	pop	r23
    37fa:	6f 91       	pop	r22
    37fc:	5f 91       	pop	r21
    37fe:	4f 91       	pop	r20
    3800:	3f 91       	pop	r19
    3802:	2f 91       	pop	r18
    3804:	0f 90       	pop	r0
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	0f 90       	pop	r0
    380a:	1f 90       	pop	r1
    380c:	18 95       	reti

0000380e <main>:
 {0b00000000,0b00000000,0b00000000,0b000001100,0b00000010,0b00011111,0b00000000,0b00000000},
 {0b00000000,0b00000000,0b00000000,0b00000111,0b00000101,0b00011111,0b00000000,0b00000000}
};
/****************************************************************************/
int main()
{
    380e:	0f 93       	push	r16
    3810:	df 93       	push	r29
    3812:	cf 93       	push	r28
    3814:	cd b7       	in	r28, 0x3d	; 61
    3816:	de b7       	in	r29, 0x3e	; 62
    3818:	68 97       	sbiw	r28, 0x18	; 24
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	f8 94       	cli
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	cd bf       	out	0x3d, r28	; 61
	f32 LM35_TEMP;
	u16 ADC_DATA;
	/****************************************************************************/
	/* Set ADC PORTA-PIN0 as Input */
	DIO_voidSetPinDirection(PORT_A,PIN_4,INPUT);
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	64 e0       	ldi	r22, 0x04	; 4
    3828:	40 e0       	ldi	r20, 0x00	; 0
    382a:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>

	/* OC2 FOR PWM MOTOR */
	DIO_voidSetPinDirection(PORT_D,PIN_7,OUTPUT);
    382e:	83 e0       	ldi	r24, 0x03	; 3
    3830:	67 e0       	ldi	r22, 0x07	; 7
    3832:	41 e0       	ldi	r20, 0x01	; 1
    3834:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>

	M_TIMER2_voidInit();
    3838:	0e 94 0e 18 	call	0x301c	; 0x301c <M_TIMER2_voidInit>
	H_LCD_void_Init();
    383c:	0e 94 45 11 	call	0x228a	; 0x228a <H_LCD_void_Init>
	MADC_Init(ADC_AVCC		                  ,
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	60 e0       	ldi	r22, 0x00	; 0
    3844:	44 e0       	ldi	r20, 0x04	; 4
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	00 e0       	ldi	r16, 0x00	; 0
    384a:	0e 94 47 07 	call	0xe8e	; 0xe8e <MADC_Init>
			  ADC_FREE_RUNNING
			  );

	/****************************************************************************/
	// Create the custom Arabic Name at position k in CGRAM
	for(u8 k = 0; k<8 ;k++)
    384e:	18 8a       	std	Y+16, r1	; 0x10
    3850:	13 c0       	rjmp	.+38     	; 0x3878 <main+0x6a>
	{
	     H_LCD_void_creatCustomChar(Arabic_Name[k], k);
    3852:	28 ed       	ldi	r18, 0xD8	; 216
    3854:	31 e0       	ldi	r19, 0x01	; 1
    3856:	88 89       	ldd	r24, Y+16	; 0x10
    3858:	88 2f       	mov	r24, r24
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	88 0f       	add	r24, r24
    3866:	99 1f       	adc	r25, r25
    3868:	82 0f       	add	r24, r18
    386a:	93 1f       	adc	r25, r19
    386c:	68 89       	ldd	r22, Y+16	; 0x10
    386e:	0e 94 96 14 	call	0x292c	; 0x292c <H_LCD_void_creatCustomChar>
			  ADC_FREE_RUNNING
			  );

	/****************************************************************************/
	// Create the custom Arabic Name at position k in CGRAM
	for(u8 k = 0; k<8 ;k++)
    3872:	88 89       	ldd	r24, Y+16	; 0x10
    3874:	8f 5f       	subi	r24, 0xFF	; 255
    3876:	88 8b       	std	Y+16, r24	; 0x10
    3878:	88 89       	ldd	r24, Y+16	; 0x10
    387a:	88 30       	cpi	r24, 0x08	; 8
    387c:	50 f3       	brcs	.-44     	; 0x3852 <main+0x44>
	{
	     H_LCD_void_creatCustomChar(Arabic_Name[k], k);
	}
	/****************************************************************************/

	H_LCD_void_sendString("  <<< ");
    387e:	80 e6       	ldi	r24, 0x60	; 96
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	0e 94 ab 12 	call	0x2556	; 0x2556 <H_LCD_void_sendString>

	for(u8 k = 0; k<8 ;k++)
    3886:	1f 86       	std	Y+15, r1	; 0x0f
    3888:	0c c0       	rjmp	.+24     	; 0x38a2 <main+0x94>
	{
		if(k == 4)
    388a:	8f 85       	ldd	r24, Y+15	; 0x0f
    388c:	84 30       	cpi	r24, 0x04	; 4
    388e:	19 f4       	brne	.+6      	; 0x3896 <main+0x88>
		{
			H_LCD_void_sendData(' ');
    3890:	80 e2       	ldi	r24, 0x20	; 32
    3892:	0e 94 87 12 	call	0x250e	; 0x250e <H_LCD_void_sendData>
		}
	    // Display the custom character
		H_LCD_void_displayCustomChar(k);
    3896:	8f 85       	ldd	r24, Y+15	; 0x0f
    3898:	0e 94 c8 14 	call	0x2990	; 0x2990 <H_LCD_void_displayCustomChar>
	}
	/****************************************************************************/

	H_LCD_void_sendString("  <<< ");

	for(u8 k = 0; k<8 ;k++)
    389c:	8f 85       	ldd	r24, Y+15	; 0x0f
    389e:	8f 5f       	subi	r24, 0xFF	; 255
    38a0:	8f 87       	std	Y+15, r24	; 0x0f
    38a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    38a4:	88 30       	cpi	r24, 0x08	; 8
    38a6:	88 f3       	brcs	.-30     	; 0x388a <main+0x7c>
		}
	    // Display the custom character
		H_LCD_void_displayCustomChar(k);
	}

	H_LCD_void_sendString(" >>>");
    38a8:	87 e6       	ldi	r24, 0x67	; 103
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	0e 94 ab 12 	call	0x2556	; 0x2556 <H_LCD_void_sendString>

	/****************************************************************************/
	H_LCD_void_gotoXY(1,0);
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	60 e0       	ldi	r22, 0x00	; 0
    38b4:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Testing ADC [ LM35 ]");
    38b8:	8c e6       	ldi	r24, 0x6C	; 108
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	0e 94 ab 12 	call	0x2556	; 0x2556 <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2,0);
    38c0:	82 e0       	ldi	r24, 0x02	; 2
    38c2:	60 e0       	ldi	r22, 0x00	; 0
    38c4:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("VREF = 2V");
    38c8:	81 e8       	ldi	r24, 0x81	; 129
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	0e 94 ab 12 	call	0x2556	; 0x2556 <H_LCD_void_sendString>
	H_LCD_void_gotoXY(3,0);
    38d0:	83 e0       	ldi	r24, 0x03	; 3
    38d2:	60 e0       	ldi	r22, 0x00	; 0
    38d4:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Tempreture [C]:");
    38d8:	8b e8       	ldi	r24, 0x8B	; 139
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	0e 94 ab 12 	call	0x2556	; 0x2556 <H_LCD_void_sendString>
	while(1)
	{
		MADC_getDigitalValueSynchNonBlocking(ADC_CHANNEL_4,&ADC_DATA);
    38e0:	9e 01       	movw	r18, r28
    38e2:	2b 5e       	subi	r18, 0xEB	; 235
    38e4:	3f 4f       	sbci	r19, 0xFF	; 255
    38e6:	84 e0       	ldi	r24, 0x04	; 4
    38e8:	b9 01       	movw	r22, r18
    38ea:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <MADC_getDigitalValueSynchNonBlocking>
		LM35_TEMP = ((f32)ADC_DATA / 256.0) * 2.0  ;
    38ee:	8d 89       	ldd	r24, Y+21	; 0x15
    38f0:	9e 89       	ldd	r25, Y+22	; 0x16
    38f2:	cc 01       	movw	r24, r24
    38f4:	a0 e0       	ldi	r26, 0x00	; 0
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	bc 01       	movw	r22, r24
    38fa:	cd 01       	movw	r24, r26
    38fc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	bc 01       	movw	r22, r24
    3906:	cd 01       	movw	r24, r26
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	40 e8       	ldi	r20, 0x80	; 128
    390e:	53 e4       	ldi	r21, 0x43	; 67
    3910:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	9c 01       	movw	r18, r24
    391a:	ad 01       	movw	r20, r26
    391c:	ca 01       	movw	r24, r20
    391e:	b9 01       	movw	r22, r18
    3920:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	89 8b       	std	Y+17, r24	; 0x11
    392a:	9a 8b       	std	Y+18, r25	; 0x12
    392c:	ab 8b       	std	Y+19, r26	; 0x13
    392e:	bc 8b       	std	Y+20, r27	; 0x14
		H_LCD_void_gotoXY(3,16);
    3930:	83 e0       	ldi	r24, 0x03	; 3
    3932:	60 e1       	ldi	r22, 0x10	; 16
    3934:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <H_LCD_void_gotoXY>
		H_LCD_void_sendIntNum(LM35_TEMP);
    3938:	69 89       	ldd	r22, Y+17	; 0x11
    393a:	7a 89       	ldd	r23, Y+18	; 0x12
    393c:	8b 89       	ldd	r24, Y+19	; 0x13
    393e:	9c 89       	ldd	r25, Y+20	; 0x14
    3940:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3944:	dc 01       	movw	r26, r24
    3946:	cb 01       	movw	r24, r22
    3948:	bc 01       	movw	r22, r24
    394a:	cd 01       	movw	r24, r26
    394c:	0e 94 07 14 	call	0x280e	; 0x280e <H_LCD_void_sendIntNum>
		if(LM35_TEMP < 25)
    3950:	69 89       	ldd	r22, Y+17	; 0x11
    3952:	7a 89       	ldd	r23, Y+18	; 0x12
    3954:	8b 89       	ldd	r24, Y+19	; 0x13
    3956:	9c 89       	ldd	r25, Y+20	; 0x14
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	48 ec       	ldi	r20, 0xC8	; 200
    395e:	51 e4       	ldi	r21, 0x41	; 65
    3960:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3964:	88 23       	and	r24, r24
    3966:	64 f4       	brge	.+24     	; 0x3980 <main+0x172>
		{
			M_TIMER2_voidSetFastPWM(0);
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	0e 94 00 1b 	call	0x3600	; 0x3600 <M_TIMER2_voidSetFastPWM>
			H_LCD_void_gotoXY(2,12);
    396e:	82 e0       	ldi	r24, 0x02	; 2
    3970:	6c e0       	ldi	r22, 0x0C	; 12
    3972:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("FAN OFF ");
    3976:	8b e9       	ldi	r24, 0x9B	; 155
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	0e 94 ab 12 	call	0x2556	; 0x2556 <H_LCD_void_sendString>
    397e:	4b c0       	rjmp	.+150    	; 0x3a16 <main+0x208>
		}
		else if((LM35_TEMP >= 25) && (LM35_TEMP <= 35))
    3980:	18 8e       	std	Y+24, r1	; 0x18
    3982:	69 89       	ldd	r22, Y+17	; 0x11
    3984:	7a 89       	ldd	r23, Y+18	; 0x12
    3986:	8b 89       	ldd	r24, Y+19	; 0x13
    3988:	9c 89       	ldd	r25, Y+20	; 0x14
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	48 ec       	ldi	r20, 0xC8	; 200
    3990:	51 e4       	ldi	r21, 0x41	; 65
    3992:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    3996:	88 23       	and	r24, r24
    3998:	14 f0       	brlt	.+4      	; 0x399e <main+0x190>
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	88 8f       	std	Y+24, r24	; 0x18
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	98 8d       	ldd	r25, Y+24	; 0x18
    39a2:	89 27       	eor	r24, r25
    39a4:	88 23       	and	r24, r24
    39a6:	01 f5       	brne	.+64     	; 0x39e8 <main+0x1da>
    39a8:	1f 8a       	std	Y+23, r1	; 0x17
    39aa:	69 89       	ldd	r22, Y+17	; 0x11
    39ac:	7a 89       	ldd	r23, Y+18	; 0x12
    39ae:	8b 89       	ldd	r24, Y+19	; 0x13
    39b0:	9c 89       	ldd	r25, Y+20	; 0x14
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	4c e0       	ldi	r20, 0x0C	; 12
    39b8:	52 e4       	ldi	r21, 0x42	; 66
    39ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    39be:	18 16       	cp	r1, r24
    39c0:	14 f0       	brlt	.+4      	; 0x39c6 <main+0x1b8>
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	8f 8b       	std	Y+23, r24	; 0x17
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	9f 89       	ldd	r25, Y+23	; 0x17
    39ca:	89 27       	eor	r24, r25
    39cc:	88 23       	and	r24, r24
    39ce:	61 f4       	brne	.+24     	; 0x39e8 <main+0x1da>
		{
			M_TIMER2_voidSetFastPWM(50);
    39d0:	82 e3       	ldi	r24, 0x32	; 50
    39d2:	0e 94 00 1b 	call	0x3600	; 0x3600 <M_TIMER2_voidSetFastPWM>
			H_LCD_void_gotoXY(2,12);
    39d6:	82 e0       	ldi	r24, 0x02	; 2
    39d8:	6c e0       	ldi	r22, 0x0C	; 12
    39da:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("FAN 50%");
    39de:	84 ea       	ldi	r24, 0xA4	; 164
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	0e 94 ab 12 	call	0x2556	; 0x2556 <H_LCD_void_sendString>
    39e6:	17 c0       	rjmp	.+46     	; 0x3a16 <main+0x208>

		}
		else if(LM35_TEMP > 35)
    39e8:	69 89       	ldd	r22, Y+17	; 0x11
    39ea:	7a 89       	ldd	r23, Y+18	; 0x12
    39ec:	8b 89       	ldd	r24, Y+19	; 0x13
    39ee:	9c 89       	ldd	r25, Y+20	; 0x14
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	4c e0       	ldi	r20, 0x0C	; 12
    39f6:	52 e4       	ldi	r21, 0x42	; 66
    39f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39fc:	18 16       	cp	r1, r24
    39fe:	5c f4       	brge	.+22     	; 0x3a16 <main+0x208>
		{
			M_TIMER2_voidSetFastPWM(80);
    3a00:	80 e5       	ldi	r24, 0x50	; 80
    3a02:	0e 94 00 1b 	call	0x3600	; 0x3600 <M_TIMER2_voidSetFastPWM>
			H_LCD_void_gotoXY(2,12);
    3a06:	82 e0       	ldi	r24, 0x02	; 2
    3a08:	6c e0       	ldi	r22, 0x0C	; 12
    3a0a:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("FAN 80%");
    3a0e:	8c ea       	ldi	r24, 0xAC	; 172
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	0e 94 ab 12 	call	0x2556	; 0x2556 <H_LCD_void_sendString>
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	a8 e4       	ldi	r26, 0x48	; 72
    3a1c:	b4 e4       	ldi	r27, 0x44	; 68
    3a1e:	8b 87       	std	Y+11, r24	; 0x0b
    3a20:	9c 87       	std	Y+12, r25	; 0x0c
    3a22:	ad 87       	std	Y+13, r26	; 0x0d
    3a24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	4a e7       	ldi	r20, 0x7A	; 122
    3a34:	55 e4       	ldi	r21, 0x45	; 69
    3a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	8f 83       	std	Y+7, r24	; 0x07
    3a40:	98 87       	std	Y+8, r25	; 0x08
    3a42:	a9 87       	std	Y+9, r26	; 0x09
    3a44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a46:	6f 81       	ldd	r22, Y+7	; 0x07
    3a48:	78 85       	ldd	r23, Y+8	; 0x08
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e8       	ldi	r20, 0x80	; 128
    3a54:	5f e3       	ldi	r21, 0x3F	; 63
    3a56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a5a:	88 23       	and	r24, r24
    3a5c:	2c f4       	brge	.+10     	; 0x3a68 <main+0x25a>
		__ticks = 1;
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	9e 83       	std	Y+6, r25	; 0x06
    3a64:	8d 83       	std	Y+5, r24	; 0x05
    3a66:	3f c0       	rjmp	.+126    	; 0x3ae6 <main+0x2d8>
	else if (__tmp > 65535)
    3a68:	6f 81       	ldd	r22, Y+7	; 0x07
    3a6a:	78 85       	ldd	r23, Y+8	; 0x08
    3a6c:	89 85       	ldd	r24, Y+9	; 0x09
    3a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	3f ef       	ldi	r19, 0xFF	; 255
    3a74:	4f e7       	ldi	r20, 0x7F	; 127
    3a76:	57 e4       	ldi	r21, 0x47	; 71
    3a78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a7c:	18 16       	cp	r1, r24
    3a7e:	4c f5       	brge	.+82     	; 0x3ad2 <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	40 e2       	ldi	r20, 0x20	; 32
    3a8e:	51 e4       	ldi	r21, 0x41	; 65
    3a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	bc 01       	movw	r22, r24
    3a9a:	cd 01       	movw	r24, r26
    3a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	9e 83       	std	Y+6, r25	; 0x06
    3aa6:	8d 83       	std	Y+5, r24	; 0x05
    3aa8:	0f c0       	rjmp	.+30     	; 0x3ac8 <main+0x2ba>
    3aaa:	80 e9       	ldi	r24, 0x90	; 144
    3aac:	91 e0       	ldi	r25, 0x01	; 1
    3aae:	9c 83       	std	Y+4, r25	; 0x04
    3ab0:	8b 83       	std	Y+3, r24	; 0x03
    3ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <main+0x2a8>
    3aba:	9c 83       	std	Y+4, r25	; 0x04
    3abc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3abe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	9e 83       	std	Y+6, r25	; 0x06
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aca:	9e 81       	ldd	r25, Y+6	; 0x06
    3acc:	00 97       	sbiw	r24, 0x00	; 0
    3ace:	69 f7       	brne	.-38     	; 0x3aaa <main+0x29c>
    3ad0:	14 c0       	rjmp	.+40     	; 0x3afa <main+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad4:	78 85       	ldd	r23, Y+8	; 0x08
    3ad6:	89 85       	ldd	r24, Y+9	; 0x09
    3ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	9e 83       	std	Y+6, r25	; 0x06
    3ae4:	8d 83       	std	Y+5, r24	; 0x05
    3ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aea:	9a 83       	std	Y+2, r25	; 0x02
    3aec:	89 83       	std	Y+1, r24	; 0x01
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	9a 81       	ldd	r25, Y+2	; 0x02
    3af2:	01 97       	sbiw	r24, 0x01	; 1
    3af4:	f1 f7       	brne	.-4      	; 0x3af2 <main+0x2e4>
    3af6:	9a 83       	std	Y+2, r25	; 0x02
    3af8:	89 83       	std	Y+1, r24	; 0x01

		}
		_delay_ms(800);
		H_LCD_void_gotoXY(3,16);
    3afa:	83 e0       	ldi	r24, 0x03	; 3
    3afc:	60 e1       	ldi	r22, 0x10	; 16
    3afe:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("    ");
    3b02:	84 eb       	ldi	r24, 0xB4	; 180
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	0e 94 ab 12 	call	0x2556	; 0x2556 <H_LCD_void_sendString>
    3b0a:	ea ce       	rjmp	.-556    	; 0x38e0 <main+0xd2>

00003b0c <__mulsi3>:
    3b0c:	62 9f       	mul	r22, r18
    3b0e:	d0 01       	movw	r26, r0
    3b10:	73 9f       	mul	r23, r19
    3b12:	f0 01       	movw	r30, r0
    3b14:	82 9f       	mul	r24, r18
    3b16:	e0 0d       	add	r30, r0
    3b18:	f1 1d       	adc	r31, r1
    3b1a:	64 9f       	mul	r22, r20
    3b1c:	e0 0d       	add	r30, r0
    3b1e:	f1 1d       	adc	r31, r1
    3b20:	92 9f       	mul	r25, r18
    3b22:	f0 0d       	add	r31, r0
    3b24:	83 9f       	mul	r24, r19
    3b26:	f0 0d       	add	r31, r0
    3b28:	74 9f       	mul	r23, r20
    3b2a:	f0 0d       	add	r31, r0
    3b2c:	65 9f       	mul	r22, r21
    3b2e:	f0 0d       	add	r31, r0
    3b30:	99 27       	eor	r25, r25
    3b32:	72 9f       	mul	r23, r18
    3b34:	b0 0d       	add	r27, r0
    3b36:	e1 1d       	adc	r30, r1
    3b38:	f9 1f       	adc	r31, r25
    3b3a:	63 9f       	mul	r22, r19
    3b3c:	b0 0d       	add	r27, r0
    3b3e:	e1 1d       	adc	r30, r1
    3b40:	f9 1f       	adc	r31, r25
    3b42:	bd 01       	movw	r22, r26
    3b44:	cf 01       	movw	r24, r30
    3b46:	11 24       	eor	r1, r1
    3b48:	08 95       	ret

00003b4a <__udivmodqi4>:
    3b4a:	99 1b       	sub	r25, r25
    3b4c:	79 e0       	ldi	r23, 0x09	; 9
    3b4e:	04 c0       	rjmp	.+8      	; 0x3b58 <__udivmodqi4_ep>

00003b50 <__udivmodqi4_loop>:
    3b50:	99 1f       	adc	r25, r25
    3b52:	96 17       	cp	r25, r22
    3b54:	08 f0       	brcs	.+2      	; 0x3b58 <__udivmodqi4_ep>
    3b56:	96 1b       	sub	r25, r22

00003b58 <__udivmodqi4_ep>:
    3b58:	88 1f       	adc	r24, r24
    3b5a:	7a 95       	dec	r23
    3b5c:	c9 f7       	brne	.-14     	; 0x3b50 <__udivmodqi4_loop>
    3b5e:	80 95       	com	r24
    3b60:	08 95       	ret

00003b62 <__divmodhi4>:
    3b62:	97 fb       	bst	r25, 7
    3b64:	09 2e       	mov	r0, r25
    3b66:	07 26       	eor	r0, r23
    3b68:	0a d0       	rcall	.+20     	; 0x3b7e <__divmodhi4_neg1>
    3b6a:	77 fd       	sbrc	r23, 7
    3b6c:	04 d0       	rcall	.+8      	; 0x3b76 <__divmodhi4_neg2>
    3b6e:	49 d0       	rcall	.+146    	; 0x3c02 <__udivmodhi4>
    3b70:	06 d0       	rcall	.+12     	; 0x3b7e <__divmodhi4_neg1>
    3b72:	00 20       	and	r0, r0
    3b74:	1a f4       	brpl	.+6      	; 0x3b7c <__divmodhi4_exit>

00003b76 <__divmodhi4_neg2>:
    3b76:	70 95       	com	r23
    3b78:	61 95       	neg	r22
    3b7a:	7f 4f       	sbci	r23, 0xFF	; 255

00003b7c <__divmodhi4_exit>:
    3b7c:	08 95       	ret

00003b7e <__divmodhi4_neg1>:
    3b7e:	f6 f7       	brtc	.-4      	; 0x3b7c <__divmodhi4_exit>
    3b80:	90 95       	com	r25
    3b82:	81 95       	neg	r24
    3b84:	9f 4f       	sbci	r25, 0xFF	; 255
    3b86:	08 95       	ret

00003b88 <__udivmodsi4>:
    3b88:	a1 e2       	ldi	r26, 0x21	; 33
    3b8a:	1a 2e       	mov	r1, r26
    3b8c:	aa 1b       	sub	r26, r26
    3b8e:	bb 1b       	sub	r27, r27
    3b90:	fd 01       	movw	r30, r26
    3b92:	0d c0       	rjmp	.+26     	; 0x3bae <__udivmodsi4_ep>

00003b94 <__udivmodsi4_loop>:
    3b94:	aa 1f       	adc	r26, r26
    3b96:	bb 1f       	adc	r27, r27
    3b98:	ee 1f       	adc	r30, r30
    3b9a:	ff 1f       	adc	r31, r31
    3b9c:	a2 17       	cp	r26, r18
    3b9e:	b3 07       	cpc	r27, r19
    3ba0:	e4 07       	cpc	r30, r20
    3ba2:	f5 07       	cpc	r31, r21
    3ba4:	20 f0       	brcs	.+8      	; 0x3bae <__udivmodsi4_ep>
    3ba6:	a2 1b       	sub	r26, r18
    3ba8:	b3 0b       	sbc	r27, r19
    3baa:	e4 0b       	sbc	r30, r20
    3bac:	f5 0b       	sbc	r31, r21

00003bae <__udivmodsi4_ep>:
    3bae:	66 1f       	adc	r22, r22
    3bb0:	77 1f       	adc	r23, r23
    3bb2:	88 1f       	adc	r24, r24
    3bb4:	99 1f       	adc	r25, r25
    3bb6:	1a 94       	dec	r1
    3bb8:	69 f7       	brne	.-38     	; 0x3b94 <__udivmodsi4_loop>
    3bba:	60 95       	com	r22
    3bbc:	70 95       	com	r23
    3bbe:	80 95       	com	r24
    3bc0:	90 95       	com	r25
    3bc2:	9b 01       	movw	r18, r22
    3bc4:	ac 01       	movw	r20, r24
    3bc6:	bd 01       	movw	r22, r26
    3bc8:	cf 01       	movw	r24, r30
    3bca:	08 95       	ret

00003bcc <__divmodsi4>:
    3bcc:	97 fb       	bst	r25, 7
    3bce:	09 2e       	mov	r0, r25
    3bd0:	05 26       	eor	r0, r21
    3bd2:	0e d0       	rcall	.+28     	; 0x3bf0 <__divmodsi4_neg1>
    3bd4:	57 fd       	sbrc	r21, 7
    3bd6:	04 d0       	rcall	.+8      	; 0x3be0 <__divmodsi4_neg2>
    3bd8:	d7 df       	rcall	.-82     	; 0x3b88 <__udivmodsi4>
    3bda:	0a d0       	rcall	.+20     	; 0x3bf0 <__divmodsi4_neg1>
    3bdc:	00 1c       	adc	r0, r0
    3bde:	38 f4       	brcc	.+14     	; 0x3bee <__divmodsi4_exit>

00003be0 <__divmodsi4_neg2>:
    3be0:	50 95       	com	r21
    3be2:	40 95       	com	r20
    3be4:	30 95       	com	r19
    3be6:	21 95       	neg	r18
    3be8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bea:	4f 4f       	sbci	r20, 0xFF	; 255
    3bec:	5f 4f       	sbci	r21, 0xFF	; 255

00003bee <__divmodsi4_exit>:
    3bee:	08 95       	ret

00003bf0 <__divmodsi4_neg1>:
    3bf0:	f6 f7       	brtc	.-4      	; 0x3bee <__divmodsi4_exit>
    3bf2:	90 95       	com	r25
    3bf4:	80 95       	com	r24
    3bf6:	70 95       	com	r23
    3bf8:	61 95       	neg	r22
    3bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    3c00:	08 95       	ret

00003c02 <__udivmodhi4>:
    3c02:	aa 1b       	sub	r26, r26
    3c04:	bb 1b       	sub	r27, r27
    3c06:	51 e1       	ldi	r21, 0x11	; 17
    3c08:	07 c0       	rjmp	.+14     	; 0x3c18 <__udivmodhi4_ep>

00003c0a <__udivmodhi4_loop>:
    3c0a:	aa 1f       	adc	r26, r26
    3c0c:	bb 1f       	adc	r27, r27
    3c0e:	a6 17       	cp	r26, r22
    3c10:	b7 07       	cpc	r27, r23
    3c12:	10 f0       	brcs	.+4      	; 0x3c18 <__udivmodhi4_ep>
    3c14:	a6 1b       	sub	r26, r22
    3c16:	b7 0b       	sbc	r27, r23

00003c18 <__udivmodhi4_ep>:
    3c18:	88 1f       	adc	r24, r24
    3c1a:	99 1f       	adc	r25, r25
    3c1c:	5a 95       	dec	r21
    3c1e:	a9 f7       	brne	.-22     	; 0x3c0a <__udivmodhi4_loop>
    3c20:	80 95       	com	r24
    3c22:	90 95       	com	r25
    3c24:	bc 01       	movw	r22, r24
    3c26:	cd 01       	movw	r24, r26
    3c28:	08 95       	ret

00003c2a <__prologue_saves__>:
    3c2a:	2f 92       	push	r2
    3c2c:	3f 92       	push	r3
    3c2e:	4f 92       	push	r4
    3c30:	5f 92       	push	r5
    3c32:	6f 92       	push	r6
    3c34:	7f 92       	push	r7
    3c36:	8f 92       	push	r8
    3c38:	9f 92       	push	r9
    3c3a:	af 92       	push	r10
    3c3c:	bf 92       	push	r11
    3c3e:	cf 92       	push	r12
    3c40:	df 92       	push	r13
    3c42:	ef 92       	push	r14
    3c44:	ff 92       	push	r15
    3c46:	0f 93       	push	r16
    3c48:	1f 93       	push	r17
    3c4a:	cf 93       	push	r28
    3c4c:	df 93       	push	r29
    3c4e:	cd b7       	in	r28, 0x3d	; 61
    3c50:	de b7       	in	r29, 0x3e	; 62
    3c52:	ca 1b       	sub	r28, r26
    3c54:	db 0b       	sbc	r29, r27
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	09 94       	ijmp

00003c62 <__epilogue_restores__>:
    3c62:	2a 88       	ldd	r2, Y+18	; 0x12
    3c64:	39 88       	ldd	r3, Y+17	; 0x11
    3c66:	48 88       	ldd	r4, Y+16	; 0x10
    3c68:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c70:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c72:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c74:	b9 84       	ldd	r11, Y+9	; 0x09
    3c76:	c8 84       	ldd	r12, Y+8	; 0x08
    3c78:	df 80       	ldd	r13, Y+7	; 0x07
    3c7a:	ee 80       	ldd	r14, Y+6	; 0x06
    3c7c:	fd 80       	ldd	r15, Y+5	; 0x05
    3c7e:	0c 81       	ldd	r16, Y+4	; 0x04
    3c80:	1b 81       	ldd	r17, Y+3	; 0x03
    3c82:	aa 81       	ldd	r26, Y+2	; 0x02
    3c84:	b9 81       	ldd	r27, Y+1	; 0x01
    3c86:	ce 0f       	add	r28, r30
    3c88:	d1 1d       	adc	r29, r1
    3c8a:	0f b6       	in	r0, 0x3f	; 63
    3c8c:	f8 94       	cli
    3c8e:	de bf       	out	0x3e, r29	; 62
    3c90:	0f be       	out	0x3f, r0	; 63
    3c92:	cd bf       	out	0x3d, r28	; 61
    3c94:	ed 01       	movw	r28, r26
    3c96:	08 95       	ret

00003c98 <_exit>:
    3c98:	f8 94       	cli

00003c9a <__stop_program>:
    3c9a:	ff cf       	rjmp	.-2      	; 0x3c9a <__stop_program>
